<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Overfitting and regularization]]></title>
      <url>https://www.prime666.com/2018/02/27/Overfitting-and-regularization/</url>
      <content type="html"><![CDATA[<h1 id="Overfitting-and-regularization"><a href="#Overfitting-and-regularization" class="headerlink" title="Overfitting and regularization"></a>Overfitting and regularization</h1><p>The goal of supervised learning is to produce models that <em>generalize</em> to previously unseen data. When a model achieves low error on training data but performs much worse on test data, we say that the model has <strong><em>overfit</em>.</strong></p>
<p>下图反映了固定样本数目的情况下，预测误差的情况：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gluon.mxnet.io/_images/regularization-overfitting.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>很多因素决定一个模型是否能被很好的泛化（generalize），参数越多的模型复杂度越高，模型参数取值范围越大的模型越复杂。就神经网络而言，训练步数越多越复杂。</p>
<p>不同类别模型的复杂度很难直接比较，一个基本的经验法则是：<u>A model that can readily（方便的） explain <em>arbitrary</em> facts is what statisticians view as complex, whereas one that has only a limited expressive power but still manages to（manage to do sth 设法完成，努力完成） explain the data well is probably closer to the truth.</u></p>
<h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><p>Broadly speaking the family of techniques geared towards（旨在） mitigating（=alleviate 缓解） overfitting are referred to as <strong><em>regularization</em></strong>.</p>
<p>Given the intuition from the previous chart, we might attempt to make our model less complex. </p>
<ul>
<li><p>One way to do this would be to lower the number of free parameters. For example, we could <strong>throw away</strong>（丢弃） some subset of our input features (and thus the corresponding parameters) that we thought were least informative.</p>
</li>
<li><p>Another approach is to limit the values that our weights might take. One common approach is to force the weights to <strong>take small values</strong>. We can accomplish this by changing our optimization objective to penalize the value of our weights.The most popular regularizer is the $ℓ<em>2^2 $ norm:<br>$$<br>\sum</em>{i}(\hat{y}-y)^2 + \lambda | \textbf{w} |^2_2<br>$$<br>Here, $|\textbf{w}|$ is the $l_2^2$ norm and $λ$ is a hyper-parameter that determines how aggressively we want to push the weights towards 0.</p>
<p>​</p>
</li>
</ul>
<p>除了上面提到的$L_2$正则化，还有其它的一些手段。Basically we assumed that small weight values are good：</p>
<ul>
<li>We could require that the total sum of the weights is small. That is what $L1$ regularization does via the penalty $∑_i|wi|$.</li>
<li>We could require that the largest weight is not too large. This is what $L∞$ regularization does via the penalty $max_i|wi|$.</li>
<li>We could require that the number of nonzero weights is small, i.e. that the weight vectors are <em>sparse</em>. This is what the $L0$ penalty does, i.e. $\sum_i I{w_i \neq 0}$</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://gluon.mxnet.io/_images/regularization.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>From left to right: L2 regularization, which constrains the parameters to a ball, L1 regularization, which constrains the parameters to a diamond (for lack of a better name, this is often referred to as an L1-ball), and $L_\infty$ regularization, which constrains the parameters to a hypercube.</p>
<p>All of this raises the question of <strong>why</strong> regularization is any good. There is an entire field of statistics devoted to this issue - Statistical Learning Theory. For now, a few simple rules of thumb（rule of thumb 〔根据实际经验的〕粗略的数字（计算方法）） suffice（v.足够）:</p>
<ul>
<li>Fewer parameters tend to be better than more parameters.</li>
<li>Better engineering for a specific problem that takes the actual problem into account will lead to better models, due to the prior knowledge that data scientists have about the problem at hand.</li>
<li>L2 is easier to optimize for than L1. In particular, many optimizers will not work well out of the box for L1. Using the latter requires something called <em>proximal operators</em>.</li>
<li>Dropout and other methods to make the model robust to perturbations（小变化） in the data often work better than off-the-shelf（现成的） L2 regularization.</li>
</ul>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>其中，<code>gluon.Trainer</code>中有一个参数<code>wd</code>代表<em>weight decay</em>，When we add an L2 penalty to the weights we are effectively（实际上） adding $\frac{\lambda}{2} |w|^2$ to the loss. Hence, every time we compute the gradient it gets an additional $λw$ term that is added to $g_t$, since this is the very derivative of the L2 penalty. As a result we end up taking a descent step not in the direction $−\eta gt$ but rather in the direction $−\eta (gt+λw)$. This effectively shrinks $w$ at each step by $\eta λw$, thus the name weight decay. To make this work in practice we just need to set the weight decay to something nonzero.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</div><div class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</div><div class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</div><div class="line"><span class="keyword">import</span> mxnet.ndarray <span class="keyword">as</span> nd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">ctx = mx.gpu(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># for plotting purposes</span></div><div class="line"><span class="keyword">import</span> matplotlib</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line">mnist = mx.test_utils.get_mnist()</div><div class="line">num_examples = <span class="number">1000</span></div><div class="line">batch_size = <span class="number">64</span></div><div class="line">train_data = mx.gluon.data.DataLoader(</div><div class="line">    mx.gluon.data.ArrayDataset(mnist[<span class="string">"train_data"</span>][:num_examples],</div><div class="line">                               mnist[<span class="string">"train_label"</span>][:num_examples].astype(np.float32)),</div><div class="line">                               batch_size, shuffle=<span class="keyword">True</span>)</div><div class="line">test_data = mx.gluon.data.DataLoader(</div><div class="line">    mx.gluon.data.ArrayDataset(mnist[<span class="string">"test_data"</span>][:num_examples],</div><div class="line">                               mnist[<span class="string">"test_label"</span>][:num_examples].astype(np.float32)),</div><div class="line">                               batch_size, shuffle=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">net = gluon.nn.Sequential()</div><div class="line"><span class="keyword">with</span> net.name_scope():</div><div class="line">    net.add(gluon.nn.Dense(<span class="number">10</span>))</div><div class="line"></div><div class="line"></div><div class="line">net.collect_params().initialize(mx.init.Xavier(magnitude=<span class="number">2.24</span>), ctx=ctx)</div><div class="line"></div><div class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</div><div class="line"></div><div class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.01</span>, <span class="string">'wd'</span>: <span class="number">0.0</span>&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net, loss_fun)</span>:</span></div><div class="line">    acc = mx.metric.Accuracy()</div><div class="line">    loss_avg = <span class="number">0.</span></div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(data_iterator):</div><div class="line">        data = data.as_in_context(ctx).reshape((<span class="number">-1</span>,<span class="number">784</span>))</div><div class="line">        label = label.as_in_context(ctx)</div><div class="line">        output = net(data)</div><div class="line">        loss = loss_fun(output, label)</div><div class="line">        predictions = nd.argmax(output, axis=<span class="number">1</span>)</div><div class="line">        acc.update(preds=predictions, labels=label)</div><div class="line">        loss_avg = loss_avg*i/(i+<span class="number">1</span>) + nd.mean(loss).asscalar()/(i+<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> acc.get()[<span class="number">1</span>], loss_avg</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learningcurves</span><span class="params">(loss_tr,loss_ts, acc_tr,acc_ts)</span>:</span></div><div class="line">    xs = list(range(len(loss_tr)))</div><div class="line"></div><div class="line">    f = plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>))</div><div class="line">    fg1 = f.add_subplot(<span class="number">121</span>)</div><div class="line">    fg2 = f.add_subplot(<span class="number">122</span>)</div><div class="line"></div><div class="line">    fg1.set_xlabel(<span class="string">'epoch'</span>,fontsize=<span class="number">14</span>)</div><div class="line">    fg1.set_title(<span class="string">'Comparing loss functions'</span>)</div><div class="line">    fg1.semilogy(xs, loss_tr)</div><div class="line">    fg1.semilogy(xs, loss_ts)</div><div class="line">    fg1.grid(<span class="keyword">True</span>,which=<span class="string">"both"</span>)</div><div class="line"></div><div class="line">    fg1.legend([<span class="string">'training loss'</span>, <span class="string">'testing loss'</span>],fontsize=<span class="number">14</span>)</div><div class="line"></div><div class="line">    fg2.set_title(<span class="string">'Comparing accuracy'</span>)</div><div class="line">    fg1.set_xlabel(<span class="string">'epoch'</span>,fontsize=<span class="number">14</span>)</div><div class="line">    fg2.plot(xs, acc_tr)</div><div class="line">    fg2.plot(xs, acc_ts)</div><div class="line">    fg2.grid(<span class="keyword">True</span>,which=<span class="string">"both"</span>)</div><div class="line">    fg2.legend([<span class="string">'training accuracy'</span>, <span class="string">'testing accuracy'</span>],fontsize=<span class="number">14</span>)</div><div class="line">    f.show()</div><div class="line"></div><div class="line"></div><div class="line">epochs = <span class="number">700</span></div><div class="line">moving_loss = <span class="number">0.</span></div><div class="line">niter=<span class="number">0</span></div><div class="line"></div><div class="line">loss_seq_train = []</div><div class="line">loss_seq_test = []</div><div class="line">acc_seq_train = []</div><div class="line">acc_seq_test = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(train_data):</div><div class="line">        data = data.as_in_context(ctx).reshape((<span class="number">-1</span>, <span class="number">784</span>))</div><div class="line">        label = label.as_in_context(ctx)</div><div class="line">        <span class="keyword">with</span> autograd.record():</div><div class="line">            output = net(data)</div><div class="line">            cross_entropy = loss(output, label)</div><div class="line">        cross_entropy.backward()</div><div class="line">        trainer.step(data.shape[<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="comment">##########################</span></div><div class="line">        <span class="comment">#  Keep a moving average of the losses</span></div><div class="line">        <span class="comment">##########################</span></div><div class="line">        niter += <span class="number">1</span></div><div class="line">        moving_loss = <span class="number">.99</span> * moving_loss + <span class="number">.01</span> * nd.mean(cross_entropy).asscalar()</div><div class="line">        est_loss = moving_loss/(<span class="number">1</span><span class="number">-0.99</span>**niter)</div><div class="line"></div><div class="line">    test_accuracy, test_loss = evaluate_accuracy(test_data, net, loss)</div><div class="line">    train_accuracy, train_loss = evaluate_accuracy(train_data, net, loss)</div><div class="line"></div><div class="line">    <span class="comment"># save them for later</span></div><div class="line">    loss_seq_train.append(train_loss)</div><div class="line">    loss_seq_test.append(test_loss)</div><div class="line">    acc_seq_train.append(train_accuracy)</div><div class="line">    acc_seq_test.append(test_accuracy)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> e % <span class="number">20</span> == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"Completed epoch %s. Train Loss: %s, Test Loss %s, Train_acc %s, Test_acc %s"</span> %</div><div class="line">              (e+<span class="number">1</span>, train_loss, test_loss, train_accuracy, test_accuracy))</div><div class="line"></div><div class="line"><span class="comment"># Plotting the learning curves</span></div><div class="line">plot_learningcurves(loss_seq_train,loss_seq_test,acc_seq_train,acc_seq_test)</div><div class="line"></div><div class="line"></div><div class="line">net.collect_params().initialize(mx.init.Xavier(magnitude=<span class="number">2.24</span>), ctx=ctx, force_reinit=<span class="keyword">True</span>)</div><div class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.01</span>, <span class="string">'wd'</span>: <span class="number">0.001</span>&#125;)</div><div class="line"></div><div class="line">moving_loss = <span class="number">0.</span></div><div class="line">niter=<span class="number">0</span></div><div class="line">loss_seq_train = []</div><div class="line">loss_seq_test = []</div><div class="line">acc_seq_train = []</div><div class="line">acc_seq_test = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(train_data):</div><div class="line">        data = data.as_in_context(ctx).reshape((<span class="number">-1</span>,<span class="number">784</span>))</div><div class="line">        label = label.as_in_context(ctx)</div><div class="line">        <span class="keyword">with</span> autograd.record():</div><div class="line">            output = net(data)</div><div class="line">            cross_entropy = loss(output, label)</div><div class="line">        cross_entropy.backward()</div><div class="line">        trainer.step(data.shape[<span class="number">0</span>])</div><div class="line"></div><div class="line">        <span class="comment">##########################</span></div><div class="line">        <span class="comment">#  Keep a moving average of the losses</span></div><div class="line">        <span class="comment">##########################</span></div><div class="line">        niter +=<span class="number">1</span></div><div class="line">        moving_loss = <span class="number">.99</span> * moving_loss + <span class="number">.01</span> * nd.mean(cross_entropy).asscalar()</div><div class="line">        est_loss = moving_loss/(<span class="number">1</span><span class="number">-0.99</span>**niter)</div><div class="line"></div><div class="line">    test_accuracy, test_loss = evaluate_accuracy(test_data, net,loss)</div><div class="line">    train_accuracy, train_loss = evaluate_accuracy(train_data, net, loss)</div><div class="line"></div><div class="line">    <span class="comment"># save them for later</span></div><div class="line">    loss_seq_train.append(train_loss)</div><div class="line">    loss_seq_test.append(test_loss)</div><div class="line">    acc_seq_train.append(train_accuracy)</div><div class="line">    acc_seq_test.append(test_accuracy)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> e % <span class="number">20</span> == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"Completed epoch %s. Train Loss: %s, Test Loss %s, Train_acc %s, Test_acc %s"</span> %</div><div class="line">              (e+<span class="number">1</span>, train_loss, test_loss, train_accuracy, test_accuracy))</div><div class="line"></div><div class="line"><span class="comment">## Plotting the learning curves</span></div><div class="line">plot_learningcurves(loss_seq_train,loss_seq_test,acc_seq_train,acc_seq_test)</div></pre></td></tr></table></figure>
<h2 id="result"><a href="#result" class="headerlink" title="result"></a>result</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2018-3-1-9-20.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2018-3-1-9-21.png" alt=""></p>
<p>​</p>
]]></content>
      
        <categories>
            
            <category> AI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mxnet Deep_learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multiclass_logistic_regression]]></title>
      <url>https://www.prime666.com/2018/02/26/Multiclass-logistic-regression/</url>
      <content type="html"><![CDATA[<p>深度学习多分类问题，logistics regression模型，使用mnist数据集。</p>
<a id="more"></a>
<p>#Multiclass logistic regression</p>
<p>Given $k$ classes, the most naive way to solve a <strong><em>multiclass classification</em></strong> problem is to train $k$ different binary classifiers $f_i(x)$.There’s a smarter way to go about this. We could force the output layer to be a discrete probability distribution over the $k$ classes.</p>
<p>We accomplish this by using the <strong><em>softmax</em> function</strong>. Given an input vector $z$, softmax does two things. First, it exponentiates (elementwise) $e^z$, forcing all values to be strictly positive. Then it normalizes so that all values sum to 1.<br>$$<br>\text{softmax}(\boldsymbol{z}) = \frac{e^{\boldsymbol{z}} }{\sum_{i=1}^k e^{z_i}}<br>$$<br>Because now we have $k$ outputs and not 1 we’ll need weights connecting each of our inputs to each of our outputs. Graphically, the network looks something like this:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/zackchase/mxnet-the-straight-dope/blob/master/img/simple-softmax-net.png?raw=true" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>We generate the linear mapping from inputs to outputs via a matrix-vector product $\boldsymbol{x}W+\boldsymbol{b}$.</p>
<p>The whole model, including the activation function can be written:<br>$$<br>\hat{y} = \text{softmax}(\boldsymbol{x} W + \boldsymbol{b})<br>$$<br>This model is sometimes called <em>multiclass logistic regression</em>. Other common names for it include <em>softmax regression</em> and <em>multinomial regression</em>.</p>
<p>##About batch training</p>
<p>In the above, we used plain lowercase letters for scalar variables, bolded lowercase letters for <strong>row</strong> vectors, and uppercase letters for matrices.</p>
<p> Assume we have $d$ inputs and $k$ outputs. Let’s note the shapes of the various variables explicitly as follows:<br>$$<br>\underset{1 \times k}{\boldsymbol z} = \underset{1 \times d}{\boldsymbol{x}}\ \underset{d \times k}{W} + \underset{1 \times k}{\boldsymbol{b}}<br>$$<br>Often we would one-hot encode the output label. So $\hat{y} = \text{softmax}(\boldsymbol z)$ becomes:<br>$$<br>\underset{1 \times k}{\boldsymbol{\hat{y}}<em>{one-hot}} = \text{softmax}</em>{one-hot}(\underset{1 \times k}{\boldsymbol z})<br>$$<br>When we input a batch of $m$ training examples, we would have matrix $\underset{m \times d}{X}$ that is the vertical stacking of individual training examples $\boldsymbol x_i$, due to the choice of using row vectors.<br>$$<br>\begin{split}X=<br>\begin{bmatrix}<br>    \boldsymbol x_1 \<br>    \boldsymbol x_2 \<br>    \vdots \<br>    \boldsymbol x<em>m<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    x</em>{11} &amp; x<em>{12} &amp; x</em>{13} &amp; \dots  &amp; x<em>{1d} \<br>    x</em>{21} &amp; x<em>{22} &amp; x</em>{23} &amp; \dots  &amp; x<em>{2d} \<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    x</em>{m1} &amp; x<em>{m2} &amp; x</em>{m3} &amp; \dots  &amp; x<em>{md}<br>\end{bmatrix}\end{split}<br>$$<br>${\boldsymbol{\hat{y}}</em>{one-hot}} = \text{softmax}({\boldsymbol z})$turns into:<br>$$<br>Y = \text{softmax}(Z) = \text{softmax}(XW + B)<br>$$<br>这里$B$是m*k矩阵，其相当于$\boldsymbol{b}$的m次拷贝，如下图所示：<br>$$<br>\begin{split} B =<br>\begin{bmatrix}<br>    \boldsymbol b \<br>    \boldsymbol b \<br>    \vdots \<br>    \boldsymbol b<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>    b<em>{1} &amp; b</em>{2} &amp; b<em>{3} &amp; \dots  &amp; b</em>{k} \<br>    b<em>{1} &amp; b</em>{2} &amp; b<em>{3} &amp; \dots  &amp; b</em>{k} \<br>    \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    b<em>{1} &amp; b</em>{2} &amp; b<em>{3} &amp; \dots  &amp; b</em>{k}<br>\end{bmatrix}\end{split}<br>$$<br>显然，可以通过broadcasting来直接使用$\boldsymbol{b}$。</p>
<p>Each row of matrix $\underset{m \times k}{Z}$ corresponds to one training example. The softmax function operates on each row of matrix $Z$ and returns a matrix $\underset{m \times k}{Y}$, each row of which corresponds to the one-hot encoded prediction of one training example.</p>
<p>##The MNIST dataset</p>
<p>This time we’re going to work with real data, each a 28 by 28 centrally cropped（裁剪） black &amp; white photograph of a handwritten digit. Our task will be come up with a model that can associate each image with the digit (0-9) that it depicts.</p>
<p>##The cross-entropy loss function</p>
<p>The relevant loss function here is called <strong>cross-entropy</strong> and it may be the most common loss function you’ll find in all of deep learning. That’s because at the moment, classification problems tend to be far more abundant than regression problems.</p>
<p>The basic idea is that we’re going to take a target Y that has been formatted as a one-hot vector, meaning one value corresponding to the correct label is set to 1 and the others are set to 0, e.g.<code>[0, 1, 0, 0, 0, 0, 0, 0, 0, 0]</code>.</p>
<p>The basic idea of cross-entropy loss is that we only care about how much probability the prediction assigned to the correct label. In other words, for true label 2, we only care about the component of yhat corresponding to 2</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross_entropy</span><span class="params">(yhat, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> - nd.sum(y * nd.log(yhat+<span class="number">1e-6</span>))</div></pre></td></tr></table></figure>
<p> MXNet’s has an efficient function that <u>simultaneously computes the softmax activation and cross-entropy loss</u>. However, if ever need to get the output probabilities,</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</div></pre></td></tr></table></figure>
<h2 id="scratch"><a href="#scratch" class="headerlink" title="scratch"></a>scratch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</div><div class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd, autograd, gluon</div><div class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> SGD</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">start_time = time.time()</div><div class="line"></div><div class="line">mx.random.seed(<span class="number">1</span>)</div><div class="line"></div><div class="line">data_ctx = mx.gpu(<span class="number">0</span>)</div><div class="line">model_ctx = mx.gpu(<span class="number">0</span>)</div><div class="line"></div><div class="line">num_inputs = <span class="number">784</span>  <span class="comment"># 28 * 28</span></div><div class="line">num_outputs = <span class="number">10</span></div><div class="line">num_examples = <span class="number">60000</span></div><div class="line"></div><div class="line">W = nd.random_normal(shape=(num_inputs, num_outputs), ctx=model_ctx)</div><div class="line"></div><div class="line">b = nd.random_normal(shape=num_outputs, ctx=model_ctx)</div><div class="line"></div><div class="line">params = [W, b]</div><div class="line"></div><div class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</div><div class="line">    param.attach_grad()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(data, label)</span>:</span></div><div class="line">    <span class="comment"># cast data and label to floats and normalize data to range [0, 1]</span></div><div class="line">    <span class="keyword">return</span> data.astype(np.float32)/<span class="number">255</span>, label.astype(np.float32)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(y_linear)</span>:</span></div><div class="line">    exp = nd.exp(y_linear-nd.max(y_linear, axis=<span class="number">1</span>).reshape((<span class="number">-1</span>, <span class="number">1</span>)))</div><div class="line">    norms = nd.sum(exp, axis=<span class="number">1</span>).reshape((<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">    <span class="keyword">return</span> exp / norms  <span class="comment"># 矩阵除以列向量，矩阵每一行除以列向量norms的每一行元素。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X)</span>:</span></div><div class="line">    y_linear = nd.dot(X, W) + b</div><div class="line">    yhat = softmax(y_linear)</div><div class="line">    <span class="keyword">return</span> yhat</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross_entropy</span><span class="params">(yhat, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> - nd.sum(y * nd.log(yhat+<span class="number">1e-6</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></div><div class="line">    <span class="comment"># 计算精确度</span></div><div class="line">    numerator = <span class="number">0.</span>  <span class="comment"># 分子</span></div><div class="line">    denominator = <span class="number">0.</span>  <span class="comment"># 分母</span></div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(data_iterator):</div><div class="line">        data = data.as_in_context(model_ctx).reshape((<span class="number">-1</span>, <span class="number">784</span>))</div><div class="line">        label = label.as_in_context(model_ctx)</div><div class="line">        <span class="comment"># label_one_hot = nd.one_hot(label, 10)</span></div><div class="line">        output = net(data)</div><div class="line">        predictions = nd.argmax(output, axis=<span class="number">1</span>)</div><div class="line">        numerator += nd.sum(predictions == label)</div><div class="line">        denominator += data.shape[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> (numerator / denominator).asscalar()</div><div class="line"></div><div class="line"></div><div class="line">mnist_train = gluon.data.vision.MNIST(root=<span class="string">'../data_set/mnist'</span>, train=<span class="keyword">True</span>, transform=transform)</div><div class="line">mnist_test = gluon.data.vision.MNIST(root=<span class="string">'../data_set/mnist'</span>, train=<span class="keyword">False</span>, transform=transform)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"># each item is a tuple of an image(28*28) and a label</div><div class="line">image, label = mnist_train[0]</div><div class="line">print(type(image))</div><div class="line">print(image.shape, label)  # 28 * 28 * 1</div><div class="line"></div><div class="line">im = mx.nd.tile(image, (1, 1, 3))  # 把图片按照第三维broadcast，这样matplotlib才能画图</div><div class="line">print(im.shape)</div><div class="line"></div><div class="line">plt.imshow(im.asnumpy())</div><div class="line">plt.show()</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line">batch_size = <span class="number">64</span></div><div class="line">train_data = mx.gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">test_data = mx.gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"></div><div class="line">epochs = <span class="number">20</span></div><div class="line">learning_rate = <span class="number">.005</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</div><div class="line">    cumulative_loss = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(train_data):</div><div class="line">        data = data.as_in_context(model_ctx).reshape((<span class="number">-1</span>, <span class="number">784</span>))</div><div class="line">        label = label.as_in_context(model_ctx)</div><div class="line">        label_one_hot = nd.one_hot(label, <span class="number">10</span>)</div><div class="line">        <span class="keyword">with</span> autograd.record():</div><div class="line">            output = net(data)</div><div class="line">            loss = cross_entropy(output, label_one_hot)</div><div class="line">        loss.backward()</div><div class="line">        SGD(params, learning_rate)</div><div class="line">        cumulative_loss += nd.sum(loss).asscalar()</div><div class="line"></div><div class="line">    test_accuracy = evaluate_accuracy(test_data, net)</div><div class="line">    train_accuracy = evaluate_accuracy(train_data, net)</div><div class="line">    print(<span class="string">"Epoch &#123;&#125;. Loss: &#123;&#125;, Train_acc &#123;:%&#125;, Test_acc &#123;:%&#125;"</span>.format(e, cumulative_loss/num_examples, train_accuracy, test_accuracy))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Define the function to do prediction</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_predict</span><span class="params">(net, data)</span>:</span></div><div class="line">    output = net(data)</div><div class="line">    <span class="keyword">return</span> nd.argmax(output, axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># let's sample 10 random data points from the test set</span></div><div class="line">sample_data = mx.gluon.data.DataLoader(mnist_test, batch_size=<span class="number">10</span>, shuffle=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(sample_data):</div><div class="line">    data = data.as_in_context(model_ctx)</div><div class="line">    print(data.shape)</div><div class="line">    im = nd.transpose(data, (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line">    im = nd.reshape(im, (<span class="number">28</span>, <span class="number">10</span>*<span class="number">28</span>, <span class="number">1</span>))</div><div class="line">    imtiles = nd.tile(im, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</div><div class="line">    print(imtiles.shape)</div><div class="line"></div><div class="line">    plt.imshow(imtiles.asnumpy())</div><div class="line">    plt.show()</div><div class="line">    pred = model_predict(net, data.reshape((<span class="number">-1</span>, <span class="number">784</span>)))</div><div class="line">    print(<span class="string">'model predictions are:'</span>, pred)</div><div class="line">    <span class="keyword">break</span></div><div class="line"></div><div class="line">end_time = time.time()</div><div class="line"></div><div class="line">print(<span class="string">'total time:%.0fs'</span> % (end_time-start_time))</div></pre></td></tr></table></figure>
<h2 id="gluon"><a href="#gluon" class="headerlink" title="gluon"></a>gluon</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</div><div class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd, autograd</div><div class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">data_ctx = mx.gpu(<span class="number">0</span>)</div><div class="line">model_ctx = mx.gpu(<span class="number">0</span>)</div><div class="line"></div><div class="line">mx.random.seed(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">batch_size = <span class="number">64</span></div><div class="line">num_inputs = <span class="number">784</span></div><div class="line">num_outputs = <span class="number">10</span></div><div class="line">num_examples = <span class="number">60000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(data, label)</span>:</span></div><div class="line">    <span class="keyword">return</span> data.astype(np.float32)/<span class="number">255</span>, label.astype(np.float32)</div><div class="line"></div><div class="line"></div><div class="line">train_data = mx.gluon.data.DataLoader(mx.gluon.data.vision.MNIST(root=<span class="string">'../data_set/mnist'</span>, train=<span class="keyword">True</span>, transform=transform), batch_size, shuffle=<span class="keyword">True</span>)</div><div class="line">test_data = mx.gluon.data.DataLoader(mx.gluon.data.vision.MNIST(root=<span class="string">'../data_set/mnist'</span>, train=<span class="keyword">False</span>, transform=transform), batch_size, shuffle=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">net = gluon.nn.Dense(num_outputs)</div><div class="line"></div><div class="line">net.collect_params().initialize(mx.init.Normal(sigma=<span class="number">1.</span>), ctx=model_ctx)</div><div class="line"></div><div class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</div><div class="line"></div><div class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></div><div class="line">    acc = mx.metric.Accuracy()</div><div class="line">    <span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(data_iterator):</div><div class="line">        data = data.as_in_context(model_ctx).reshape((<span class="number">-1</span>, <span class="number">784</span>))</div><div class="line">        label = label.as_in_context(model_ctx)</div><div class="line">        output = net(data)</div><div class="line">        predictions = nd.argmax(output, axis=<span class="number">1</span>)</div><div class="line">        acc.update(preds=predictions, labels=label)</div><div class="line">    <span class="keyword">return</span> acc.get()[<span class="number">1</span>]</div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">'未训练时精确度 %.2f'</span> % evaluate_accuracy(test_data, net))</div><div class="line"></div><div class="line">epochs = <span class="number">10</span></div><div class="line">moving_loss = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</div><div class="line">    cumulative_loss = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</div><div class="line">        data = data.as_in_context(model_ctx).reshape((<span class="number">-1</span>, <span class="number">784</span>))</div><div class="line">        label = label.as_in_context(model_ctx)</div><div class="line">        <span class="keyword">with</span> autograd.record():</div><div class="line">            output = net(data)</div><div class="line">            loss = softmax_cross_entropy(output, label)</div><div class="line">        loss.backward()</div><div class="line">        trainer.step(batch_size)</div><div class="line">        cumulative_loss += nd.sum(loss).asscalar()</div><div class="line">    test_accuracy = evaluate_accuracy(test_data, net)</div><div class="line">    train_accuracy = evaluate_accuracy(train_data, net)</div><div class="line">    print(<span class="string">"Epoch &#123;&#125;. Loss: &#123;&#125;, Train_acc &#123;:%&#125;, Test_acc &#123;:%&#125;"</span>.format(e, cumulative_loss / num_examples, train_accuracy,</div><div class="line">                                                                     test_accuracy))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_predict</span><span class="params">(net,data)</span>:</span></div><div class="line">    output = net(data.as_in_context(model_ctx))</div><div class="line">    <span class="keyword">return</span> nd.argmax(output, axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># let's sample 10 random data points from the test set</span></div><div class="line">sample_data = mx.gluon.data.DataLoader(mx.gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform), <span class="number">10</span>, shuffle=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">for</span> i, (data, label) <span class="keyword">in</span> enumerate(sample_data):</div><div class="line">    data = data.as_in_context(model_ctx)</div><div class="line">    print(data.shape)</div><div class="line">    im = nd.transpose(data, (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line">    im = nd.reshape(im, (<span class="number">28</span>, <span class="number">10</span>*<span class="number">28</span>, <span class="number">1</span>))</div><div class="line">    imtiles = nd.tile(im, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</div><div class="line"></div><div class="line">    plt.imshow(imtiles.asnumpy())</div><div class="line">    plt.show()</div><div class="line">    pred = model_predict(net, data.reshape((<span class="number">-1</span>, <span class="number">784</span>)))</div><div class="line">    print(<span class="string">'model predictions are:'</span>, pred)</div><div class="line">    <span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> AI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> machine_learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python第三方库用法]]></title>
      <url>https://www.prime666.com/2018/01/16/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>一些第三方库用法</p>
<a id="more"></a>
<h1 id="自带性能分析工具"><a href="#自带性能分析工具" class="headerlink" title="自带性能分析工具"></a>自带性能分析工具</h1><p>##cProfile</p>
<p>cProfile是Python解释器默认的性能分析器，它只测量CPU时间而不去关心内存等信息。</p>
<p>​<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2.JPG" alt="haha" title="">
                </div>
                <div class="image-caption">haha</div>
            </figure></p>
<p>其中，第一列表示有 39986次函数调用，其中23340次原生调用（不涉及递归）。</p>
<p>下面是具体的细节：</p>
<ul>
<li><p><code>ncalls</code>表示函数调用的次数，如果有两个数字，第一个是总调用次数，第二个是原生调用次数。</p>
</li>
<li><p><code>tottime</code>表示函数内部消耗时间，不包括调用其它函数的时间。</p>
</li>
<li><p><code>percall</code>是<code>tottime</code>除以<code>ncalls</code>，表示一个函数每次调用的平均时间。</p>
</li>
<li><p><code>cumtime</code>是之前所有子函数消耗时间的累计和（也包含递归调用）。</p>
</li>
<li><p><code>percall</code>是<code>cumtime</code>除以原生调用的数量，表示到该函数调用时，每个原生调用平均消耗时间。</p>
</li>
<li><p><code>filename:lineno(function)</code>显示了被分析函数所在文件名、行号和函数名。</p>
<p>​</p>
</li>
</ul>
<p>基本API如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Profile(timer=None, timeunit=0.0, subcalls=True, builtins=True)</div><div class="line">#返回一个类，可以提供自定义函数计时，必须是一个返回当前时间的函数。如果数字是整数，timeunit 指定一个乘数表示换算成秒的系数。例如，如果定时器返回以毫秒为单位测量的时间，则timeunit就是.001</div><div class="line">enable()</div><div class="line">#Start collecting profiling data.</div><div class="line">disable()</div><div class="line">#Stop collecting profiling data.</div><div class="line">create_stats()</div><div class="line">#Stop collecting profiling data and record the results internally as the current profile.</div><div class="line">#创建stats对象</div><div class="line">print_stats()</div><div class="line">#Create a Stats object based on the current profile and print the results to stdout.</div><div class="line">dump_stats(filename)</div><div class="line">#Write the results of the current profile to filename.</div><div class="line">run(cmd)</div><div class="line">#Profile the cmd via exec().</div><div class="line">runctx(cmd, globals, locals)</div><div class="line">#Profile the cmd via exec() with the specified global and local environment.</div><div class="line">runcall(func, *args, **kwargs)</div><div class="line">#Profile func(*args, **kwargs)</div></pre></td></tr></table></figure>
<p>##Stats类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">pstats.Stats(*filenames <span class="keyword">or</span> profile, stream=sys.stdout)</div><div class="line"><span class="comment">#构造函数，可以接受Profile类型的参数或者其生成文件的文件名</span></div><div class="line">strip_dirs()</div><div class="line"><span class="comment">#删除报告中所有函数文件名的路径信息。如果两个项目文件名函数名行数相同，就会合并。</span></div><div class="line">dump_stats(filename)</div><div class="line"><span class="comment">#生成文件</span></div><div class="line">sort_stats(*keys)</div><div class="line"><span class="comment">#根据参数进行排序，多个参数就先按第一个排，相同的再按第二个排</span></div><div class="line"><span class="string">'''</span></div><div class="line">'calls'	call count</div><div class="line">'cumulative'	cumulative time</div><div class="line">'cumtime'	cumulative time</div><div class="line">'file'	file name</div><div class="line">'filename'	file name</div><div class="line">'module'	file name</div><div class="line">'ncalls'	call count</div><div class="line">'pcalls'	primitive call count</div><div class="line">'line'	line number</div><div class="line">'name'	function name</div><div class="line">'nfl'	name/file/line</div><div class="line">'stdname'	standard name</div><div class="line">'time'	internal time</div><div class="line">'tottime'	internal time</div><div class="line">'''</div><div class="line">print_stats(*restrictions)</div><div class="line"><span class="comment">#把信息打印到stdout，里面的可选参数用于体现打印结果的形式，可以是整数、小数和字符串</span></div><div class="line"><span class="comment">#整数：限制打印的行数</span></div><div class="line"><span class="comment">#小数（0.0~1.0）：表示按总行数的的百分比打印（一些行不打印）</span></div><div class="line"><span class="comment">#字符串：正则，用于匹配stdname</span></div><div class="line">print_callers(*restrictions)</div><div class="line"><span class="comment">#规则和上面一样，显示调用关系（右边的调用左边的）</span></div></pre></td></tr></table></figure>
<p>#requests库基本概念</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/14.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/15.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图，基本的requests的库的操作实质上只有一个<code>request</code>函数，其它函数都是对此函数的二次封装，它们都对应http协议的基本操作</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/17.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/18.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>另外，requests库也提供了一些异常用于debug。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/16.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通用代码模式：</p>
<p>requests模块的基本操作返回的是<code>Response</code>对象，它支持以下基本属性：</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/19.JPG" alt=""></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/20.JPG" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    html=requests.request(<span class="string">'Head'</span>,URL,timeout=<span class="number">3</span>)</div><div class="line">    html.raise_for_status()<span class="comment">#判断返回类型是不是200，否则引起HTTPerror异常</span></div><div class="line">    html.encoding=html.apparent_encoding<span class="comment">#解决编码问题，前者只通过头部判断编码。</span></div><div class="line"></div><div class="line">    print(html.status_code)</div><div class="line">    print(html.encoding)</div><div class="line">    print(html.apparent_encoding)</div><div class="line">    print(html.text)</div><div class="line">    print(html.headers)</div><div class="line">    print(html.content)</div><div class="line"><span class="keyword">except</span> requests.HTTPError <span class="keyword">as</span> e:</div><div class="line">    print(e.msg)</div></pre></td></tr></table></figure>
<p>注意，Response对象之中包含有request对象，看以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">URL=<span class="string">'https://item.jd.com/2967929.html'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html=requests.request(<span class="string">'Get'</span>,URL,timeout=<span class="number">3</span>)</div><div class="line">        html.raise_for_status()<span class="comment">#判断返回类型是不是200，否则引起HTTPerror异常</span></div><div class="line">        html.encoding=html.apparent_encoding<span class="comment">#解决编码问题，前者只通过头部判断编码。</span></div><div class="line"></div><div class="line">        print(html.request.headers)</div><div class="line">        print(html.request.url)</div><div class="line">        print(html.headers)</div><div class="line"></div><div class="line">    <span class="keyword">except</span> requests.HTTPError <span class="keyword">as</span> e:</div><div class="line">        print(e.msg)</div><div class="line">        </div><div class="line"><span class="comment">#输出如下，可以看到request的head和response的head还是完全不同的。</span></div><div class="line"><span class="comment">#head可以理解为元数据。。</span></div><div class="line">&#123;<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>, <span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/2.13.0'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>&#125;</div><div class="line">https://item.jd.com/<span class="number">2967929.</span>html</div><div class="line">&#123;<span class="string">'Last-Modified'</span>: <span class="string">'Sat, 01 Apr 2017 14:45:15 GMT'</span>, <span class="string">'Date'</span>: <span class="string">'Sat, 01 Apr 2017 14:45:39 GMT'</span>, <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>, <span class="string">'hh'</span>: <span class="string">'1-1'</span>, <span class="string">'ser'</span>: <span class="string">'3.83'</span>, <span class="string">'Server'</span>: <span class="string">'JDWS/2.0'</span>, <span class="string">'Transfer-Encoding'</span>: <span class="string">'chunked'</span>, <span class="string">'Content-Encoding'</span>: <span class="string">'gzip'</span>, <span class="string">'Expires'</span>: <span class="string">'Sat, 01 Apr 2017 14:46:15 GMT'</span>, <span class="string">'Age'</span>: <span class="string">'0'</span>, <span class="string">'Cache-Control'</span>: <span class="string">'max-age=60'</span>, <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=gbk'</span>, <span class="string">'Via'</span>: <span class="string">'BJ-H-NX-110(HIT), http/1.1 BJ-CT-2-JCS-47 ( [cSsSfU])'</span>, <span class="string">'Vary'</span>: <span class="string">'Accept-Encoding'</span>&#125;</div></pre></td></tr></table></figure>
<p>##小例子——百度关键字搜索</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">URL='https://wwww.baidu.com/s'</div><div class="line"></div><div class="line">def test():</div><div class="line">    try:</div><div class="line">        # html=requests.request('Get',URL,timeout=3)</div><div class="line">        html=requests.get(URL,params=&#123;'wd':'Python'&#125;,timeout=3)</div><div class="line">        html.raise_for_status()#判断返回类型是不是200，否则引起HTTPerror异常</div><div class="line">        html.encoding=html.apparent_encoding#解决编码问题，前者只通过头部判断编码。</div><div class="line"></div><div class="line">        print(html.request.headers)</div><div class="line">        print(html.request.url)</div><div class="line">        print(html.headers)</div><div class="line"></div><div class="line">    except requests.HTTPError as e:</div><div class="line">        print(e.msg)</div><div class="line">        </div><div class="line"></div><div class="line">&#123;'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'User-Agent': 'python-requests/2.13.0', 'Accept': '*/*'&#125;</div><div class="line">http://www.baidu.com/s?wd=Python</div><div class="line">&#123;'Connection': 'Keep-Alive', 'BDQID': '0x81fef0b1000a35aa', 'Content-Type': 'text/html;charset=utf-8', 'BDPAGETYPE': '3', 'Vary': 'Accept-Encoding', 'P3P': 'CP=" OTI DSP COR IVA OUR IND COM "', 'Content-Encoding': 'gzip', 'Set-Cookie': 'BAIDUID=898004FADBB69298785150C34A09E2DB:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, BIDUPSID=898004FADBB69298785150C34A09E2DB; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, PSTM=1491058449; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, BD_CK_SAM=1;path=/, PSINO=1; domain=.baidu.com; path=/, BDSVRTM=52; path=/, H_PS_PSSID=1433_12897_21081_22177_20930; path=/; domain=.baidu.com', 'Date': 'Sat, 01 Apr 2017 14:54:09 GMT', 'X-UA-Compatible': 'IE=Edge,chrome=1', 'Server': 'BWS/1.1', 'CKPACKNUM': '2', 'BDUSERID': '0', 'Cache-Control': 'private', 'X-Powered-By': 'HPHP', 'Transfer-Encoding': 'chunked', 'CKRNDSTR': '1000a35aa'&#125;</div></pre></td></tr></table></figure>
<p>主要利用百度的关键字搜索，<strong>注意看url</strong></p>
<p>##小例子——爬取图片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">URL=<span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1491069395426&amp;di=902ba066e42c94de496bba270bb67d8d&amp;imgtype=0&amp;src=http%3A%2F%2Ff.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2F83025aafa40f4bfb76c0cac5074f78f0f736180a.jpg'</span></div><div class="line">root=<span class="string">'D:\\prime\\图库\\'</span><span class="comment">#转义字符\很重要</span></div><div class="line"><span class="comment"># path=root+URL.split('/')[-1] 这样用可以让图片名字取原本链接中的文件名</span></div><div class="line">path=root+<span class="string">'炮姐.jpg'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</div><div class="line">            os.mkdir(root)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</div><div class="line">            html=requests.request(<span class="string">'Get'</span>,URL,timeout=<span class="number">3</span>)</div><div class="line">            html.raise_for_status()<span class="comment">#判断返回类型是不是200，否则引起HTTPerror异常</span></div><div class="line">            <span class="keyword">with</span> open(path,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write(html.content)<span class="comment">#写二进制数据</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'文件已经存在'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">except</span> requests.HTTPError <span class="keyword">as</span> e:</div><div class="line">        print(e.msg)</div></pre></td></tr></table></figure>
<h2 id="小例子——爬取大学排名"><a href="#小例子——爬取大学排名" class="headerlink" title="小例子——爬取大学排名"></a>小例子——爬取大学排名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLtext</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html=requests.get(url,timeout=<span class="number">10</span>)</div><div class="line">        html.raise_for_status()</div><div class="line">        html.encoding=html.apparent_encoding</div><div class="line">    <span class="keyword">except</span> requests.HTTPError <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">    <span class="keyword">return</span> html.text</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">store_in_list</span><span class="params">(html)</span>:</span></div><div class="line">    bs=BeautifulSoup(html,<span class="string">'lxml'</span>)</div><div class="line">    rank=[]</div><div class="line">    name=[]</div><div class="line">    location=[]</div><div class="line">    score=[]</div><div class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> bs.find(<span class="string">'tbody'</span>).children:</div><div class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):<span class="comment">#这个很重要，考虑子孙中字符串也是结点</span></div><div class="line">            tmp=tr.findAll(<span class="string">'td'</span>)</div><div class="line">            rank.append(tmp[<span class="number">0</span>].string)</div><div class="line">            name.append(tmp[<span class="number">1</span>].string)</div><div class="line">            location.append(tmp[<span class="number">2</span>].string)</div><div class="line">            score.append(tmp[<span class="number">3</span>].string)</div><div class="line">    pd.DataFrame(data=&#123;<span class="string">'排名'</span>:rank,<span class="string">'名字'</span>:name,<span class="string">'位置'</span>:location,<span class="string">'得分'</span>:score&#125;).to_csv(<span class="string">'E:\\pycharm\\data3\\大学排名.csv'</span>)</div><div class="line">    print(<span class="string">'完成'</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    url=<span class="string">'http://www.zuihaodaxue.com/zuihaodaxuepaiming2017.html'</span></div><div class="line">    L=[]</div><div class="line">    store_in_list(getHTMLtext(url))</div></pre></td></tr></table></figure>
<p>程序中爬取之后写入了csv文件，利用了<code>pandas</code>这个第三方库。</p>
<h1 id="urlib模块"><a href="#urlib模块" class="headerlink" title="urlib模块"></a>urlib模块</h1><h2 id="urlib-request"><a href="#urlib-request" class="headerlink" title="urlib.request"></a>urlib.request</h2><h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h3><p>此模块是用于处理url的标准库。</p>
<p>基本方法如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">urlopen(url, data=<span class="keyword">None</span>, [timeout, ]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</div><div class="line"><span class="comment">#此方法用来打开url，url可以是字符串也可以是request对象。其中data参数是指定要发送到服务器的附加数据的对象;如果不需要此类数据，则为None。timeout指定超时时间，单位是秒。其它参数再查文档吧，不常用。</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">URL=<span class="string">'https://www.baidu.com/'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html=urlopen(URL,timeout=<span class="number">3</span>)</div><div class="line">        print(type(html))</div><div class="line">        print(html.geturl())</div><div class="line">        print(<span class="string">'-'</span>*<span class="number">50</span>)</div><div class="line">        print(html.info())</div><div class="line">        print(<span class="string">'-'</span>*<span class="number">50</span>)</div><div class="line">        print(html.getcode())</div><div class="line">        print(html.msg)</div><div class="line">        print(<span class="string">'-'</span>*<span class="number">50</span>)</div><div class="line">        print(html.reason)</div><div class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</div><div class="line">        print(e.msg)</div><div class="line">        </div><div class="line"><span class="string">'''</span></div><div class="line">结果如下</div><div class="line">&lt;class 'http.client.HTTPResponse'&gt;</div><div class="line">https://www.baidu.com/</div><div class="line">--------------------------------------------------</div><div class="line">Server: bfe/1.0.8.18</div><div class="line">Date: Wed, 29 Mar 2017 11:32:06 GMT</div><div class="line">Content-Type: text/html</div><div class="line">Content-Length: 227</div><div class="line">Connection: close</div><div class="line">Last-Modified: Tue, 14 Mar 2017 07:30:00 GMT</div><div class="line">Set-Cookie: BD_NOT_HTTPS=1; path=/; Max-Age=300</div><div class="line">Set-Cookie: BIDUPSID=5FD510CDBAE06553755A922E99BA0503; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</div><div class="line">Set-Cookie: PSTM=1490787126; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</div><div class="line">P3P: CP=" OTI DSP COR IVA OUR IND COM "</div><div class="line">X-UA-Compatible: IE=Edge,chrome=1</div><div class="line">Pragma: no-cache</div><div class="line">Cache-control: no-cache</div><div class="line">Strict-Transport-Security: max-age=0</div><div class="line">Accept-Ranges: bytes</div><div class="line">Set-Cookie: __bsi=14269974527146618256_00_30_N_N_2_0303_C02F_N_N_N_0; expires=Wed, 29-Mar-17 11:32:11 GMT; domain=www.baidu.com; path=/</div><div class="line">--------------------------------------------------</div><div class="line">200</div><div class="line">OK</div><div class="line">--------------------------------------------------</div><div class="line">OK</div><div class="line">'''</div></pre></td></tr></table></figure>
<p>这个函数返回的对象（可以像context manager一样工作）包含以下方法：</p>
<ul>
<li><code>geturl()</code>返回url用于确定是否重定向</li>
<li><code>info()</code>返回页面的元信息（就是描述信息的信息，比如headers）</li>
<li><code>getcode()</code>返回HTTP的状态码</li>
</ul>
<p>除了上述方法以外，对于HTTP或HTTPS的URL，返回一个轻微修改的<code>http.client.HTTPRespons</code>对象，除了上述方法，还有其它一些常用方法：</p>
<ol>
<li><code>HTTPResponse.read()</code>读取响应内容</li>
<li><code>HTTPResponse.getreaders()</code>就是上面的<code>info()</code>方法，不过每个属性：值对都封装成了元组的列表。</li>
</ol>
<h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Request(url, data=<span class="keyword">None</span>, headers=&#123;&#125;, origin_req_host=<span class="keyword">None</span>, unverifiable=<span class="keyword">False</span>, method=<span class="keyword">None</span>)</div><div class="line"><span class="comment">#url是个字符串</span></div><div class="line"><span class="comment">#data表示预提交的数据</span></div><div class="line"><span class="comment">#headers是个字典，主要用它欺骗服务器，冒充自己不是脚本。。。下面列出几个</span></div><div class="line"><span class="comment">#注意同一个网站会给不同浏览器返回不同的页面！！！</span></div><div class="line">pcUserAgent = &#123;</div><div class="line"><span class="string">"safari 5.1 – MAC"</span>:<span class="string">"User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,</div><div class="line"><span class="string">"safari 5.1 – Windows"</span>:<span class="string">"User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"</span>,</div><div class="line"><span class="string">"IE 9.0"</span>:<span class="string">"User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);"</span>,</div><div class="line"><span class="string">"IE 8.0"</span>:<span class="string">"User-Agent:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)"</span>,</div><div class="line"><span class="string">"IE 7.0"</span>:<span class="string">"User-Agent:Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"</span>,</div><div class="line"><span class="string">"IE 6.0"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"</span>,</div><div class="line"><span class="string">"Firefox 4.0.1 – MAC"</span>:<span class="string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"</span>,</div><div class="line"><span class="string">"Firefox 4.0.1 – Windows"</span>:<span class="string">"User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1"</span>,</div><div class="line"><span class="string">"Opera 11.11 – MAC"</span>:<span class="string">"User-Agent:Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11"</span>,</div><div class="line"><span class="string">"Opera 11.11 – Windows"</span>:<span class="string">"User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11"</span>,</div><div class="line"><span class="string">"Chrome 17.0 – MAC"</span>:<span class="string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</div><div class="line"><span class="string">"Maxthon"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)"</span>,</div><div class="line"><span class="string">"Tencent TT"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)"</span>,</div><div class="line"><span class="string">"The World 2.x"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"</span>,</div><div class="line"><span class="string">"The World 3.x"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)"</span>,</div><div class="line"><span class="string">"sogou 1.x"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)"</span>,</div><div class="line"><span class="string">"360"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)"</span>,</div><div class="line"><span class="string">"Avant"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)"</span>,</div><div class="line"><span class="string">"Green Browser"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">mobileUserAgent = &#123;</div><div class="line"><span class="string">"iOS 4.33 – iPhone"</span>:<span class="string">"User-Agent:Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span>,</div><div class="line"><span class="string">"iOS 4.33 – iPod Touch"</span>:<span class="string">"User-Agent:Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span>,</div><div class="line"><span class="string">"iOS 4.33 – iPad"</span>:<span class="string">"User-Agent:Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"</span>,</div><div class="line"><span class="string">"Android N1"</span>:<span class="string">"User-Agent: Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span>,</div><div class="line"><span class="string">"Android QQ"</span>:<span class="string">"User-Agent: MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span>,</div><div class="line"><span class="string">"Android Opera "</span>:<span class="string">"User-Agent: Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10"</span>,</div><div class="line"><span class="string">"Android Pad Moto Xoom"</span>:<span class="string">"User-Agent: Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13"</span>,</div><div class="line"><span class="string">"BlackBerry"</span>:<span class="string">"User-Agent: Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+"</span>,</div><div class="line"><span class="string">"WebOS HP Touchpad"</span>:<span class="string">"User-Agent: Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0"</span>,</div><div class="line"><span class="string">"Nokia N97"</span>:<span class="string">"User-Agent: Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124"</span>,</div><div class="line"><span class="string">"Windows Phone Mango"</span>:<span class="string">"User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)"</span>,</div><div class="line"><span class="string">"UC"</span>:<span class="string">"User-Agent: UCWEB7.0.2.37/28/999"</span>,</div><div class="line"><span class="string">"UC standard"</span>:<span class="string">"User-Agent: NOKIA5700/ UCWEB7.0.2.37/28/999"</span>,</div><div class="line"><span class="string">"UCOpenwave"</span>:<span class="string">"User-Agent: Openwave/ UCWEB7.0.2.37/28/999"</span>,</div><div class="line"><span class="string">"UC Opera"</span>:<span class="string">"User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="顺便说说re"><a href="#顺便说说re" class="headerlink" title="顺便说说re"></a>顺便说说re</h3><p>说道这里，总结一下re的几个常用 方法，以免忘了：</p>
<ol>
<li><code>re.complie(pattern,flags=0)</code></li>
<li><code>re.search(string,[pos,[endpos]])</code>从头到尾匹配到就返回</li>
<li><code>re.match(string[,pos[,endpos]])</code>只匹配头部，不符合就返回None</li>
<li><code>re.findall(string[,pos[,endpos]])</code>任意匹配，返回列表</li>
<li><code>re.finditer(string[,pos[,endpos]])</code>和上面一样，返回一个迭代器，针对大范围的。</li>
</ol>
<h1 id="BeautifulSoup解析器"><a href="#BeautifulSoup解析器" class="headerlink" title="BeautifulSoup解析器"></a>BeautifulSoup解析器</h1><p>正如其名字一样，一碗美丽的汤~~~</p>
<p><code>beautifulsoup</code>支持很多解析器，我用的是<code>lxml</code>(安装需要c环境，可以直接下载wheel模块后本地安装)</p>
<p><code>Scrapy</code>使用<code>Xpath</code>当过滤器，在网页中过滤数据。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_091253.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#beautifulsoup" target="_blank" rel="noopener">4.40文档</a></p>
<p><strong>bs4接受一个文件句柄或者字符串，以及上述的”网页”。</strong>默认情况下,Beautiful Soup会将当前文档作为HTML格式解析，如果是xml，需要指定’xml’。</p>
<p>bs4会把输入的内容编码成<code>unicode</code>，它会主动猜测文件编码。也提供了两个关键字参数帮助它猜测。</p>
<p>Beautiful Soup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档。（暂时全指定为’lxml’）</p>
<p>编程中常用<code>prettify</code>来让html文件格式化输出。。</p>
<p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: <code>Tag</code> （标签）, <code>NavigableString</code>（字符串） , <code>BeautifulSoup</code> , <code>Comment</code> （注释）。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_091512.png" alt=""></p>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><ol>
<li><p>每个标签有自己的名字，可以通过 <code>.name</code> 来获取。</p>
</li>
<li><p>tag <code>&lt;b class=&quot;boldest&quot;&gt;</code> 有一个 “class” 的属性,值为 “boldest” 。 tag的属性的操作方法与字典相同，比如<code>tag[&#39;class&#39;]</code>，如果没有这个value会返回<code>keyerror</code>，用<code>tag.get(&#39;class&#39;)</code>就会返回None。</p>
<p><code>tag.attrs</code>会返回所有属性的字典。</p>
</li>
<li><p>多值属性会返回一个<code>list</code>。</p>
</li>
</ol>
<h3 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h3><p>Beautiful Soup用 <code>NavigableString</code> 类来包装tag中的字符串。</p>
<p>通过 <code>unicode()</code> 方法可以直接将 <code>NavigableString</code> 对象转换成Unicode字符串。</p>
<h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>对应的就是html中注释信息。</p>
<p><strong><code>.string</code>属性可以返回字符串，可以根据类型判断是<code>NavigableString</code>还是<code>Comment</code>。</strong></p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_102352.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h4 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h4><p>可以通过三种方法:</p>
<ul>
<li><code>contents</code>返回子节点的列表</li>
<li><code>children</code>返回子节点的生成器</li>
<li><code>descendants</code>返回递归子节点的生成器，前面两个只是直接子节点</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_093813.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line"># -*- by prime -*-</div><div class="line"></div><div class="line">from bs4 import BeautifulSoup</div><div class="line">import requests</div><div class="line"></div><div class="line">url='http://python123.io/ws/demo.html'</div><div class="line"></div><div class="line">r=requests.get(url)</div><div class="line">demo=r.text</div><div class="line"></div><div class="line"># print(demo)</div><div class="line"></div><div class="line">bsobj=BeautifulSoup(demo,'lxml')</div><div class="line"></div><div class="line">print(bsobj.prettify())</div><div class="line"></div><div class="line">print('-'*100)</div><div class="line"></div><div class="line"># print(bsobj.head.contents)</div><div class="line"></div><div class="line">L=bsobj.body.contents</div><div class="line">for x in L:</div><div class="line">    print(x)</div><div class="line">    print('*'*50)</div><div class="line"></div><div class="line">print('一共',len(L),'个标签')</div><div class="line">print('-'*100)</div><div class="line"></div><div class="line">for child in bsobj.body.children:</div><div class="line">    print(child)</div><div class="line">    print('*' * 50)</div><div class="line"></div><div class="line">for child in bsobj.body.descendants:</div><div class="line">    print(child)</div><div class="line">    print('*' * 50)</div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">输入如下：    </div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;title&gt;</div><div class="line">   This is a python demo page</div><div class="line">  &lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;p class="title"&gt;</div><div class="line">   &lt;b&gt;</div><div class="line">    The demo python introduces several python courses.</div><div class="line">   &lt;/b&gt;</div><div class="line">  &lt;/p&gt;</div><div class="line">  &lt;p class="course"&gt;</div><div class="line">   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">   &lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;</div><div class="line">    Basic Python</div><div class="line">   &lt;/a&gt;</div><div class="line">   and</div><div class="line">   &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;</div><div class="line">    Advanced Python</div><div class="line">   &lt;/a&gt;</div><div class="line">   .</div><div class="line">  &lt;/p&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">----------------------------------------------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">一共 5 个标签</div><div class="line">----------------------------------------------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="title"&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line">&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;</div><div class="line">**************************************************</div><div class="line">The demo python introduces several python courses.</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;p class="course"&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt; and &lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</div><div class="line">**************************************************</div><div class="line">Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line"></div><div class="line">**************************************************</div><div class="line">&lt;a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1"&gt;Basic Python&lt;/a&gt;</div><div class="line">**************************************************</div><div class="line">Basic Python</div><div class="line">**************************************************</div><div class="line"> and </div><div class="line">**************************************************</div><div class="line">&lt;a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2"&gt;Advanced Python&lt;/a&gt;</div><div class="line">**************************************************</div><div class="line">Advanced Python</div><div class="line">**************************************************</div><div class="line">.</div><div class="line">**************************************************</div><div class="line"></div><div class="line"></div><div class="line">**************************************************</div></pre></td></tr></table></figure>
<p>可以看到，<strong>子孙中是有空行等元素的。</strong></p>
<h4 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_095405.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">'http://python123.io/ws/demo.html'</span></div><div class="line"></div><div class="line">r=requests.get(url)</div><div class="line">demo=r.text</div><div class="line"></div><div class="line"><span class="comment"># print(demo)</span></div><div class="line"></div><div class="line">bsobj=BeautifulSoup(demo,<span class="string">'lxml'</span>)</div><div class="line"></div><div class="line">print(bsobj.prettify())</div><div class="line"></div><div class="line">print(<span class="string">'-'</span>*<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="comment"># print(bsobj.head.contents)</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> bsobj.a.parents:</div><div class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        print(parent)</div><div class="line">        print(<span class="string">'type is'</span>,type(parent))</div><div class="line">        print(<span class="string">'*'</span>*<span class="number">50</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(parent.name)</div><div class="line">        print(<span class="string">'type is'</span>, type(parent))</div><div class="line">        print(<span class="string">'-'</span>*<span class="number">60</span>)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></div><div class="line">   This is a python demo page</div><div class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">    The demo python introduces several python courses.</div><div class="line">   <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"course"</span>&gt;</span></div><div class="line">   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py1"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-268001"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">    Basic Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   and</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py2"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span></div><div class="line">    Advanced Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   .</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">----------------------------------------------------------------------------------------------------</div><div class="line">p</div><div class="line">type is <span class="tag">&lt;<span class="name">class</span> '<span class="attr">bs4.element.Tag</span>'&gt;</span></div><div class="line">------------------------------------------------------------</div><div class="line">body</div><div class="line">type is <span class="tag">&lt;<span class="name">class</span> '<span class="attr">bs4.element.Tag</span>'&gt;</span></div><div class="line">------------------------------------------------------------</div><div class="line">html</div><div class="line">type is <span class="tag">&lt;<span class="name">class</span> '<span class="attr">bs4.element.Tag</span>'&gt;</span></div><div class="line">------------------------------------------------------------</div><div class="line">[document]</div><div class="line">type is <span class="tag">&lt;<span class="name">class</span> '<span class="attr">bs4.BeautifulSoup</span>'&gt;</span></div><div class="line">------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>特别说明一下几点：</p>
<ol>
<li><code>BeautifulSoup</code> 对象的 <code>.parent</code> 是None</li>
<li>文档的顶层节点比如<html>的父节点是 <code>BeautifulSoup</code> 对象本身</html></li>
</ol>
<h4 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_101212.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_101049.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>注意结点的子孙和兄弟可能是NavigableString类型，需要判断。**</p>
<p>看如下情况：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></div><div class="line">   This is a python demo page</div><div class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">    The demo python introduces several python courses.</div><div class="line">   <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"course"</span>&gt;</span></div><div class="line">   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py1"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-268001"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">    Basic Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   and</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py2"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span></div><div class="line">    Advanced Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   .</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当我使用如下代码时，返回结果如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(bsobj.a.next_sibling)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and</div></pre></td></tr></table></figure>
<p>第一个a标签的下一个是字符串and！！！</p>
<p>如下代码遍历兄弟结点：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bsobj.a.next_siblings:</div><div class="line">    print(sibling)</div><div class="line">print(<span class="string">'*'</span>*<span class="number">50</span>)</div><div class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> bsobj.a.previous_siblings:</div><div class="line">    print(sibling)</div></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></div><div class="line">   This is a python demo page</div><div class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">    The demo python introduces several python courses.</div><div class="line">   <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"course"</span>&gt;</span></div><div class="line">   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py1"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-268001"</span> <span class="attr">id</span>=<span class="string">"link1"</span>&gt;</span></div><div class="line">    Basic Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   and</div><div class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py2"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span></div><div class="line">    Advanced Python</div><div class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">   .</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">以上是源文件，以下是结果。再次强调字符串也算结点。。。。</div><div class="line"> and </div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"py2"</span> <span class="attr">href</span>=<span class="string">"http://www.icourse163.org/course/BIT-1001870001"</span> <span class="attr">id</span>=<span class="string">"link2"</span>&gt;</span>Advanced Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">.</div><div class="line">**************************************************</div><div class="line">Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</div></pre></td></tr></table></figure>
<h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_111048.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个函数太常用了，以至于可以简写为以下情况：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_111206.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里，soup是一个bs4的对象。<code>&lt;tag&gt;</code>表示一个标签。</p>
<p>find家族的其它方法。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-04-02_111004.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>#Numpy</p>
<p>标准安装的Python中用列表(list)保存一组值，可以用来当作数组使用，不过由于列表的元素可以是任何对象，因此列表中所保存的是对象的指针。这样为了保存一个简单的[1,2,3]，需要有3个指针和三个整数对象。对于数值运算来说这种结构显然比较浪费内存和CPU计算时间。</p>
<p>此外Python还提供了一个array模块，array对象和列表不同，它直接保存数值，和C语言的一维数组比较类似。但是由于它不支持多维，也没有各种运算函数，因此也不适合做数值运算。</p>
<h2 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h2><ol>
<li><p>首先，可以直接接受python的序列，如果序列本身进行了嵌套就是多维数组。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">c = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])</div><div class="line"></div><div class="line">print(c.shape)</div><div class="line"></div><div class="line">c.shape=<span class="number">4</span>,<span class="number">3</span></div><div class="line"></div><div class="line">print(c)</div></pre></td></tr></table></figure>
<p>如上，其中<code>shape</code>返回一个元组表示各维度的大小，可以重新对其复制，其可以改变数组的形状，但是内存中保存位置不变。</p>
</li>
<li><p>显然，上面那种麻烦。</p>
<p>可以用一个循环生成，<code>arange</code>函数，和内建的python<code>range</code>函数一样，不过不要求是整数了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="keyword">True</span>, retstep=<span class="keyword">False</span>, dtype=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p><code>linspace</code>函数是对给定范围进行均分，关键字参数<code>endpoint</code>指定是否包含结尾的元素。</p>
</li>
<li><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.ones((<span class="number">3</span>, <span class="number">3</span>)) <span class="comment">#矩阵填充1 reminder: (3, 3) is a tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.zeros((<span class="number">2</span>, <span class="number">2</span>))<span class="comment">#填充0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.eye(<span class="number">3</span>)<span class="comment">#单位矩阵</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</div><div class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = np.diag(np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])) <span class="comment">#对角矩阵</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>]])</div></pre></td></tr></table></figure>
<p>传入的是元组时，就是多维的。只有一个数组就是一维的，注意参数<code>(2,)</code>和<code>2</code>等价。还有一个函数<code>empty</code>，其不对元素进行初始化。</p>
</li>
</ol>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>默认上述函数(ones等)创建时，若不指定类型，都是<code>float64</code>。</p>
<p>可以手动指定如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=float)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.dtype</div><div class="line">dtype(<span class="string">'float64'</span>)</div></pre></td></tr></table></figure>
<p>之所以划分不同类型，是为了能充分利用内存。平时所见到的<code>2.</code>表示就是浮点类型。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype</div><div class="line">dtype(<span class="string">'int64'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.dtype</div><div class="line">dtype(<span class="string">'float64'</span>)</div></pre></td></tr></table></figure>
<p>除此之外还有<strong>布尔类型、复数类型以及字符串</strong>。</p>
<p>其中，字符串有点特殊：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">20</span>]: f = np.array([<span class="string">'Bonjour'</span>, <span class="string">'Hello'</span>, <span class="string">'Hallo'</span>,])</div><div class="line"></div><div class="line">In [<span class="number">21</span>]: f.dtype</div><div class="line">Out[<span class="number">21</span>]: dtype(<span class="string">'&lt;U7'</span>)</div></pre></td></tr></table></figure>
<h2 id="索引和分片"><a href="#索引和分片" class="headerlink" title="索引和分片"></a>索引和分片</h2><p>索引不必多说，<strong>一维数组和python内建语法一致，当多维时，传入元组即可！</strong><u>虽然我们经常在Python中用圆括号将组元括起来，但是其实组元的语法定义只需要用逗号隔开即可，例如 x,y=y,x 就是用组元交换变量值的一个例子。但是如果函数有多个参数，必须用括号括起来了，不然解释器不知道你的参数是一个元组还是两个参数。</u></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.diag(np.arange(<span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>, <span class="number">1</span>]</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>切片也和内建语法一致！三个参数都可以省略，但是:不能省</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.scipy-lectures.org/_images/numpy_indexing.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<hr>
<p>特别说明：</p>
<p><strong>python标准的分片操作是copy，但是在这里是指向同一块内存的。</strong>所以想拷贝就用以下函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.copy(a, order=<span class="string">'K'</span>)</div></pre></td></tr></table></figure>
<p>返回一个ndarray。</p>
<hr>
<p>高级索引：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">28</span>]: a=np.arange(<span class="number">0</span>,<span class="number">10</span>)</div><div class="line"></div><div class="line">In [<span class="number">29</span>]: a[a%<span class="number">3</span>==<span class="number">0</span>]=<span class="number">-1</span></div><div class="line"></div><div class="line">In [<span class="number">30</span>]: a</div><div class="line">Out[<span class="number">30</span>]: array([<span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">-1</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">-1</span>,  <span class="number">7</span>,  <span class="number">8</span>, <span class="number">-1</span>])</div><div class="line">In [<span class="number">31</span>]: a[[<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>]]=<span class="number">0</span></div><div class="line"></div><div class="line">In [<span class="number">32</span>]: a</div><div class="line">Out[<span class="number">32</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>])</div></pre></td></tr></table></figure>
<p>如上，可以利用一个布尔表达式（比如上面的选择3的倍数或0）或者用一个数组来充当<strong>掩码</strong>的角色，进行索引。同样，它们也是指向同一块内存。</p>
<p>同样，用于充当掩码的数组也可以是多维的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = np.arange(<span class="number">10</span>)</div><div class="line">&gt;&gt;&gt; idx = np.<span class="built_in">array</span>([[<span class="number">3</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">7</span>]])</div><div class="line">&gt;&gt;&gt; idx.shape</div><div class="line">(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; a[idx]</div><div class="line"><span class="built_in">array</span>([[<span class="number">3</span>, <span class="number">4</span>],</div><div class="line">       [<span class="number">9</span>, <span class="number">7</span>]])</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.scipy-lectures.org/_images/numpy_fancy_indexing.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="与标量"><a href="#与标量" class="headerlink" title="与标量"></a>与标量</h3><p>和标量计算很简单，就是每个元素分别和标量运算即可。</p>
<h3 id="与向量"><a href="#与向量" class="headerlink" title="与向量"></a>与向量</h3><p>向量之间运算就是各个元素分别运算。<strong>特别注意，即使都是矩阵，也不是矩阵运算！</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">10</span>]: c=np.ones((<span class="number">2</span>,<span class="number">2</span>))</div><div class="line"></div><div class="line">In [<span class="number">11</span>]: c*c</div><div class="line">Out[<span class="number">11</span>]:</div><div class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>],</div><div class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>]])</div><div class="line"></div><div class="line">In [<span class="number">12</span>]: c.dot(c)</div><div class="line">Out[<span class="number">12</span>]:</div><div class="line">array([[ <span class="number">2.</span>,  <span class="number">2.</span>],</div><div class="line">       [ <span class="number">2.</span>,  <span class="number">2.</span>]])</div></pre></td></tr></table></figure>
<ol>
<li><p>比较</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</div><div class="line">array([<span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>], dtype=bool)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; b</div><div class="line">array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>], dtype=bool)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.array_equal(a, b)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.array_equal(a, c)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], dtype=bool)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], dtype=bool)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.logical_or(a, b)</div><div class="line"></div><div class="line">array([ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>], dtype=bool)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.logical_and(a, b)</div><div class="line"></div><div class="line">array([ <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], dtype=bool)</div></pre></td></tr></table></figure>
</li>
<li><p>函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.sin(a)</div><div class="line"></div><div class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.84147098</span>,  <span class="number">0.90929743</span>,  <span class="number">0.14112001</span>, <span class="number">-0.7568025</span> ])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.log(a)</div><div class="line"></div><div class="line">array([       -inf,  <span class="number">0.</span>        ,  <span class="number">0.69314718</span>,  <span class="number">1.09861229</span>,  <span class="number">1.38629436</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(a)</div><div class="line"></div><div class="line">array([  <span class="number">1.</span>        ,   <span class="number">2.71828183</span>,   <span class="number">7.3890561</span> ,  <span class="number">20.08553692</span>,  <span class="number">54.59815003</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>转置</p>
<p>直接用<code>.T</code>即可</p>
</li>
<li><p>求和</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.sum(x)</div><div class="line"></div><div class="line"><span class="number">10</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.sum()</div><div class="line"></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
</li>
<li><p>极值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.min()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.max()</div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.argmin()  <span class="comment"># index of minimum</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.argmax()  <span class="comment"># index of maximum</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>统计</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>]])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x.mean()</div><div class="line"><span class="number">1.75</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.median(x)</div><div class="line"><span class="number">1.5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.median(y, axis=<span class="number">-1</span>) <span class="comment"># last axis</span></div><div class="line">array([ <span class="number">2.</span>,  <span class="number">5.</span>])</div></pre></td></tr></table></figure>
</li>
<li><p>逻辑操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.zeros((<span class="number">100</span>, <span class="number">100</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.any(a != <span class="number">0</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>np.all(a == a)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = np.array([<span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>((a &lt;= b) &amp; (b &lt;= c)).all()<span class="comment">#((a &lt;= b) &amp; (b &lt;= c))的结果是一个bool数组，all就是检测是否全是True。any类似</span></div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python语法]]></title>
      <url>https://www.prime666.com/2018/01/16/python%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>python一些语法总结。</p>
<a id="more"></a>
<h1 id="Python语法"><a href="#Python语法" class="headerlink" title="Python语法"></a>Python语法</h1><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>既然变量可以指向函数，函数的参数能接收变量，那么<strong>一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数</strong>。</p>
<ol>
<li><p><strong>匿名函数lambda</strong></p>
<p>关键字lambda表示匿名函数，冒号前面的x表示函数参数。<br>匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。<br>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象.</p>
</li>
<li><p><strong>map有两个参数，第一个是函数对象，第二个是一个可迭代对象。map将函数依次作用于序列的每一个元素。返回一个迭代器（不能直接用print输出）。</strong></p>
</li>
<li><p><strong>reduce函数位于<code>functools</code>模块中，同样接受两个参数，一个函数对象一个可迭代序列，和map不同之处在于reduce处理完一个元素会将结果累计至下一个元素。</strong></p>
<p>from functools import reduce</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="number">10</span>*x+y</div><div class="line">L=[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line">res1=reduce(fn,L)</div></pre></td></tr></table></figure>
<p>上述代码计算了1~9的累加。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="number">10</span>*x+y</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">char_to_num</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>:<span class="number">0</span>,<span class="string">'1'</span>:<span class="number">1</span>,<span class="string">'2'</span>:<span class="number">2</span>,<span class="string">'3'</span>:<span class="number">3</span>,<span class="string">'4'</span>:<span class="number">4</span>,<span class="string">'5'</span>:<span class="number">5</span>,<span class="string">'6'</span>:<span class="number">6</span>,<span class="string">'7'</span>:<span class="number">7</span>,<span class="string">'8'</span>:<span class="number">8</span>,<span class="string">'9'</span>:<span class="number">9</span>&#125;[s]</div><div class="line">print(reduce(fn,map(char_to_num,<span class="string">'123456'</span>)))</div></pre></td></tr></table></figure>
<p>上述代码实现了字符串转化为整数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">CHAR_TO_FLOAT = &#123;</div><div class="line">    <span class="string">'0'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'1'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'2'</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">'3'</span>: <span class="number">3</span>,</div><div class="line">    <span class="string">'4'</span>: <span class="number">4</span>,</div><div class="line">    <span class="string">'5'</span>: <span class="number">5</span>,</div><div class="line">    <span class="string">'6'</span>: <span class="number">6</span>,</div><div class="line">    <span class="string">'7'</span>: <span class="number">7</span>,</div><div class="line">    <span class="string">'8'</span>: <span class="number">8</span>,</div><div class="line">    <span class="string">'9'</span>: <span class="number">9</span>,</div><div class="line">    <span class="string">'.'</span>: <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">char_to_float</span><span class="params">(s)</span>:</span></div><div class="line">    nums=map(<span class="keyword">lambda</span> ch:CHAR_TO_FLOAT[ch],s)</div><div class="line">    point=<span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_float</span><span class="params">(x,y)</span>:</span></div><div class="line">        <span class="keyword">nonlocal</span> point</div><div class="line">        <span class="keyword">if</span> y==<span class="number">-1</span>:</div><div class="line">            point=<span class="number">1</span></div><div class="line">            <span class="keyword">return</span> x</div><div class="line">        <span class="keyword">if</span> point==<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">10</span>*x+y</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            point*=<span class="number">10</span></div><div class="line">            <span class="keyword">return</span> x+y/point</div><div class="line">    <span class="keyword">return</span> reduce(to_float,nums,<span class="number">0.0</span>)</div></pre></td></tr></table></figure>
<p>字符串转化为float，reduce有第三个可选参数，作为初始的默认值，从这个默认值开始计算。如果没给且序列只有一个元素，reduce返回第一个元素。</p>
</li>
<li><p><strong><code>filter()</code>函数用于过滤序列，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。返回的也是一个迭代器。</strong></p>
<p>下面用<a href="http://baike.baidu.com/view/3784258.htm" target="_blank" rel="noopener">埃氏筛法</a>求素数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd_iter</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#生成一个奇数序列</span></div><div class="line">    n=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n+=<span class="number">2</span></div><div class="line">        <span class="keyword">yield</span> n</div><div class="line"></div><div class="line"><span class="comment">#过滤函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_divisible</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:x%n&gt;<span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    it=odd_iter()<span class="comment">#初始化为奇数序列</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n=next(it)</div><div class="line">        <span class="keyword">yield</span> n</div><div class="line">        it=filter(not_divisible(n),it)<span class="comment">#每次过滤掉n的倍数</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong><code>sorted()</code>函数可以对序列进行排序，若要定制个性化操作，可以传入关键字参数key和reverse等</strong></p>
<p>例如key=abs就是按绝对值排序，key=str.lower就是把原始序列变成小写再排序即忽略大小写</p>
</li>
<li><p><strong>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。相关参数和变量都保存在返回的函数中——闭包（Closure）的程序结构，返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p>
</li>
</ol>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在代码运行过程中不改变函数定义而动态增加函数功能的特性，称为<code>装饰器</code>（Decorator）。</p>
<p>函数对象有个<strong>name</strong>属性可以得到函数对象的名字。</p>
<p><strong>本质上，decorator就是一个返回函数的高阶函数。</strong></p>
<p>看以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">	@functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kargs)</span>:</span></div><div class="line">        print(<span class="string">'call %s'</span> % func.__name__)</div><div class="line">        <span class="keyword">return</span> func(*args,**kargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-2-18'</span>)</div></pre></td></tr></table></figure>
<p>加上<code>@log</code>之后，相当于执行了<code>now = log(now)</code>，now不再指向原来的函数，而是log函数中返回的wrapper函数。<code>wrapper()</code>函数的参数定义是<code>(*args, **kwargs)</code>，因此，wrapper()函数可以接受任意参数的调用。</p>
<p>如果装饰器本身就需要参数，那就得套三层了。也就是说第一个函数返回装饰器，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">		@functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-2-18'</span>)</div></pre></td></tr></table></figure>
<p>经过装饰之后的函数属性会变化，如<strong>name</strong>，<code>@functools.wraps(func)</code>语句用于修正。</p>
<p>在面向对象（OOP）的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。        </p>
<h2 id="slots以及运算符重载"><a href="#slots以及运算符重载" class="headerlink" title="slots以及运算符重载"></a>slots以及运算符重载</h2><p><strong>python中当创建一个类或者实例之后，均可以再给它添加方法或者属性</strong><br>给类添加方法和属性只需要用<code>类名.属性或方法名=属性或方法</code>即可，给实例添加属性也类似，只是给实例添加方法时麻烦点：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">s=student()</div><div class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"></div><div class="line">s.age=MethodType(age,s)</div><div class="line">s.age(<span class="number">25</span>)</div></pre></td></tr></table></figure>
<p>可以在定义类时利用<strong>slots</strong>属性设置可以添加的属性。比如，上述student类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__=(<span class="string">'name'</span>,<span class="string">'age'</span>)</div></pre></td></tr></table></figure>
<p>这样的话就不能添加别的属性了。</p>
<p><strong>使用<strong>slots</strong>要注意，<strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的。</strong></p>
<p><strong>除非在子类中也定义<strong>slots</strong>，这样，子类实例允许定义的属性就是自身的<strong>slots</strong>加上父类的<strong>slots</strong>。</strong></p>
<hr>
<p>看到类似<strong>slots</strong>这种形如<strong>xxx</strong>的变量或者函数名就要注意，这些在Python中是有特殊用途的。<br><strong>slots</strong>我们已经知道怎么用了，还有好多方法。</p>
<ol>
<li><p><strong>str</strong>和<strong>repr</strong></p>
<p>两者的区别是<strong>str</strong>()返回用户看到的字符串，而<strong>repr</strong>()返回程序开发者看到的字符串（print调用<strong>str</strong>，直接在交互式解释器输出调用的是<strong>repr</strong>），也就是说，<strong>repr</strong>()是为调试服务的。<br>但是通常<strong>str</strong>()和<strong>repr</strong>()代码都是一样的，所以，有个偷懒的写法：<br><code>__repr__ = __str__</code></p>
</li>
<li><p>如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个<strong>iter</strong>()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<strong>next</strong>()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。</p>
<p><strong>要达到多个迭代器的效果，<strong>iter</strong>只需返回新的对象而不是本身</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data)</span>:</span></div><div class="line">    self.data=data</div><div class="line">    self.index=<span class="number">-1</span></div><div class="line">    self.end=len(data)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    if iter(self.data) is iter(self.data):</div><div class="line">        print('ha')#返回的并不是对象本身，所以可以使用多个迭代器</div><div class="line">    return iter(self.data)#iter针对容器会返回迭代器，针对迭代器会返回它本身</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> self.data <span class="comment">#一次性的迭代器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">    self.index += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> self.index==self.end:</div><div class="line">        <span class="keyword">raise</span> StopIteration</div><div class="line">    <span class="keyword">return</span> self.data[self.index]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__back__</span><span class="params">(self)</span>:</span></div><div class="line">    self.index-=<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> self.index==<span class="number">-1</span>:</div><div class="line">        <span class="keyword">raise</span> StopIteration</div><div class="line">    <span class="keyword">return</span> self.data[self.index]</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">container</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data)</span>:</span></div><div class="line">        self.data=data</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> Iterator(data)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>getitem</strong>用于索引、分片，<strong>setitem</strong>索引赋值，<strong>delitem</strong>索引和分片删除</p>
</li>
<li><p><code>__getattr__</code></p>
<p>当调用不存在的属性时，Python解释器会试图调用<strong>getattr</strong>(self, ‘score’)来尝试获得属性score</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.name = <span class="string">'Michael'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">    <span class="keyword">if</span> attr==<span class="string">'score'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">99</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>__call__</code></p>
<p>__call__()还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p>
<p>通过callable()函数，我们就可以判断一个对象是否是“可调用”对象。</p>
</li>
</ol>
<h2 id="继承、-property和super"><a href="#继承、-property和super" class="headerlink" title="继承、@property和super"></a>继承、@property和super</h2><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的@property装饰器就是负责把一个方法变成属性调用的.</p>
<p>###@property</p>
<p>把一个getter方法变成属性，只需要加上<code>@property</code>就可以了。如果还要求属性可写，就再设置setter方法。如下所示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,_score)</span>:</span></div><div class="line">        self.score=_score</div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._score</div><div class="line"></div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        self._score = value</div><div class="line"><span class="meta">    @score.deleter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"can't delete attribute"</span>)</div></pre></td></tr></table></figure>
<p>其实，完全可以定义两个函数，set和get来处理，这样操作时调用相应方法即可。装饰器的重要特性就是它看起来像一个普通的属性，但是根据访问它的不同方式会触发不同方法，这<strong>使得实例的接口变得非常单一。</strong></p>
<p>这里可以看到，三个相互关联的方法有着<strong>相同的名称<code>score</code></strong>，这个表示的就是<code>属性</code>（构造函数里的属性赋值也会触发检查），其它两个方法将可选的setter和deleter函数附加到了score属性上。</p>
<p>###一个oop的例子</p>
<p>python的继承、封装很好理解，和其它语言如出一辙，对于多态而言，由于python是动态类型的语言，看如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span></div><div class="line">        self.x=x</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'In base'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></div><div class="line">        super().__init__(x)</div><div class="line">        self.y=y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'start sub'</span>)</div><div class="line">        Base.method(self)</div><div class="line">        print(<span class="string">'end sub'</span>)</div><div class="line"></div><div class="line"></div><div class="line">x=Base(<span class="number">5</span>)</div><div class="line">y=Sub(<span class="number">5</span>,<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(obj)</span>:</span></div><div class="line">    obj.method()</div><div class="line"></div><div class="line">test(x)</div><div class="line">test(y)</div><div class="line">print(x.x)</div><div class="line">print(y.x,y.y)</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In base</div><div class="line">start sub</div><div class="line">In base</div><div class="line">end sub</div><div class="line">5</div><div class="line">5 10</div></pre></td></tr></table></figure>
<p>对于静态语言（例如Java）来说，如果需要传入Base类型，则传入的对象必须是Base类型或者它的子类，否则，将无法调用method()方法。</p>
<p>对于Python这样的动态语言来说，则不一定需要传入Base类型。我们只需要保证传入的对象有一个method()方法就可以了，这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。<strong>python变量可以引用一切对象，所以多态性更灵活！</strong></p>
<p><em>注意，这里推荐使用<code>super()</code>函数调用父类方法而不是直接用父类名（虽然在这个地方效果一样），但是多继承时会有点问题。</em></p>
<p>###super()函数</p>
<p>看以下多继承的例子（python支持多重继承，java只有单继承，c++也是可以多重继承）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class Root(object):</div><div class="line">    def __init__(self):</div><div class="line">        print('this is root!')</div><div class="line"></div><div class="line">class A(Root):</div><div class="line">    def __init__(self):</div><div class="line">        print('enter A')</div><div class="line">        super().__init__()</div><div class="line">        print('exit A')</div><div class="line"></div><div class="line">class B(Root):</div><div class="line">    def __init__(self):</div><div class="line">        print('enter B')</div><div class="line">        super().__init__()</div><div class="line">        print('exit B')</div><div class="line"></div><div class="line">class C(A,B):</div><div class="line">    def __init__(self):</div><div class="line">        print('enter C')</div><div class="line">        super().__init__()</div><div class="line">        print('exit C')</div><div class="line"></div><div class="line">c=C()</div><div class="line"></div><div class="line">print(c.__class__.mro())</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">上述代码的输出如下：</div><div class="line">enter C</div><div class="line">enter A</div><div class="line">enter B</div><div class="line">this is root!</div><div class="line">exit B</div><div class="line">exit A</div><div class="line">exit C</div><div class="line">[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Root'&gt;, &lt;class 'object'&gt;]</div></pre></td></tr></table></figure>
<p><code>super</code>使用了<code>方法解析顺序</code>（Method Resolution Order，或MRO）,会对这个元组进行依次搜索，这个元组用于确定一个方法是在当前类还是父类即扫描顺序。用类的<code>__mro__属性</code>或者<code>mro()方法</code>都可获得这个元组。至于这个元组怎么得到的可以看下面的链接，介绍c3算法：<br><a href="http://hanjianwei.com/2013/07/25/python-mro/" target="_blank" rel="noopener">了解更多mro以及c3算法</a></p>
<p>####下面分析一下上面的代码</p>
<p>由解析顺序可以看到，首先初始化C类，然后由<code>super调用</code>会调用A类的构造函数，A类又继续调用B类的构造函数，B类最后调用Root类的构造函数。总之，super干的事可以总结为下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def super(cls,inst):</div><div class="line">    mro=inst.__class__.mro()</div><div class="line">    return mro[mro.index(cls)+1]</div><div class="line">第一个参数是确定当前类的位置，第二个参数用于得到mro元组。</div></pre></td></tr></table></figure>
<p>也就是<strong>返回mro元组的下一个类</strong>。这里，super有两个参数，上述代码没添加参数，文档中说了一点：</p>
<blockquote>
<p>The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.</p>
</blockquote>
<p>大意是说零参数形式仅在类定义中工作，编译器会填充必要的细节。这里也可以加上参数。如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'this is root!'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Root)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'enter A'</span>)</div><div class="line">        super(A,self).__init__()</div><div class="line">        print(<span class="string">'exit A'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'enter B'</span>)</div><div class="line">        super(B,self).__init__()</div><div class="line">        print(<span class="string">'exit B'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'enter C'</span>)</div><div class="line">        super(C,self).__init__()</div><div class="line">        print(<span class="string">'exit C'</span>)</div></pre></td></tr></table></figure>
<p>结果完全一样的。</p>
<p>其实，super有两个典型的用例。</p>
<ul>
<li>在具有单继承的类层次结构中，super可以用于引用父类而不明确命名它们，从而使代码更易于维护。这种使用与其他编程语言中super的使用非常相似。</li>
<li>第二种用例是在动态执行环境中支持协作多重继承。此用例是Python独有的，在静态编译语言或只支持单继承的语言中找不到。这使得可以实现“菱形图”，其中多个基类实现相同的方法。 （如上示例，如果全部不用super而用类名，会发现Root类的构造函数被调用了两次）</li>
</ul>
<p>现在水平有限，容日后再更吧<del>~/(ㄒoㄒ)/</del></p>
<p>最后一点，不论是c3还是mro啦都是新式类（new-style class）的特性，如果不是那就( ^_^ )/~~拜拜。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（十四）]]></title>
      <url>https://www.prime666.com/2017/10/08/pat%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>浙大保研结束，感觉刷pat的过程还是很充实的，虽然考的还不是很好，下次一定要拿满分。下次就可以去浙大考了哈哈。。。</p>
<a id="more"></a>
<h1 id="PAT甲级1131——1135"><a href="#PAT甲级1131——1135" class="headerlink" title="PAT甲级1131——1135"></a>PAT甲级1131——1135</h1><h2 id="1131-DFS"><a href="#1131-DFS" class="headerlink" title="1131[DFS]"></a>1131[DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1131" target="_blank" rel="noopener">Subway Map</a></p>
<p>题目输入一个地铁图（就是无向图），然后对结点进行编号。之后输入站点进行查询，输出最短路线（经过的站点最少），如果经过站点一样输出换乘次数最少的。</p>
<p>思路：<strong>由于是稀疏图，故用邻接表存储，即存储每个顶点的邻接顶点。然后针对每一次查询用一次DFS搜索即可。另外，用二维数组line打表记录两个站点之间是几号线，根据这个好统计换乘次数。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/9/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[<span class="number">10000</span>][<span class="number">10000</span>];<span class="comment">//保存两个站点之间是几号线</span></div><div class="line"><span class="keyword">bool</span> visited[<span class="number">10000</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(<span class="number">10000</span>);<span class="comment">//每个结点的邻接结点</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp_path,path;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">transfer_count</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; tmp)</span></span></div><div class="line">&#123;<span class="comment">//统计一条线路的换乘次数,即简单遍历</span></div><div class="line">    <span class="keyword">int</span> count=<span class="number">-1</span>,pre=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tmp.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(line[tmp[i<span class="number">-1</span>]][tmp[i]]!=pre)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">            pre=line[tmp[i<span class="number">-1</span>]][tmp[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> point,<span class="keyword">int</span> destination,<span class="keyword">int</span> count,<span class="keyword">int</span> &amp;min_count,<span class="keyword">int</span> &amp;min_transfer)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(point==destination&amp;&amp;(count&lt;min_count||count==min_count&amp;&amp;transfer_count(tmp_path)&lt;min_transfer))</div><div class="line">    &#123;</div><div class="line">        min_count=count;</div><div class="line">        min_transfer=transfer_count(tmp_path);</div><div class="line">        path=tmp_path;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(point==destination)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:G[point])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[e])</div><div class="line">            &#123;</div><div class="line">                visited[e]=<span class="literal">true</span>;</div><div class="line">                tmp_path.push_back(e);</div><div class="line">                DFS(e,destination,count+<span class="number">1</span>,min_count,min_transfer);<span class="comment">//每次DFS一次，count加1表示又过了一个站点</span></div><div class="line">                visited[e]=<span class="literal">false</span>;</div><div class="line">                tmp_path.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,pre,cur,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;pre);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;M;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cur);</div><div class="line">            G[pre].push_back(cur);</div><div class="line">            G[cur].push_back(pre);<span class="comment">//构建图</span></div><div class="line">            line[pre][cur]=line[cur][pre]=i;<span class="comment">//线路编号</span></div><div class="line">            pre=cur;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">int</span> a,b;<span class="comment">//起点和终点的编号</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">        <span class="keyword">int</span> min_count=<span class="number">9999</span>,min_transfer=<span class="number">99</span>;<span class="comment">//最少经过几站，最少换乘次数</span></div><div class="line">        tmp_path.clear();</div><div class="line">        tmp_path.push_back(a);</div><div class="line">        visited[a]=<span class="literal">true</span>;</div><div class="line">        DFS(a,b,<span class="number">0</span>,min_count,min_transfer);</div><div class="line">        visited[a]=<span class="literal">false</span>;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min_count);</div><div class="line">        <span class="keyword">int</span> pre_line=<span class="number">0</span>,pre_stop=a;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;path.size();++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(line[path[j<span class="number">-1</span>]][path[j]]!=pre_line)</div><div class="line">            &#123;<span class="comment">//path[j-1]是转运点</span></div><div class="line">                <span class="keyword">if</span>(pre_line!=<span class="number">0</span>)<span class="comment">//输出该转运点之前的路段</span></div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"Take Line#%d from %04d to %04d.\n"</span>,pre_line,pre_stop,path[j<span class="number">-1</span>]);</div><div class="line">                pre_line=line[path[j<span class="number">-1</span>]][path[j]];</div><div class="line">                pre_stop=path[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Take Line#%d from %04d to %04d.\n"</span>, pre_line, pre_stop, b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1132-字符串分割"><a href="#1132-字符串分割" class="headerlink" title="1132[字符串分割]"></a>1132[字符串分割]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1132" target="_blank" rel="noopener">Cut Integer</a></p>
<p>思路：<strong>一目了然。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/10/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num=s.size();</div><div class="line">    <span class="keyword">int</span> a=stoi(s.substr(<span class="number">0</span>,num/<span class="number">2</span>));</div><div class="line">    <span class="keyword">int</span> b=stoi(s.substr(num/<span class="number">2</span>));</div><div class="line">    <span class="keyword">int</span> c=stoi(s);</div><div class="line">    <span class="keyword">if</span>(a*b!=<span class="number">0</span>&amp;&amp;c%(a*b)==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> in;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;in;</div><div class="line">        <span class="keyword">if</span>(check(in))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1133-链表分段排序"><a href="#1133-链表分段排序" class="headerlink" title="1133[链表分段排序]"></a>1133[链表分段排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1133" target="_blank" rel="noopener">Splitting A Linked List</a></p>
<p>思路：<strong>用点小技巧，分多次for循环即可！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/10/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> address;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> start,N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;start,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; tmp(<span class="number">100000</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; s,res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> addr,val,next;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;addr,&amp;val,&amp;next);</div><div class="line">        tmp[addr].address=addr;</div><div class="line">        tmp[addr].val=val;</div><div class="line">        tmp[addr].next=next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> begin=start;begin!=<span class="number">-1</span>;begin=tmp[begin].next)</div><div class="line">    &#123;</div><div class="line">        s.push_back(tmp[begin]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e.val&lt;<span class="number">0</span>)</div><div class="line">            res.push_back(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e.val&gt;=<span class="number">0</span>&amp;&amp;e.val&lt;=K)</div><div class="line">            res.push_back(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e.val&gt;K)</div><div class="line">            res.push_back(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i!=res.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,res[i].address,res[i].val,res[i+<span class="number">1</span>].address);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>,res[i].address,res[i].val);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1134-图论概念"><a href="#1134-图论概念" class="headerlink" title="1134[图论概念]"></a>1134[图论概念]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1134" target="_blank" rel="noopener">Vertex Cover</a></p>
<p>思路：<strong>判断是不是顶点覆盖，根据定义判断即可。用邻接表比较好！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/10/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,M,K;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> nv,id;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nv);</div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nv;j++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        tmp.insert(id);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(tmp.find(j)==tmp.end())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;e:G[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(tmp.find(e)==tmp.end())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(check(G))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1135-红黑树"><a href="#1135-红黑树" class="headerlink" title="1135[红黑树]"></a>1135[红黑树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1135" target="_blank" rel="noopener">Is It A Red-Black Tree</a></p>
<p>思路：<strong>红黑树判断，考试的时候没做出来 ，主要没理解透。其实题目中说的第三条是废话，它的意思是指空结点都是黑的，但是这个题而言没啥用的，但还是成功让我发呆了2小时没做出来。咳咳，根据先序序列建立树，然后DFS之判断“双红”和黑结点个数问题。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/10/8.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node*left,*right;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">    Node(<span class="keyword">int</span> v):val(v) &#123;left=right= <span class="literal">nullptr</span>;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node*root,<span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        root=<span class="keyword">new</span> Node(v);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(v)&lt;=<span class="built_in">abs</span>(root-&gt;val))</div><div class="line">        root-&gt;left=insert(root-&gt;left,v);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        root-&gt;right=insert(root-&gt;right,v);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> is_red_black=<span class="literal">false</span>;</div><div class="line"><span class="keyword">int</span> num=<span class="number">-1</span>;<span class="comment">//辅助记忆黑色结点个数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Node*root,<span class="keyword">int</span> count)</span></span></div><div class="line">&#123;<span class="comment">//count统计黑色结点个数</span></div><div class="line">    <span class="keyword">if</span>(!is_red_black) <span class="keyword">return</span>;<span class="comment">//为了排除下面的双红问题</span></div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(num==<span class="number">-1</span>)</div><div class="line">            num=count;<span class="comment">//表示第一次初始化</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num!=count)</div><div class="line">            is_red_black=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root-&gt;val&gt;<span class="number">0</span>)</div><div class="line">        count++;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;<span class="comment">//当前root结点是红的，孩子不能是红色的了！</span></div><div class="line">        <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;left-&gt;val&lt;<span class="number">0</span>)</div><div class="line">            is_red_black=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;right&amp;&amp;root-&gt;right-&gt;val&lt;<span class="number">0</span>)</div><div class="line">            is_red_black=<span class="literal">false</span>;</div><div class="line">        <span class="comment">//此处不可return！！！</span></div><div class="line">    &#125;</div><div class="line">    DFS(root-&gt;left,count);</div><div class="line">    DFS(root-&gt;right,count);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> N;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">        Node*root= <span class="literal">nullptr</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">            root=insert(root,v);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(root-&gt;val&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        num=<span class="number">-1</span>,is_red_black=<span class="literal">true</span>;</div><div class="line">        DFS(root,<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span>(is_red_black)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（十三）]]></title>
      <url>https://www.prime666.com/2017/08/03/pat%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>PAT甲级1121——1131，最终章。要！通！关！了！</p>
<a id="more"></a>
<h1 id="PAT甲级1121——1130"><a href="#PAT甲级1121——1130" class="headerlink" title="PAT甲级1121——1130"></a>PAT甲级1121——1130</h1><h2 id="1121-打表-set"><a href="#1121-打表-set" class="headerlink" title="1121[打表/set]"></a>1121[打表/set]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1121" target="_blank" rel="noopener">Damn Single</a></p>
<p>思路：<strong>用couple打表，记录下标i的对象，-1表明单身。come数组记录是否来了，一开始输入乱序，可能进行到某个夫妻中一个时，另一个还没输入，这时把come置位，插入了set中，后面发现对象提前来了，就把它从集合弄出来。最后输出单身狗们。。。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; couple(<span class="number">100000</span>,<span class="number">-1</span>);<span class="comment">//配对表</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; come(<span class="number">100000</span>,<span class="literal">false</span>);<span class="comment">//表示是否来了</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id1,id2;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id1,&amp;id2);</div><div class="line">        couple[id1]=id2;</div><div class="line">        couple[id2]=id1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        <span class="keyword">if</span>(couple[id]==<span class="number">-1</span>)</div><div class="line">            res.insert(id);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            come[id]=<span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(come[couple[id]])</div><div class="line">            &#123;</div><div class="line">                res.erase(couple[id]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res.insert(id);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res.size());</div><div class="line">    <span class="keyword">bool</span> first=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;e:res)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(first)</div><div class="line">        &#123;</div><div class="line">            first=<span class="literal">false</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d"</span>,e);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %05d"</span>,e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1122-哈密顿回路"><a href="#1122-哈密顿回路" class="headerlink" title="1122[哈密顿回路]"></a>1122[哈密顿回路]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1122" target="_blank" rel="noopener">Hamiltonian Cycle</a></p>
<p>思路：<strong>哈密顿图（哈密尔顿图）（英语：Hamiltonian path，或Traceable path）是一个无向图，在图论中是指含有哈密顿回路的图。闭合的哈密顿路径称作哈密顿回路（Hamiltonian cycle），含有图中所有顶点的路径且只包含一次称作哈密顿路径。所以，每次判断注意两点，首先是不是回路，其次是不是除了起点外只经过了一次！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"><span class="keyword">int</span> G[<span class="number">201</span>][<span class="number">201</span>];</div><div class="line"><span class="keyword">int</span> N,M,K;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isConnect</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;s)</span></span></div><div class="line">&#123;<span class="comment">//判断这条路是不是通的</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(G[s[i]][s[i<span class="number">-1</span>]]!=<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isHamiltonian</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(s.front()!=s.back())</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; one(N+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">        one[e]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(one[i]!=<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i==s.front()&amp;&amp;one[i]==<span class="number">2</span>)</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+<span class="number">201</span>*<span class="number">201</span>,inf);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        G[u][v]=G[v][u]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(num);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[j]);</div><div class="line">        <span class="keyword">if</span>(isHamiltonian(s)&amp;&amp;isConnect(s))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1123-完全AVL树"><a href="#1123-完全AVL树" class="headerlink" title="1123[完全AVL树]"></a>1123[完全AVL树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1123" target="_blank" rel="noopener">Is It a Complete AVL Tree</a></p>
<p>话说这道题可就厉害了，包含了1066的AVL树构建、1110完全二叉树的判定再加AVL树的层序遍历（最后一个就是甜点）。</p>
<p>思路：<strong>全是已有的思路，建立好树之后，层序遍历，依旧不管是不是空指针，直接加入队列，当弹出元素是空指针的时候看count是否等于N，等于就是完全二叉树，否则无论以后啥情况都不是完全二叉树了（first变量就是这个目的）。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node*left,*right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Right_Rotation</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    Node* pivot=root-&gt;left;</div><div class="line">    root-&gt;left=pivot-&gt;right;</div><div class="line">    pivot-&gt;right=root;</div><div class="line">    <span class="keyword">return</span> pivot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Left_Rotation</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    Node* pivot=root-&gt;right;</div><div class="line">    root-&gt;right=pivot-&gt;left;</div><div class="line">    pivot-&gt;left=root;</div><div class="line">    <span class="keyword">return</span> pivot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Left_Right_Rotation</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    root-&gt;left=Left_Rotation(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> Right_Rotation(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Right_Left_Rotation</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    root-&gt;right=Right_Rotation(root-&gt;right);</div><div class="line">    <span class="keyword">return</span> Left_Rotation(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_Height</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> max(Get_Height(root-&gt;left),Get_Height(root-&gt;right))+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">insert</span><span class="params">(Node*root, <span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        root=<span class="keyword">new</span> Node;</div><div class="line">        root-&gt;left=root-&gt;right= <span class="literal">nullptr</span>;</div><div class="line">        root-&gt;val=val;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val&lt;root-&gt;val)</div><div class="line">    &#123;</div><div class="line">        root-&gt;left=insert(root-&gt;left,val);</div><div class="line">        <span class="keyword">if</span>(Get_Height(root-&gt;left)-Get_Height(root-&gt;right)&gt;=<span class="number">2</span>)</div><div class="line">            root=val&lt;root-&gt;left-&gt;val?Right_Rotation(root):Left_Right_Rotation(root);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        root-&gt;right=insert(root-&gt;right,val);</div><div class="line">        <span class="keyword">if</span>(Get_Height(root-&gt;right)-Get_Height(root-&gt;left)&gt;=<span class="number">2</span>)</div><div class="line">            root=val&lt;root-&gt;right-&gt;val?Right_Left_Rotation(root):Left_Rotation(root);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    Node*root= <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">        root=insert(root,v);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> isComplete=<span class="literal">false</span>,first=<span class="literal">true</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node*&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(root);</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node*t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="keyword">if</span>(t!= <span class="literal">nullptr</span>)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">            <span class="built_in">queue</span>.push_back(t-&gt;left);</div><div class="line">            <span class="built_in">queue</span>.push_back(t-&gt;right);</div><div class="line">            res.push_back(t-&gt;val);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(first&amp;&amp;count==N)</div><div class="line">                isComplete=<span class="literal">true</span>;</div><div class="line">            first=<span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">        <span class="keyword">if</span>(i!=res.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(isComplete)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nYES"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nNO"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1124-打表"><a href="#1124-打表" class="headerlink" title="1124[打表]"></a>1124[打表]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1124" target="_blank" rel="noopener">Raffle for Weibo Followers</a></p>
<p>思路：<strong>用map打表，用set也可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> M,N,S;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;M,&amp;N,&amp;S);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; s(M+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s[i];</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt; dict;</div><div class="line">    <span class="keyword">if</span>(M&lt;N||M&lt;S)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Keep going..."</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=S;i&lt;=M;i+=N)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (dict[s[i]])<span class="comment">//如果这货拿到奖了就继续往下循环。</span></div><div class="line">                i++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(i&gt;M)<span class="comment">//越界及时跳出</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            dict[s[i]]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1125-贪心"><a href="#1125-贪心" class="headerlink" title="1125[贪心]"></a>1125[贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1125" target="_blank" rel="noopener">Chain the Ropes</a></p>
<p>思路：<strong>越早加入绳子的片段，被折叠的次数就越多，所以从小到大排序，每次（旧绳索+新绳索）/2是新的结果！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s[i];</div><div class="line">    sort(s.begin(),s.end());</div><div class="line">    <span class="keyword">double</span> res=s[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        res=(res+s[i])/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1126-欧拉图-欧拉回路"><a href="#1126-欧拉图-欧拉回路" class="headerlink" title="1126[欧拉图/欧拉回路]"></a>1126[欧拉图/欧拉回路]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1126" target="_blank" rel="noopener">Eulerian Path</a>题目说给一个无向图，如果连通图所有结点的度数都是偶数，那么一定存在欧拉回路（从一个结点出发，经过所有边一次，回到起点），这个图也叫欧拉图；如果恰好有两个结点的度数是奇数，则所有的欧拉通路起始于其中之一而终止于另一个，此时这个图叫半欧拉图。</p>
<p>思路：<strong>针对题意，DFS判断连通，邻接表存储图，方便统计度，此题可解！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G(<span class="number">501</span>);</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">501</span>];</div><div class="line"><span class="keyword">int</span> total=<span class="number">0</span>;<span class="comment">//统计DFS经历过得结点个数，等于N表示连通</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsConnect</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    visited[u]=<span class="literal">true</span>;</div><div class="line">    total++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:G[u])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!visited[e])</div><div class="line">            IsConnect(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> even=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,G[i].size());</div><div class="line">        <span class="keyword">if</span>(i!=N)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(G[i].size()%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            even++;</div><div class="line">    &#125;</div><div class="line">    IsConnect(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">if</span>(total==N&amp;&amp;even==N)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Eulerian"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(total==N&amp;&amp;even==N<span class="number">-2</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Semi-Eulerian"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Non-Eulerian"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1127-树的之字遍历"><a href="#1127-树的之字遍历" class="headerlink" title="1127[树的之字遍历]"></a>1127[树的之字遍历]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1127" target="_blank" rel="noopener">ZigZagging on a Tree</a></p>
<p>很综合的一道题目，集成了以前的利用中序后序建立树。</p>
<p>思路：<strong>先DFS建立树，然后，BFS遍历树，遍历的时候还是层序遍历即可，然后把结果保存起来，到时候按需要输出！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in,post,res[<span class="number">35</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,root,tree[<span class="number">35</span>][<span class="number">2</span>];<span class="comment">//存储的都是后序中的下标</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> index,depth;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> &amp;index,<span class="keyword">int</span> in_begin,<span class="keyword">int</span> in_end,<span class="keyword">int</span> post_begin,<span class="keyword">int</span> post_end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(post_begin&gt;post_end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    index=post_end;<span class="comment">//后序中的根下标</span></div><div class="line">    <span class="keyword">int</span> root;<span class="comment">//中序遍历中的根下标</span></div><div class="line">    <span class="keyword">for</span> (root=in_begin;root&lt;=in_end&amp;&amp;in[root]!=post[post_end];++root);</div><div class="line"></div><div class="line">    DFS(tree[index][<span class="number">0</span>],in_begin,root<span class="number">-1</span>,post_begin,post_begin+(root<span class="number">-1</span>-in_begin));</div><div class="line">    DFS(tree[index][<span class="number">1</span>],root+<span class="number">1</span>,in_end,post_begin+root-in_begin,post_end<span class="number">-1</span>);</div><div class="line"><span class="comment">//    DFS(tree[index][0],root+1,in_end,post_end-(in_end-root-1)-1,post_end-1);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    in.resize(N+<span class="number">1</span>);</div><div class="line">    post.resize(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)<span class="comment">//这里用下标1~N保存下标比较好，不然下面BFS里下标0不好区分是没孩子还是孩子是第一个。</span></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</div><div class="line">    DFS(root,<span class="number">1</span>,N,<span class="number">1</span>,N);</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(Node&#123;root,<span class="number">1</span>&#125;);</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        res[t.depth].push_back(post[t.index]);</div><div class="line">        <span class="keyword">if</span>(tree[t.index][<span class="number">0</span>]!=<span class="number">0</span>)<span class="comment">//用0作为孩子存在与否的判定</span></div><div class="line">            <span class="built_in">queue</span>.push_back(Node&#123;tree[t.index][<span class="number">0</span>],t.depth+<span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">if</span>(tree[t.index][<span class="number">1</span>]!=<span class="number">0</span>)</div><div class="line">            <span class="built_in">queue</span>.push_back(Node&#123;tree[t.index][<span class="number">1</span>],t.depth+<span class="number">1</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[<span class="number">1</span>][<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">35</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=res[i].rbegin();it!=res[i].rend();it++)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>,*it);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:res[i])</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1128-皇后问题的判定"><a href="#1128-皇后问题的判定" class="headerlink" title="1128[皇后问题的判定]"></a>1128[皇后问题的判定]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1128" target="_blank" rel="noopener">N Queens Puzzle</a></p>
<p>该题目不是求N皇后，而是判定输入是否是一个解！</p>
<p>思路：<strong>枚举判断即可！题目中的行号是从下到上的。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;s.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[j]==s[i]||<span class="built_in">abs</span>(s[j]-s[i])==<span class="built_in">abs</span>(j-i))</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> K;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(K+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;++j)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[j]);</div><div class="line">        <span class="keyword">if</span>(judge(s))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1129-oop-set的应用"><a href="#1129-oop-set的应用" class="headerlink" title="1129[oop/set的应用]"></a>1129[oop/set的应用]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1129" target="_blank" rel="noopener">Recommendation System</a></p>
<p>思路：<strong>这个题还是用oop思想比较简单，重载一下set的运算符！注意，这里用count数组保存某个商品出现的次数，是为了插入删除方便，find函数判断key是否相等，但是不是依据==运算符，所以重载没用，相等是由不等来定义的即既不小于又不大于。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> index,times;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">    Node(<span class="keyword">int</span> i,<span class="keyword">int</span> v):index(i),times(v) &#123;&#125;;</div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;o1,<span class="keyword">const</span> Node&amp;o2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(o1.times!=o2.times)</div><div class="line">            <span class="keyword">return</span> o1.times&gt;o2.times;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> o1.index&lt;o2.index;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">set</span>&lt;Node&gt; s;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(N+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d:"</span>,id);</div><div class="line">            <span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it=s.begin();it!=s.end()&amp;&amp;tmp&lt;K;it++,tmp++)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>,it-&gt;index);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">auto</span> it=s.find(Node(id,count[id]));</div><div class="line">        <span class="keyword">if</span>(it!=s.end())</div><div class="line">            s.erase(it);</div><div class="line">        s.insert(Node(id,++count[id]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1130-DFS-中缀表达式"><a href="#1130-DFS-中缀表达式" class="headerlink" title="1130[DFS/中缀表达式]"></a>1130[DFS/中缀表达式]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1130" target="_blank" rel="noopener">Infix Expression</a></p>
<p>思路：<strong>比较经典的套路。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> left,right;</div><div class="line">    <span class="built_in">string</span> val;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; s;</div><div class="line"><span class="keyword">int</span> Root;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></div><div class="line">&#123;<span class="comment">//通过DFS把表达式存储到根节点的val里</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span>(s[root].right!=<span class="number">-1</span>)</div><div class="line">    &#123;<span class="comment">//如果没有右孩子说明不是叶子节点，可以只有一个左孩子！</span></div><div class="line">        s[root].val=DFS(s[root].left)+s[root].val+DFS(s[root].right);</div><div class="line">        <span class="keyword">if</span>(root!=Root)</div><div class="line">        &#123;</div><div class="line">            s[root].val=<span class="string">"("</span>+s[root].val+<span class="string">")"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s[root].val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    s.resize(N+<span class="number">1</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; exist(N+<span class="number">1</span>,<span class="literal">false</span>);<span class="comment">//没出现的下标就是根节点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s[i].val&gt;&gt;s[i].left&gt;&gt;s[i].right;</div><div class="line">        <span class="keyword">if</span>(s[i].left!=<span class="number">-1</span>)</div><div class="line">            exist[s[i].left]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(s[i].right!=<span class="number">-1</span>)</div><div class="line">            exist[s[i].right]=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Root=<span class="number">1</span>;Root&lt;=N&amp;&amp;exist[Root];++Root);</div><div class="line">    DFS(Root);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;s[Root].val;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（十二）]]></title>
      <url>https://www.prime666.com/2017/08/03/pat%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级1111——1120</p>
<a id="more"></a>
<h1 id="PAT甲级1111——1120"><a href="#PAT甲级1111——1120" class="headerlink" title="PAT甲级1111——1120"></a>PAT甲级1111——1120</h1><h2 id="1111-Dijkstra-DFS"><a href="#1111-Dijkstra-DFS" class="headerlink" title="1111[Dijkstra+DFS]"></a>1111[Dijkstra+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1111" target="_blank" rel="noopener">Online Map</a></p>
<p>题意很简单，就是找出最短路径和时间最短的路径。</p>
<p>思路：<strong>利用两次Dijkstra和两次DFS即可，都是从终点DFS到起点，注意，距离的DFS可以简化，在保证路径最短的前提下，用weight这个数组保存到某个地点的时间。DFS之后对比输出即可。这是目前代码量最多的一道题！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"><span class="keyword">int</span> D[<span class="number">500</span>][<span class="number">500</span>],T[<span class="number">500</span>][<span class="number">500</span>];</div><div class="line"><span class="keyword">int</span> dist[<span class="number">500</span>],weight[<span class="number">500</span>],Time[<span class="number">500</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">500</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; time_path,tmp_path,dist_path;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; timepre[<span class="number">500</span>],dispre(<span class="number">500</span>);</div><div class="line"><span class="keyword">int</span> source,destination;</div><div class="line"><span class="keyword">int</span> min_nodes=inf;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_T</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    tmp_path.push_back(u);</div><div class="line">    <span class="keyword">if</span>(u==source)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(tmp_path.size()&lt;min_nodes)</div><div class="line">        &#123;</div><div class="line">            time_path=tmp_path;</div><div class="line">            min_nodes= tmp_path.size();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;e:timepre[u])</div><div class="line">            DFS_T(e);</div><div class="line">    &#125;</div><div class="line">    tmp_path.pop_back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_D</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    tmp_path.push_back(u);</div><div class="line">    <span class="keyword">if</span>(u==source)</div><div class="line">    &#123;</div><div class="line">        dist_path=tmp_path;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        DFS_D(dispre[u]);</div><div class="line">    &#125;</div><div class="line">    tmp_path.pop_back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    fill(D[<span class="number">0</span>],D[<span class="number">0</span>]+<span class="number">500</span>*<span class="number">500</span>,inf);</div><div class="line">    fill(T[<span class="number">0</span>],T[<span class="number">0</span>]+<span class="number">500</span>*<span class="number">500</span>,inf);</div><div class="line">    fill(dist,dist+<span class="number">500</span>, inf);</div><div class="line">    fill(weight,weight+<span class="number">500</span>,inf);</div><div class="line">    fill(Time,Time+<span class="number">500</span>,inf);</div><div class="line">    fill(visited,visited+<span class="number">500</span>, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v,one,len,t;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;u,&amp;v,&amp;one,&amp;len,&amp;t);</div><div class="line">        D[u][v]=len;</div><div class="line">        T[u][v]=t;</div><div class="line">        <span class="keyword">if</span>(one!=<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            D[v][u]=len;</div><div class="line">            T[v][u]=t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;source,&amp;destination);</div><div class="line">    dist[source]=<span class="number">0</span>;weight[source]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)<span class="comment">//一开始每个结点的前驱结点是自己</span></div><div class="line">        dispre[i]=i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_dist=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;dist[j]&lt;min_dist)</div><div class="line">            &#123;</div><div class="line">                min_dist=dist[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;v++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;D[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(D[u][v]+dist[u]&lt;dist[v])</div><div class="line">                &#123;</div><div class="line">                    dist[v]=D[u][v]+dist[u];</div><div class="line">                    weight[v]=T[u][v]+weight[u];</div><div class="line">                    dispre[v]=u;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(D[u][v]+dist[u]==dist[v]&amp;&amp;weight[u]+T[u][v]&lt;weight[v])</div><div class="line">                &#123;</div><div class="line">                    weight[v]=T[u][v]+weight[u];</div><div class="line">                    dispre[v]=u;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS_D(destination);</div><div class="line"></div><div class="line">    <span class="comment">//*******************************************</span></div><div class="line">    fill(visited,visited+<span class="number">500</span>, <span class="literal">false</span>);</div><div class="line">    Time[source]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_time=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;Time[j]&lt;min_time)</div><div class="line">            &#123;</div><div class="line">                min_time=Time[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;v++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;T[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(T[u][v]+Time[u]&lt;Time[v])</div><div class="line">                &#123;</div><div class="line">                    Time[v]=T[u][v]+Time[u];</div><div class="line">                    timepre[v].clear();</div><div class="line">                    timepre[v].push_back(u);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(T[u][v]+Time[u]==Time[v])</div><div class="line">                &#123;</div><div class="line">                    timepre[v].push_back(u);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS_T(destination);</div><div class="line">    <span class="keyword">if</span>(dist_path==time_path)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Distance = %d; "</span>,dist[destination]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d: "</span>,Time[destination]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=time_path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,time_path[i]);</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" -&gt; "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Distance = %d: "</span>,dist[destination]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=dist_path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,dist_path[i]);</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" -&gt; "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d: "</span>,Time[destination]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=time_path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,time_path[i]);</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" -&gt; "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1112-map和set的应用"><a href="#1112-map和set的应用" class="headerlink" title="1112[map和set的应用]"></a>1112[map和set的应用]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1112" target="_blank" rel="noopener">Stucked Keyboard</a></p>
<p>思路：<strong>用个map统计卡住的字符和其发现顺序index，然后Nobroken保存完好的键位。注意，只有重复次数%K==0才认为是坏的键位！之后，把map中字符按照index的顺序输出即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;K&gt;&gt;s;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; dict;</div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; Nobroken;</div><div class="line">    <span class="keyword">int</span> count,index=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i+=count)</div><div class="line">    &#123;</div><div class="line">        count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;s[j]==s[j<span class="number">-1</span>]&amp;&amp;j&lt;s.size();j++)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(count%K==<span class="number">0</span>)<span class="comment">//不是count&gt;=K！！！</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(dict.find(s[i])==dict.end()&amp;&amp;Nobroken.find(s[i])==Nobroken.end())</div><div class="line">                dict[s[i]]=index++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            Nobroken.insert(s[i]);</div><div class="line">            dict.erase(s[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; res(index+<span class="number">1</span>);</div><div class="line">    fill(res.begin(),res.end(),<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;pt:dict)</div><div class="line">    &#123;</div><div class="line">        res[pt.second]=pt.first;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;c:res)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(c!=<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i+=count)</div><div class="line">    &#123;</div><div class="line">        count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(dict.find(s[i])!=dict.end())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;s[j]==s[j<span class="number">-1</span>]&amp;&amp;j&lt;s.size();j++)</div><div class="line">            &#123;</div><div class="line">                count++;</div><div class="line">                <span class="keyword">if</span>(count%K==<span class="number">0</span>)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;s[j]==s[j<span class="number">-1</span>]&amp;&amp;j&lt;s.size();j++)</div><div class="line">            &#123;</div><div class="line">                count++;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1113-超简单排序"><a href="#1113-超简单排序" class="headerlink" title="1113[超简单排序]"></a>1113[超简单排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1113" target="_blank" rel="noopener">Integer Set Partition</a></p>
<p>思路：<strong>显然集合个数差要么是0要么是1，对原序列从小到大排序，然后下标0~N/2-1属于第一个集合，不论N是奇数还是偶数，中间那个必然归给集合2.</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N);</div><div class="line">    <span class="keyword">int</span> sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">    sort(a.begin(),a.end());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a.size()%<span class="number">2</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i&lt;N/<span class="number">2</span>)</div><div class="line">            sum1+=a[i];</div><div class="line">        sum2+=a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" %d"</span>,sum2<span class="number">-2</span>*sum1);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1114-并查集-贼复杂"><a href="#1114-并查集-贼复杂" class="headerlink" title="1114[并查集(贼复杂)]"></a>1114[并查集(贼复杂)]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1114" target="_blank" rel="noopener">Family Property</a>类似题目1107，怎么越来越难了感觉。这还咋玩啊</p>
<p>思路：<strong>依旧是并查集的思路，只不过细节太多，处理起来就比较麻烦。细心细心！！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> father[<span class="number">10000</span>];</div><div class="line"><span class="keyword">bool</span> exist[<span class="number">10000</span>];</div><div class="line"></div><div class="line"><span class="comment">/*这里不用路径压缩了，因为id大小是确定的，大的id当小的儿子*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (x!=father[x])</div><div class="line">        x=father[x];</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx=Find(x);</div><div class="line">    <span class="keyword">int</span> fy=Find(y);</div><div class="line">    <span class="keyword">if</span>(fx&gt;fy)</div><div class="line">        father[fx]=fy;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        father[fy]=fx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> mother,father;</div><div class="line">    <span class="keyword">int</span> num,area;<span class="comment">//房产数量、房产面积</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; child;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Cluster</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;<span class="comment">//最小的id</span></div><div class="line">    <span class="keyword">int</span> member,sets,area;</div><div class="line">    <span class="keyword">bool</span> valid;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Cluster&amp;o1,<span class="keyword">const</span> Cluster&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.valid!=o2.valid)<span class="comment">//先判断是否有效，不然可能分母为0</span></div><div class="line">        <span class="keyword">return</span> o1.valid&gt;o2.valid;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">double</span> a=<span class="number">1.0</span>*o1.area/o1.member,b=<span class="number">1.0</span>*o2.area/o2.member;</div><div class="line">        <span class="keyword">if</span>(a!=b)</div><div class="line">            <span class="keyword">return</span> a&gt;b;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> o1.id&lt;o2.id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; a(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)<span class="comment">//并查集初始化，千万别忘了~~~</span></div><div class="line">        father[i]=i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;a[i].id,&amp;a[i].mother,&amp;a[i].father,&amp;k);</div><div class="line">        exist[a[i].id]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(a[i].father!=<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            exist[a[i].father]=<span class="literal">true</span>;</div><div class="line">            Union(a[i].father,a[i].id);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[i].mother!=<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            exist[a[i].mother]=<span class="literal">true</span>;</div><div class="line">            Union(a[i].mother,a[i].id);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            exist[child]=<span class="literal">true</span>;</div><div class="line">            Union(a[i].id,child);</div><div class="line">            a[i].child.push_back(child);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a[i].num,&amp;a[i].area);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Cluster&gt; res(<span class="number">10000</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> f=Find(a[i].id);</div><div class="line">        res[f].id=f;</div><div class="line">        res[f].sets+=a[i].num;</div><div class="line">        res[f].area+=a[i].area;</div><div class="line">        res[f].valid=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//集群的个数</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)<span class="comment">//直接对id遍历</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(exist[i])</div><div class="line">            res[Find(i)].member++;<span class="comment">//老办法，统计并查集中元素个数</span></div><div class="line">        <span class="keyword">if</span>(res[i].valid)</div><div class="line">            count++;<span class="comment">//统计集群个数</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count);</div><div class="line">    sort(res.begin(),res.end(),cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%04d %d %.3f %.3f\n"</span>,res[i].id,res[i].member,<span class="number">1.0</span>*res[i].sets/res[i].member,<span class="number">1.0</span>*res[i].area/res[i].member);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1115-BST树的建立及DFS"><a href="#1115-BST树的建立及DFS" class="headerlink" title="1115[BST树的建立及DFS]"></a>1115[BST树的建立及DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1115" target="_blank" rel="noopener">Counting Nodes in a BST</a></p>
<p>思路：<strong>建立树的过程就是标准的递归过程，模板化了已经。这里要输出最后两层的结点数，不要用BFS了，麻烦，针对统计叶子节点个数、层的问题，上DFS吧。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node*left,*right;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">    Node(<span class="keyword">int</span> v):val(v)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>-&gt;left=<span class="keyword">this</span>-&gt;right= <span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">insert</span><span class="params">(Node*root,<span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        root=<span class="keyword">new</span> Node(v);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(v&lt;=root-&gt;val)</div><div class="line">        root-&gt;left=insert(root-&gt;left,v);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        root-&gt;right=insert(root-&gt;right,v);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> max_depth=<span class="number">-1</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; level(<span class="number">1001</span>);<span class="comment">//下标记录哪一层的结点数目</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">const</span> Node*root,<span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        max_depth=depth<span class="number">-1</span>&gt;max_depth?depth<span class="number">-1</span>:max_depth;<span class="comment">//之所以减一因为这里没有结点，所以depth+1要去掉</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    level[depth]++;</div><div class="line">    DFS(root-&gt;left,depth+<span class="number">1</span>);</div><div class="line">    DFS(root-&gt;right,depth+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    Node*root= <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,val;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</div><div class="line">        root=insert(root,val);</div><div class="line">    &#125;</div><div class="line">    DFS(root,<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d"</span>,level[max_depth],level[max_depth<span class="number">-1</span>],level[max_depth]+level[max_depth<span class="number">-1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1116-素数-hash"><a href="#1116-素数-hash" class="headerlink" title="1116[素数/hash]"></a>1116[素数/hash]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1116" target="_blank" rel="noopener">Come on! Let’s C</a></p>
<p>思路：<strong>先把素数筛出来打表，然后根据输入建立hash，查询即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; table(<span class="number">10010</span>,<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="comment">//int id;</span></div><div class="line">    <span class="keyword">int</span> ward;<span class="comment">//0-1-2</span></div><div class="line">    <span class="keyword">bool</span> valid;<span class="comment">//是否有效</span></div><div class="line">    <span class="keyword">bool</span> first;<span class="comment">//输出一次置为false</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">string</span> w[]=&#123;<span class="string">"Mystery Award"</span>,<span class="string">"Minion"</span>,<span class="string">"Chocolate"</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;<span class="number">10010</span>;i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;i*j&lt;<span class="number">10010</span>;j++)</div><div class="line">            table[i*j]= <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; dict(<span class="number">10000</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        dict[id].valid=<span class="literal">true</span>;</div><div class="line">        dict[id].first=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)</div><div class="line">            dict[id].ward=<span class="number">0</span>;</div><div class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(table[i])</div><div class="line">        &#123;<span class="comment">//排名素数</span></div><div class="line">            dict[id].ward=<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            dict[id].ward=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%04d: "</span>,id);</div><div class="line">        <span class="keyword">if</span>(dict[id].valid)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(dict[id].first)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;w[dict[id].ward]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                dict[id].first=<span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Checked\n"</span>;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Are you kidding?\n"</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1117-智力问题"><a href="#1117-智力问题" class="headerlink" title="1117[智力问题]"></a>1117[智力问题]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1117" target="_blank" rel="noopener">Eddington Number</a></p>
<p>题意就是从一个序列中找到一个最大的k，要求这个序列中大于k的数的个数为k个。</p>
<p>思路：<strong>被自己的智商蠢哭了。想着用基数排序的思路，但是好麻烦且也没过全部用例。其实，只要从大到小排序，满足s[i]&gt;i就继续循环，最后输出i即可。（不能从小到大排序然后从后面开始遍历，因为这样最后不一定满足s[i]&gt;i，输入用例就是如此！）</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</div><div class="line">    sort(s.begin()+<span class="number">1</span>,s.end(),greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.size()&amp;&amp;s[i]&gt;i;i++,count++);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1118-并查集"><a href="#1118-并查集" class="headerlink" title="1118[并查集]"></a>1118[并查集]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1118" target="_blank" rel="noopener">Birds in Forest</a></p>
<p>来啊，继续出并查集啊，上瘾了。。</p>
<p>思路：<strong>都是套路啊，没什么特别的。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; father(<span class="number">10010</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> parent=x;</div><div class="line">    <span class="keyword">while</span> (parent!=father[parent])</div><div class="line">        parent=father[parent];</div><div class="line">    <span class="keyword">while</span> (x!=father[x])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tmp=x;</div><div class="line">        father[tmp]=parent;</div><div class="line">        x=father[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx=Find(x),fy=Find(y);</div><div class="line">    <span class="keyword">if</span>(fx!=fy)</div><div class="line">        father[fx]=fy;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; exist(<span class="number">10010</span>, <span class="literal">false</span>);<span class="comment">//记录下标为i的鸟是否出现</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10010</span>;++i)<span class="comment">//并查集初始化</span></div><div class="line">        father[i]=i;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,bird,first;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;k,&amp;first);<span class="comment">//first单独记录第一个鸟，为了合并集合</span></div><div class="line">        exist[first]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;bird);</div><div class="line">            exist[bird]=<span class="literal">true</span>;</div><div class="line">            Union(first,bird);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(<span class="number">10010</span>,<span class="number">0</span>);<span class="comment">//计算以i为根的并查集中元素个数</span></div><div class="line">    <span class="keyword">int</span> num_tree=<span class="number">0</span>,num_bird=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10010</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(exist[i])</div><div class="line">        &#123;</div><div class="line">            num_bird=i;</div><div class="line">            count[Find(i)]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10010</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(count[i]&gt;<span class="number">0</span>)</div><div class="line">            num_tree++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,num_tree,num_bird);</div><div class="line">    <span class="keyword">int</span> Q;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Q;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x,y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        <span class="keyword">if</span>(Find(x)==Find(y))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1119-已知先序后序求中序"><a href="#1119-已知先序后序求中序" class="headerlink" title="1119[已知先序后序求中序]"></a>1119[已知先序后序求中序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1119" target="_blank" rel="noopener">Pre- and Post-order Traversals</a></p>
<p>是的，题目就是这么变态。</p>
<p>思路：<strong>还是以前那种套路，不过如果树出现全偏向一边，会出现歧义，即是左孩子还是右孩子的问题。所以，这时候题目说输出一个就行，那么就默认右孩子了。这里根据后序的最后一个节点的前一个结点（根的右孩子）为基准，在先序中找到它，如果它紧挨着pre_b，那么显然就是上述提到的歧义了，否则就划分左右子树即可！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,post,in;</div><div class="line"><span class="keyword">bool</span> unique=<span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_Root</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=start;i&lt;=end;++i)</div><div class="line">        <span class="keyword">if</span>(pre[i]==v)</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(<span class="keyword">int</span> pre_b,<span class="keyword">int</span> pre_e,<span class="keyword">int</span> post_b,<span class="keyword">int</span> post_e)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pre_b==pre_e)</div><div class="line">        in.push_back(pre[pre_b]);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pre[pre_b]==post[post_e])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> root=Find_Root(post[post_e<span class="number">-1</span>],pre_b+<span class="number">1</span>,pre_e);<span class="comment">//根结点在先序中的下标</span></div><div class="line">        <span class="keyword">if</span>(root-pre_b&gt;<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            inorder(pre_b+<span class="number">1</span>,root<span class="number">-1</span>,post_b,post_b+root-pre_b<span class="number">-2</span>);<span class="comment">//左子树</span></div><div class="line">            in.push_back(post[post_e]);</div><div class="line">            inorder(root,pre_e,post_e-(pre_e-root)<span class="number">-1</span>,post_e<span class="number">-1</span>);<span class="comment">//右子树</span></div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//左孩子还是右孩子不能确定</span></div><div class="line">        &#123;</div><div class="line">            unique=<span class="literal">false</span>;</div><div class="line">            in.push_back(post[post_e]);</div><div class="line">            inorder(root,pre_e,post_e-(pre_e-root)<span class="number">-1</span>,post_e<span class="number">-1</span>);<span class="comment">//默认归为右子树</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    pre.resize(N),post.resize(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pre[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</div><div class="line">    inorder(<span class="number">0</span>,N<span class="number">-1</span>,<span class="number">0</span>,N<span class="number">-1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,unique?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,in[i]);</div><div class="line">        <span class="keyword">if</span>(i!=N<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//不输出这个说我格式错误，我有一句mmp一定要讲！</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1120-set的运用-E"><a href="#1120-set的运用-E" class="headerlink" title="1120[set的运用]-E"></a>1120[set的运用]-E</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1120" target="_blank" rel="noopener">Friend Numbers</a></p>
<p>思路：<strong>直接输入字符串，统计每个数字的各位和插入set即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">    <span class="keyword">char</span> in[<span class="number">5</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,tmp;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,in);</div><div class="line">        tmp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(in);j++)</div><div class="line">        &#123;</div><div class="line">            tmp+=in[j]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        s.insert(tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s.size());</div><div class="line">    <span class="keyword">bool</span> first=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it=s.begin();it!=s.end();it++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(first)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,*it);</div><div class="line">            first=<span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,*it);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神经网络汇总]]></title>
      <url>https://www.prime666.com/2017/07/31/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>暑期实习之神经网络总结，包括反向传播、梯度下降以及卷积神经网络等。目的是识别图片中的手写数字。</p>
<a id="more"></a>
<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><p>说明：本文是学习神经网络的笔记，<a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="noopener">英文原文</a>，本文内容均由我从原书中提炼而来，并对其中每个结论进行了数学证明（过于高深的问题未解决，只限于高等数学范畴）。</p>
<p>作者：马源@prime        </p>
<p>实验代码<a href="">git</a>        </p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>我的基本环境如下：</p>
<p>Anacoda4.4 (python3.6)</p>
<p>Theano 0.9</p>
<p>Cuda 8.0（后面卷积神经网络cpu计算太慢，GPU对浮点数有优化，加速杠杠的！核弹厂比较是核弹厂。非核弹厂的卡就不行了）</p>
<p>VS2010（主要是cuda需要c++环境，安装时也只需要安装c++即可！）</p>
<p>我的安装顺序基本就是这样。硬件上是笔记本win10 i7 4710hq+GTX860M+16G RAM，跑起来还阔以（认真脸）。</p>
<ol>
<li><p>Anacoda</p>
<p>不多说了，一个python的发行版，科学计算无人不知无人不晓。内建conda的管理系统可以管理包，也可以创建环境。好用到爆炸。</p>
</li>
<li><p>Theano</p>
<p>直接pip install theano即可安装！这里贴出0.9的<a href="http://deeplearning.net/software/theano/install_windows.html" target="_blank" rel="noopener">文档</a>，内含丰富的安装教程。虽然现在标记&lt;3.6，我的3.6运行没问题！不放心的可以用conda创建一个低版本环境使用。</p>
<p>然后用<code>conda install theano pygpu</code>安装必要的包，第一个就是c++环境，不装的话运行程序会用python的实现而不是c++的加速版，python实现你懂的。第二个是和GPU相关的。</p>
</li>
<li><p>cuda8.0</p>
<p>直接英伟达官网下载即可。</p>
</li>
<li><p>vs2010</p>
<p>只需要安装c++即可。后面运行的时候可能会提示<code>&lt;inttypes.h&gt;</code>头文件找不到，这时候去参考<a href="http://blog.csdn.net/acheld/article/details/50989438" target="_blank" rel="noopener">博客</a></p>
</li>
</ol>
<p>经过以上过程之后，还要在用户根目录(就是打开命令行的显示的目录)下创建配置文件，我的配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[lib]</div><div class="line">cnmem = 0.8 #不设置会提示CNMeM is disable</div><div class="line">[blas]</div><div class="line">ldflags = </div><div class="line">[gcc]</div><div class="line">cxxflags = -ID:\Anaconda\MinGW\include  </div><div class="line">[nvcc]</div><div class="line">flags=-LD:\Anaconda\libs</div><div class="line">compiler_bindir=D:\VS2010\VC\bin</div><div class="line">[global]</div><div class="line">device=gpu</div><div class="line">floatX=float32</div></pre></td></tr></table></figure>
<p>然后还会提示<code>CuDNN not available</code>，这个其实不管也没事，但是强迫症得治。下载cudnn5.1然后将下载来的文件解压，解压出cuda文件夹，里面包含3个文件夹。将设三个文件夹替换掉系统里面的对应文件，进行覆盖替换即可。我的是自定义安装的，就是development文件夹里面。</p>
<p>由此，卷积网络大大加速，哈皮的时刻~~</p>
<hr>
<p>补充一下theano的介绍，其是一个科学计算的库，可以让python拥有与手写的c几乎相同的效率！同时，它可利用GPU进行加速，从而胜过C+CPU！theano把计算机代数系统( computer algebra system (CAS))与优化编译器相结合，因此，对于大多数数学计算操作，可以生成最优的c代码。</p>
<h2 id="神经网络概述"><a href="#神经网络概述" class="headerlink" title="神经网络概述"></a>神经网络概述</h2><h3 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h3><p>感知器（英语：Perceptron）是Frank Rosenblatt在1957年就职于Cornell航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的<strong>前馈神经网络</strong>，是一种<strong>二元线性分类器</strong>。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/00a41aa6575886baef4193d943fa609b49534272" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>感知器使用特征向量来表示的前馈神经网络，把矩阵上的输入x（实数值向量）映射到输出值 f(x)上（一个二元的值）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f11423fbb2e967f986e36804a8ae4271734917c3" alt="w](https://wikimedia.org/api/rest_v1/media/math/render/svg/88b1e0c8e1be5ebe69d18a8010676fa42d7961e6)是实数的表式权重的向量，![wcdot x](https://wikimedia.org/api/rest_v1/media/math/render/svg/69b9832ae727dd93d743ed1daf1f7940ebc16f43)是点积。![b" title="">
                </div>
                <div class="image-caption">w](https://wikimedia.org/api/rest_v1/media/math/render/svg/88b1e0c8e1be5ebe69d18a8010676fa42d7961e6)是实数的表式权重的向量，![wcdot x](https://wikimedia.org/api/rest_v1/media/math/render/svg/69b9832ae727dd93d743ed1daf1f7940ebc16f43)是点积。![b</div>
            </figure>是偏置，一个不依赖于任何输入值的常数。偏置可以认为是激励函数的偏移量，或者给神经元一个基础活跃等级。<br><br>其基本结构如下图<br><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/97/Ncell.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="S型神经元"><a href="#S型神经元" class="headerlink" title="S型神经元"></a>S型神经元</h3><p>其基本结构和上述感知器类似，只不过，输出不再是0和1，而是$\sigma (\vec w \vec x +b)$。此处的$\sigma$被称为S型函数(sigmoid function)。其表达式为：<br>$$<br>\sigma (z)=\frac {1} {1+e^{-z}}<br>$$<br>该函数图像如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/480px-Logistic-curve.svg.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其又被称作<strong>逻辑函数</strong>。</p>
<p>其实，S型神经元可以理解为一个“平滑”的感知器，其平滑意为着权重和偏置的微小改变，会从神经元输出产生一个微小的变化。</p>
<h3 id="神经网络的基本架构"><a href="#神经网络的基本架构" class="headerlink" title="神经网络的基本架构"></a>神经网络的基本架构</h3><p>网络中最左边的输入层，其中的神经元被称作<strong>输入神经元</strong>。最右边的即输出层包含<strong>输出神经元。</strong>中间层被称作隐藏层。</p>
<p>本文讨论的都是以上一层的输出作为下一层的输入，这种网络被称作<strong>前馈神经网络</strong>，即意味着网络中是没有回路的——信息总是向前传播。当然，反馈回路也是可行的，这种网络叫做<strong>递归神经网络</strong>。但是后者的学习算法目前不够强大，虽然更接近大脑的工作方式，毕竟其思想就是具有休眠前会在一段有限时间内保持激活状态的神经元，可以刺激其它神经元，随后被激活并同样保持一段有限的时间。随着时间的推移，得到一个级联的神经元激活系统。</p>
<h3 id="使用梯度下降算法进行学习"><a href="#使用梯度下降算法进行学习" class="headerlink" title="使用梯度下降算法进行学习"></a>使用梯度下降算法进行学习</h3><p>定义一个代价函数如下：<br>$$<br>\begin{eqnarray} C(w,b) \equiv \frac{1}{2n} \sum_x | y(x) - a|^2 \end{eqnarray}<br>$$<br>这里w是权重，b是偏置，n是训练输入数据的个数，$\vec a$是表示当输入为$\vec x$时输出的向量，而y(x)表示真实的结果。</p>
<p>显而易见，我们训练的目的就是<strong>最小化代价函数</strong>。</p>
<p>首先，直观的，梯度下降可以理解为下山，肯定最陡峭的路下降速度最快。在多元函数微分学中，梯度方向是函数增加最快的方向，而其反方向就是函数减小最快的方向！<br>$$<br>\nabla C=(\frac {\partial C}{\partial w},\frac {\partial C}{\partial b})^T<br>$$<br>由此，得到了更新公式如下：<br>$$<br>w_k:=w_k-\eta \frac {\partial C}{\partial w_k}<br>$$</p>
<p>$$<br>b_l:=b_l-\eta \frac{\partial C}{\partial b_l}<br>$$</p>
<p>但是，这里引出了一个问题，注意代价函数C的形式：<br>$$<br>C=\frac {1}{n} \sum _xC_x<br>$$<br>也就是说，它是遍及每个训练样本代价$C_x=\frac {|y(x)-a|^2}{2}$的平均值。所以为了求解C的梯度，需要为每个训练输入x单独计算$\nabla C_x$。然后求平均值$\nabla C=\frac {1}{n}\sum_x \nabla C_x$。这样最明显的一个问题就是如果训练输入数量过大，就会使得学习非常缓慢！</p>
<hr>
<p>由此，引入随机梯度下降算法，其思想就是<strong>通过随机选取小量训练输入样本来计算$\nabla C_x$，进而估算$\nabla C$。</strong></p>
<p>更准确的说，随机梯度下降通过<strong>随机选取</strong>小量的m个训练输入来工作。将这些训练输入标记为$X_1,X_2,X_3…X_m$，并把它们称作一个小批量数据(mini-batch)。</p>
<p>所以有以下估计：<br>$$<br>\frac {\sum<em>{j=1}^m\nabla C</em>{x_j}}{m} \approx \frac {\sum_x \nabla C_x}{n}=\nabla C<br>$$</p>
<p>由此，更新的公式改为：</p>
<p>$$<br>w_k:=w_k-\frac {\eta}{m}\sum<em>j \frac {\partial C</em>{X_j}}{\partial w_k}<br>$$</p>
<p>$$<br>b_l:=b_l-\frac {\eta}{m}\sum<em>j \frac {\partial C</em>{X_j}}{\partial b_l}<br>$$</p>
<p>这里的求和是针对每个小批量数据的所有训练样本$X_j$进行的。然后再去挑选另一个随机的小批量数据，知道用完了所有的训练输入，这称作一次迭代期(epoch)。</p>
<p>特别说明一下，$\eta$这里是学习率的意思，显然越大表示每一步越大。</p>
<h2 id="反向传播算法如何工作"><a href="#反向传播算法如何工作" class="headerlink" title="反向传播算法如何工作"></a>反向传播算法如何工作</h2><p>首先，先定义一些规则，用$w^l_{jk}$表示从$l-1$层的第k个神经元到第$l$层的第$j$个神经元的权重。</p>
<p>同理，用$b^l_j$表示在第$l$层第j个神经元的偏置，$a^l_j$表示第$l$层第j个神经元的激活值($\sigma$也被称作激活函数)。</p>
<p>所以，有以下表达式：<br>$$<br>a^l_j=\sigma (\sum<em>k w^l</em>{jk}a^{l-1}_{k}+b^l_j)<br>$$<br>其中求和是在第$l-1$层的所有k个神经元上进行的。</p>
<p>于是，为每一层定义一个矩阵$W^l$,其第j行k列的元素就是$w^l_{jk}$。为每一层定义向量$B^l$，每个元素就是$b^l_j$。激活向量$A^l$同理。</p>
<p>这样，上述表达式的向量表示如下：<br>$$<br>a^l=\sigma (w^la^{l-1}+b^l)<br>$$<br>其中，上面的都是向量或矩阵。$\sigma$的参数是一个k*1的向量，记为$z^l$，其表达式：<br>$$<br>z^l<em>j=\sum ^k</em>{j=1}w^l_{jk}a^{l-1}_k+b^l_j<br>$$<br>即第$l$层第j个神经元的激活函数的带权输入。</p>
<hr>
<p>此时，二次代价函数写作<br>$$<br>\begin{eqnarray} C(w,b) \equiv \frac{1}{2n} \sum_x | y(x) - a^L|^2 \end{eqnarray}<br>$$<br>其中，n是训练样本的总数，求和遍历了每个训练样本x；$y(x)$是对应的目标输出；L表示网络的层数；$a^L$是当输入为$\vec x$时网络输出的激活值向量。</p>
<p>显然，对于单个训练样本，有：<br>$$<br>C_x=\frac {1}{2}|y-a^L|^2<br>$$</p>
<h3 id="Hadamard乘积-odot"><a href="#Hadamard乘积-odot" class="headerlink" title="Hadamard乘积$\odot$"></a>Hadamard乘积$\odot$</h3><p>没什么好说的，就是按元素乘即可。区别于矩阵乘法O(∩_∩)O哈！</p>
<h3 id="反向传播的四个方程"><a href="#反向传播的四个方程" class="headerlink" title="反向传播的四个方程"></a>反向传播的四个方程</h3><p>首先，先上这四个方程。待会我再证明它们！</p>
<p>定义$\delta ^l_j=\frac {\partial C}{\partial z^l_j}$表示输出层的误差。</p>
<p>四个方程如下：<br>$$<br>输出层误差\\delta^l_j=\frac {\partial C}{\partial a^l_j}\sigma \prime(z^l_j) \tag{1}<br>$$</p>
<p>$$<br>使用下一层的误差来计算当前层的误差\<br>\delta^l=((w^{l+1})^T\delta^{l+1})\odot\sigma \prime(z^l) \tag{2}<br>$$</p>
<p>$$<br>代价函数关于网络中任意偏置的改变率\\frac {\partial C}{\partial b^l_j}=\delta ^l_j \tag{3}<br>$$</p>
<p>$$<br>代价函数关于任何一个权重的改变率\\frac {\partial C}{w^l_{jk}}=a^{j-1}_k\delta ^l_j \tag{4}<br>$$</p>
<p>特别说明一下，(2)式给的是向量形式，特别的，(1)的向量形式为:<br>$$<br>\delta ^l=(a^l-y)\odot\sigma \prime(z^l)<br>$$<br>这四个方程就是反向传播的核心了。</p>
<h3 id="证明上面的四个方程"><a href="#证明上面的四个方程" class="headerlink" title="证明上面的四个方程"></a>证明上面的四个方程</h3><p>原则就是一个，求导的链式法则！</p>
<ol>
<li><p>证明(1)式<br>$$<br>\begin{align<em>}<br>&amp;\because \delta^l_j=\frac {\partial C}{\partial z^l_j} \<br>&amp;又\because a^l_j=\sigma(z^l_j)\<br>&amp;\therefore \delta^l_j=\frac {\partial C}{a^l_j}\frac {\partial a^l_j}{z^l_j}=\frac {\partial C}{a^l_j}\sigma \prime(z^l_j)\<br>\end{align</em>}<br>$$</p>
</li>
<li><p>证明(2)式<br>$$<br>\begin {align<em>}<br>&amp;\because \delta ^l_j=\frac {\partial C}{\partial z^l_j}=\sum _k \frac {\partial C}{\partial k^{l+1}}\frac {z^{l+1}_k}{z^l_j}=\sum_k \frac {\partial z^{l+1}_k}{\partial z^l_j}\delta ^{l+1}_k\&amp;其中k是对下一层的神经元求和\<br>\<br>&amp;又 \because z^{l+1}_k=\sum<em>jw^{l+1}</em>{kj}a^l_j+b^{l+1}_k=\sum <em>jw^{l+1}</em>{kj}\sigma(z^l_j)+b^{l+1}_k\&amp;其中j是对l层的神经元求和\<br>\<br>&amp;\therefore \frac {\partial z^{l+1}_k}{z^l<em>j}=w^{l+1}</em>{kj}\sigma \prime(z^l_j)\&amp;求导的无关项都被消掉了\<br>\<br>&amp;\therefore \delta^l_j=\sum<em>kw^{l+1}</em>{kj}\sigma \prime(z^l_j) \&amp;此处的w是矩阵<br>\end{align</em>}<br>$$</p>
</li>
</ol>
<ol>
<li><p>证明(3)式<br>$$<br>\begin {align}\frac {\partial C}{b^l_j}&amp;=\frac {\partial C}{\partial z^l_j} \frac {z^l_j}{b^l_j}\&amp;=\delta^l_j*1\&amp;=\delta^l_j<br>\end{align}<br>$$</p>
</li>
<li><p>证明(4)式<br>$$<br>\because z^l<em>j=\sum^k</em>{j=1}w^l_{jk}a^{l-1}_k+b^l<em>j\<br>\begin{align*}<br>\therefore \frac{\partial C}{\partial w^l</em>{jk}}&amp;=\frac {\partial C}{\partial z^l_j}\frac {\partial z^l<em>j}{w^l</em>{jk}}\&amp;=\delta^l_j\frac {\partial z^l<em>j}{w^l</em>{jk}}\&amp;=a^{l-1}_k\delta^l_j<br>\end{align*}<br>$$</p>
</li>
</ol>
<h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>该算法叙述如下：</p>
<ul>
<li>输入$\vec x$:为输入层设置对应的激活值$a^1$</li>
<li>前向传播：为每个$l=2,3,4\cdots L$计算相应的$z^l=w^la^{l-1}+b^l$和$a^l=\sigma (z^l)$</li>
<li>输出层误差$\delta^L$:计算向量$\delta^L=\nabla_aC \odot\sigma\prime(z^L) $</li>
<li>反向传播误差：对每个$l=L-1,L-2\cdots2$，计算$\delta^l=((w^{l+1})^T\delta^{l+1})\odot\sigma \prime(z^l)$</li>
<li>输出：代价函数的梯度由$\frac {\partial C}{\partial w^l_{jk}}=a^{l-1}_k\delta^l_j和\frac {\partial C}{\partial b^l_j}=\delta^l_j$</li>
</ul>
<p>当给定一个大小为m的小批量数据，对其中的每个样本，计算出$\delta^{x,l}$，对每个$l=L-1,L-2,\cdots,2$，根据$w^l:=w^l-\frac {\eta}{m}\sum_x\delta^{x,l}(a^{x,l-1})^T$和$b^l:=b^l-\frac {\eta}{m}\sum_x\delta^{x,l}$更新权重和偏置。</p>
<h2 id="改进神经网络之交叉熵"><a href="#改进神经网络之交叉熵" class="headerlink" title="改进神经网络之交叉熵"></a>改进神经网络之交叉熵</h2><h3 id="交叉熵代价函数"><a href="#交叉熵代价函数" class="headerlink" title="交叉熵代价函数"></a>交叉熵代价函数</h3><p>通常人在已经知道犯错误的情况下会加速学习修正错误，但是上面的神经网络在明显出错的时候学习速率反而不高！这就引发了问题。</p>
<p>也就是说，偏导数$\frac {\partial C}{\partial w},\frac {\partial C}{\partial b}$过小。</p>
<p>由此，我们先考虑一个神经元，其结构图如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/97/Ncell.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>代价函数$C=\frac {(y-a)^2}{2}$。$z=wx+b$<br>$$<br>\therefore \frac {\partial C}{\partial w}=(a-y)\sigma \prime(z)x \qquad \frac {\partial C}{\partial b}=(a-y)\sigma \prime(z)<br>$$<br>看一下sigmod函数图像，</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/480px-Logistic-curve.svg.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>显然，当z接近0或者1的时候，导数值明显比较小。</p>
<p>所以，引入了交叉熵代价函数代替二次代价函数。<br>$$<br>C=-\frac {1}{n}\sum_x[y\ln a+(1-y)\ln (1-a)]<br>$$<br>n是训练样本总数，x是某个具体的样本。</p>
<p>粗看这个函数，显然满足基本代价函数的要求：</p>
<ol>
<li>C非负</li>
<li>当$y=0且a\approx0$时，$C\approx0$</li>
<li>当$y=1且a\approx1时，C\approx0$</li>
</ol>
<p>代入$a=\sigma(z)$到上述表达式中，根据求导的链式法则，有<br>$$<br>\frac {\partial C} {\partial {w_j}}=\frac 1 n\sum_x\frac {\sigma \prime(z)x_j}{\sigma(z)(1-\sigma(z))}(\sigma(z)-y)\<br>又\because \sigma(z)=\frac 1{1+e^{-z}},\sigma \prime(z)=\sigma(z)(1-\sigma(z))\<br>\therefore \frac {\partial C}{\partial w_j}=\frac 1n\sum_xx_j(\sigma(z)-y)\同理有\frac {\partial C}{\partial b_j}=\frac 1 n\sum_x(\sigma(z)-y)<br>$$<br>显然学习速率受误差控制，误差越小学习速率约小，否则学习越快！<br>推广到神经网络，$\vec y=y_1,y_2,\cdots,y_n$是输出神经元上的目标值，而$a^L_1,a^L_2,\cdots,a^L_n$是实际的输出。所以有：<br>$$<br>C=-\frac 1 n\sum_x\sum_j[y_j\ln a^L_j+(1-y_j)\ln (1-a^L_j)]<br>$$<br>这里的j是对输出层所有的神经元求和。</p>
<h3 id="交叉熵代价函数的推导"><a href="#交叉熵代价函数的推导" class="headerlink" title="交叉熵代价函数的推导"></a>交叉熵代价函数的推导</h3><p>考虑之前的$\frac {\partial C}{\partial w}=(a-y)\sigma \prime(z)x$，自然想，为何不能选择一个不包含$\sigma \prime(z)$的代价函数呢？</p>
<p>由此，有了以下假定：<br>$$<br>\frac {\partial C}{\partial w_j}=x_j(a-y) \<br>\frac {\partial C}{\partial b}=(a-y)<br>$$</p>
<p>那么，剩下的任务就是找到一个C满足上述表达式了。<br>$$<br>\begin{align}<br>\because \frac {\partial C}{\partial b}&amp;=\frac {\partial C}{\partial a}\frac {\partial a}{\partial b}\&amp;=\frac {\partial C}{\partial a}\sigma \prime(z)\<br>\end{align}<br>\<br>又\because \sigma \prime(z)=\sigma(z)(1-\sigma(z))\<br>\therefore \frac {\partial C}{\partial b}=\frac {\partial C}{\partial a}a(1-a)<br>$$<br>对比上述第二个表达式，显然有：<br>$$<br>\frac {(a-y)}{a(1-a)}=\frac {\partial C}{\partial a}<br>$$<br>不定积分之：<br>$$<br>C=-[y\ln a+(1-y)\ln (1-a)]+常数<br>$$<br>此时只是一个单独的样本$\vec x$对代价函数的贡献，对所有样本取平均后:<br>$$<br>C=-\frac 1n\sum_x[y\ln a+(1-y)\ln (1-a)]+常数<br>$$<br>此处的常数是上述的常数平均后的。</p>
<h3 id="交叉熵的含义"><a href="#交叉熵的含义" class="headerlink" title="交叉熵的含义"></a>交叉熵的含义</h3><p>粗略的说，交叉熵是“不确定性”的一种度量，其衡量我们学习到y的正确值平均起来的不确定性。</p>
<h2 id="改进神经网络之柔性最大值"><a href="#改进神经网络之柔性最大值" class="headerlink" title="改进神经网络之柔性最大值"></a>改进神经网络之柔性最大值</h2><p>引入如下定义：<br>$$<br>a^l_j=\frac {e^{z^l_j}}{\sum_ke^{z^l_k}}\qquad k是该层神经元的个数<br>$$<br>一个显而易见的 特点是，当某个$z_j$增大，其余的z就会减小，且$\sum_ja^l_j=1$。</p>
<p>所以，可以看做一个概率分布，即$a^l_j$解释为网络估计正确数字分类为j的概率。</p>
<p>由此，$\sigma$变了，代价函数也更改为：<br>$$<br>C=-\ln a^L_y<br>$$<br>其不会出现学习缓慢的情况，因为其两个偏导数如下：<br>$$<br>\frac {\partial C}{\partial b^L_j}=a^L_j-y_j<br>$$</p>
<p>$$<br>\frac {\partial C}{\partial w^L_{jk}}=a^{L-1}_k(a^L_j-y_j)<br>$$</p>
<p>PS：柔性最大值和对数似然函数<strong>更适合于那些需要将输出激活值解释成概率的场景</strong>。</p>
<h2 id="改进神经网络之规范化"><a href="#改进神经网络之规范化" class="headerlink" title="改进神经网络之规范化"></a>改进神经网络之规范化</h2><h3 id="过度拟合"><a href="#过度拟合" class="headerlink" title="过度拟合"></a>过度拟合</h3><p>过度拟合直白说就是网络单纯记忆训练集合，而没有对数字本质进行理解泛化到测试数据集上。检测过度拟合最明显的方法是跟踪测试数据集上的准确度随训练变化的情况。一般来说，最好的防止过度拟合的手段就是增加训练数据集规模。</p>
<h3 id="L2规范化"><a href="#L2规范化" class="headerlink" title="L2规范化"></a>L2规范化</h3><p>又名权重衰减(weight decay)，其想法是增加一个额外的项到代价函数上，这个项就叫规范化项。</p>
<p>对交叉熵函数规范化如下，对原来的二次代价函数同样可以规范化。<br>$$<br>\begin{eqnarray} C = \frac{1}{2n} \sum_x |y-a^L|^2 +<br>  \frac{\lambda}{2n} \sum_w w^2.<br>\tag{1}\end{eqnarray}<br>$$<br>其中，$\lambda$就是规范化参数，n是训练集合的大小。<br>$$<br>\begin{eqnarray}  C = C_0 + \frac{\lambda}{2n}<br>\sum_w w^2,<br>\tag{2}\end{eqnarray}<br>$$<br>规范化可以看做寻找最小化代价函数和小权重的折中，这两部分的相对重要程度就取决于$\lambda$了，其越小越倾向于最小化原始代价函数；其越大越倾向于小的权重。</p>
<h3 id="如何将梯度下降应用于L2规范化的网络"><a href="#如何将梯度下降应用于L2规范化的网络" class="headerlink" title="如何将梯度下降应用于L2规范化的网络"></a>如何将梯度下降应用于L2规范化的网络</h3><p>对上述(2)式求导得，<br>$$<br>\frac{\partial C}{\partial w}  =  \frac{\partial C_0}{\partial w} +<br>\frac{\lambda}{n} w \tag{3}<br>$$</p>
<p>$$<br>\frac{\partial C}{\partial b}  =  \frac{\partial C_0}{\partial b} \tag{4}<br>$$<br>所以偏置的学习规则不变：<br>$$<br>\begin{eqnarray}<br>b &amp; \rightarrow &amp; b -\eta \frac{\partial C_0}{\partial b}.<br>\end{eqnarray}<br>$$<br>而权重的学习规则就是加上一个项：<br>$$<br>\begin{eqnarray}<br>  w &amp; \rightarrow &amp; w-\eta \frac{\partial C_0}{\partial<br>    w}-\frac{\eta \lambda}{n} w \<br>  &amp; = &amp; \left(1-\frac{\eta \lambda}{n}\right) w -\eta \frac{\partial<br>    C_0}{\partial w}.<br>\end{eqnarray}<br>$$<br>看上式，这也是权重衰减名字由来，因为相比以前的学习规则，权重更小了。</p>
<p>同理，梯度下降的学习规则如下：<br>$$<br>\begin{eqnarray}<br>  w \rightarrow \left(1-\frac{\eta \lambda}{n}\right) w -\frac{\eta}{m}<br>  \sum_x \frac{\partial C_x}{\partial w},<br>\end{eqnarray}<br>$$</p>
<p>$$<br>\begin{eqnarray}<br>  b \rightarrow b - \frac{\eta}{m} \sum_x \frac{\partial C_x}{\partial b},<br>\end{eqnarray}<br>$$</p>
<p>PS：规范化没有限制偏置，因为网络对偏置不是很敏感。通常不对偏置进行规范化。</p>
<h3 id="其它规范化的手段"><a href="#其它规范化的手段" class="headerlink" title="其它规范化的手段"></a>其它规范化的手段</h3><h4 id="L1规范化"><a href="#L1规范化" class="headerlink" title="L1规范化"></a>L1规范化</h4><p>$$<br>\begin{eqnarray}  C = C_0 + \frac{\lambda}{n} \sum_w |w|.<br>\end{eqnarray}<br>$$</p>
<p>直观和L1规范化类似，都是惩罚大的权重，倾向于小权重。但是，下手轻重不同！<br>$$<br>\begin{eqnarray}  \frac{\partial C}{\partial<br>    w} = \frac{\partial C_0}{\partial w} + \frac{\lambda}{n} \, {\rm<br>    sgn}(w),<br>\end{eqnarray}<br>$$</p>
<p>$$<br>\begin{eqnarray}  w \rightarrow w’ =<br>  w-\frac{\eta \lambda}{n} \mbox{sgn}(w) - \eta \frac{\partial<br>    C_0}{\partial w},<br>\end{eqnarray}<br>$$</p>
<h4 id="齐权-Dropout"><a href="#齐权-Dropout" class="headerlink" title="齐权(Dropout)"></a>齐权(Dropout)</h4><p>就是每次训练时随机删除一部分隐藏神经元。当我们弃权掉不同的神经元集合时，有点像在训练不同的网络。所以这个过程就如同大量不同网络效果平均那样。</p>
<h4 id="人为扩充训练集"><a href="#人为扩充训练集" class="headerlink" title="人为扩充训练集"></a>人为扩充训练集</h4><p>通过一些算法，扩大训练集。</p>
<h2 id="改进神经网络之权重初始化"><a href="#改进神经网络之权重初始化" class="headerlink" title="改进神经网络之权重初始化"></a>改进神经网络之权重初始化</h2><p>之前的方式是根据标准正态分布来随机初始化权重，这种情况下会使得$z$的图像很宽，这样$\sigma(z)$的取值就容易达到0或1，看到之前的S函数图像可知，此时学习缓慢。</p>
<p>特别说明，<strong>之前的交叉熵函数只是针对输出层，对隐藏层神经元的饱和是没有用的！</strong></p>
<p>所以，这里使用期望为0，标准差为$\frac 1{\sqrt n}$的正态分布来初始化权重，这样$z$的图像就倾向于集中在中间。至于偏置依旧影响不大，沿用上面的初始化方式即可。</p>
<h2 id="深层神经网络很难训练"><a href="#深层神经网络很难训练" class="headerlink" title="深层神经网络很难训练"></a>深层神经网络很难训练</h2><p>当训练深层神经网络时，会发现后面的神经元的学习速度快于前一层，或者相反，呈现一种波动性。</p>
<p>考虑如下超简单的神经网络，</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://neuralnetworksanddeeplearning.com/images/tikz37.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>所以，<br>$$<br>z<em>j = w</em>{j} a_{j-1}+b_j<br>$$</p>
<p>$$<br>a_j=\sigma(z_j)<br>$$</p>
<p>由此，根据链式法则，<br>$$<br>\begin{eqnarray}<br>\frac{\partial C}{\partial b_1} = \sigma’(z_1) \, w_2 \sigma’(z_2) \,<br> w_3 \sigma’(z_3) \, w_4 \sigma’(z_4) \, \frac{\partial C}{\partial a_4}.<br>\end{eqnarray}<br>$$<br>对于S函数，其导数在0点取最大值0.25，若使用标准方法初始化网络权重，那么一般$w_j\sigma \prime(z_j)&lt;1$，所以越往后乘的项数越多，前面的导数越小。由此，就是“消失的梯度”。反之，如果权值给的很大，那么就相反了。</p>
<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>卷积神经网络(Convolutional Neural Network, CNN)是一种前馈神经网络，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。传统的神经网络都是采用全连接的方式，即输入层到隐藏层的神经元都是全部连接的，这样做将导致参数量巨大，使得网络训练耗时甚至难以训练。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://i.imgur.com/PHbta3D.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>局部感受野</strong>(local receptive fields)：如上图，左图是全连接，隐藏层每个神经元都和输入层有连接，这参数多的难以训练！右图就是局部连接，这里局部感受野就是和每个隐藏层神经元相连的那部分区域。</p>
<p><strong>共享权重和偏置</strong>：对于隐藏层的每个神经元，其权重矩阵和偏置是共享的，也就是说每个神经元的权重矩阵和偏置都是相同的。实际上，这意味着只提取了图像的一种特征。共享权重和偏置常被称作卷积核或滤波器。如果要多提取出一些特征，可以增加多个卷积核，不同的卷积核能够得到图像的不同映射下的特征，称之为<strong>Feature Map即特征映射</strong>。</p>
<p><strong>卷积层</strong>：上面介绍共享权重和偏置的时候，用了隐藏层这个词。其实准确说应该是卷积层。</p>
<p><strong>混合层</strong>：混合层通常紧接着卷积层，其要做的就是简化卷积层的信息。一种常见的是最大值混合(max-pooling)，它从卷积层的输入区域中选择一个最大的激活值输出。如下图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://neuralnetworksanddeeplearning.com/images/tikz47.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以把最大值混合理解为一种网络询问，是否有一个给定的特征在图像的某块区域中出现，然后丢掉具体的位置信息。这样进一步减少后面的层的参数。</p>
<p>另一种常用的技术是<strong>L2混合(L2 pooling)</strong>。这里取区域中激活值的平方和的平方根。其是一种凝聚从卷积层输出信息的方式。</p>
<hr>
<p>关于卷积，可以直观解释如下：</p>
<p>先上数学公式，二维离散卷积<br>$$<br>f[x,y] * g[x,y] = \sum_{n<em>1=-\infty}^\infty \sum</em>{n_2=-\infty}^\infty f[n_1, n_2] \cdot g[x-n_1, y-n_2]<br>$$</p>
<p>$$<br>\text{这是一个 3x3 的均值滤波核，也就是卷积核：} \begin{bmatrix}     1/9 &amp; 1/9 &amp; 1/9 \     1/9 &amp; 1/9 &amp; 1/9 \     1/9 &amp; 1/9 &amp; 1/9 \ \end{bmatrix} \ \text{这是被卷积图像，这里简化为一个二维 5x5 矩阵：} \begin{bmatrix}     3 &amp; 3 &amp; 3 &amp; 3 &amp; 3 \     4 &amp; 4 &amp; 4 &amp; 4 &amp; 4 \     5 &amp; 5 &amp; 5 &amp; 5 &amp; 5 \     6 &amp; 6 &amp; 6 &amp; 6 &amp; 6 \     7 &amp; 7 &amp; 7 &amp; 7 &amp; 7 \ \end{bmatrix} \<br>$$</p>
<p>当卷积核运动到图像右下角处（卷积中心和图像对应图像第 4 行第 4 列）时，它和图像卷积的结果如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://mengqi92.github.io/2015/10/06/convolution/2d-convolution.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以看出，二维卷积在图像中的效果就是：对图像的每个像素的邻域（邻域大小就是核的大小）加权求和得到该像素点的输出值。滤波器核在这里是作为一个“权重表”来使用的。</p>
<hr>
<h3 id="针对mnist问题"><a href="#针对mnist问题" class="headerlink" title="针对mnist问题"></a>针对mnist问题</h3><p>在引入卷积神经网络之后，我们的网络架构是输入层+卷积层+混合层+全连接层+输出层。</p>
<p>对于此处的全连接层可以理解为在一种更抽象的层次上学习，从整个图像中整合信息。</p>
<p>另外，还引入了线性修正单元，即不再使用S激活函数，而是使用$f(z)=max(0,z)$。此时正确率达到了最高。</p>
<hr>
<p>以上的大背景都是mnist问题。</p>
<hr>
<h2 id="受限玻尔兹曼机（Restricted-Boltzmann-Machine，RBM）"><a href="#受限玻尔兹曼机（Restricted-Boltzmann-Machine，RBM）" class="headerlink" title="受限玻尔兹曼机（Restricted Boltzmann Machine，RBM）"></a>受限玻尔兹曼机（Restricted Boltzmann Machine，RBM）</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://deeplearning4j.org/img/multiple_inputs_RBM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上图是一个简单的RBM网络，<strong>层内无连接，层间全连接，显然RBM对应的图是一个二分图</strong>（层的内部不存在通信－这就是受限玻尔兹曼机被称为<em>受限</em>的原因），其第一个输入层又名可见层，第二个是隐藏层。</p>
<p>如果这两个层属于一个深度神经网络，那么第一隐藏层的输出会成为第二隐藏层的输入，随后再通过任意数量的隐藏层，直至到达最终的分类层。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://deeplearning4j.org/img/multiple_hidden_layers_RBM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>我们将重点关注受限玻尔兹曼机如何在无监督情况下学习重构数据（无监督指测试数据集没有作为实际基准的标签），在可见层和第一隐藏层之间进行多次正向和反向传递，而无需加大网络的深度。</p>
<p>在重构阶段，第一隐藏层的激活值成为反向传递中的输入。这些输入值与同样的权重相乘，每两个相连的节点之间各有一个权重，就像正向传递中输入x的加权运算一样。这些乘积的和再与每个可见层的偏置相加，所得结果就是重构值，亦即原始输入的近似值。这一过程可以用下图来表示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://deeplearning4j.org/img/reconstruction_RBM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由于RBM权重初始值是随机决定的，重构值与原始输入之间的差别通常很大。可以将r值与输入值之差视为<strong>重构误差</strong>，此误差值随后经由反向传播来<strong>修</strong></p>
<p><strong>RBM的权重</strong>，如此不断反复，<strong>直至误差达到最小</strong>。</p>
<p>由此可见，RBM在正向传递中使用输入值来预测节点的激活值，亦即<strong>输入为加权的x时输出a的概率</strong>：<code>p(a|x; w)</code>。</p>
<p>但在反向传递时，激活值成为输入，而输出的是对于原始数据的重构值，或者说猜测值。此时RBM则是在尝试估计激活值为a时输入为x的概率，激活</p>
<p>的加权系数与正向传递中的权重相同。 第二个阶段可以表示为<code>p(x|a; w)</code>。</p>
<p>上述两种预测值相结合，可以得到输入 <em>x</em> 和激活值 <em>a</em> 的<strong>联合概率分布</strong>，即<code>p(x, a)</code>。</p>
<hr>
<p>重构与回归、分类运算不同。回归运算根据许多输入值估测一个连续值，分类运算是猜测应当为一个特定的输入样例添加哪种具体的标签。</p>
<p>而重构则是在猜测原始输入的概率分布，亦即同时预测许多不同的点的值。这被称为<a href="http://cs229.stanford.edu/notes/cs229-notes2.pdf" target="_blank" rel="noopener">生成学习</a>，必须和分类器所进行的判别学习区分开来，后者是将输</p>
<p>值映射至标签，用直线将数据点划分为不同的组。</p>
<hr>
<p>RBM用Kullback Leibler散度来衡量预测的概率分布与输入值的基准分布之间的距离。</p>
<p>KL散度衡量两条曲线下方不重叠（即离散）的面积，而RBM的优化算法会<em>尝试将这些离散部分的面积最小化</em>，使共用权重在与第一隐藏层的激活值相乘后，可以得到与原始输入高度近似的结果。下图左半边是一组原始输入的概率分布曲线<em>p</em>，与之并列的是重构值的概率分布曲线<em>q</em>；右半边的图则显示了两条曲线之间的差异。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://deeplearning4j.org/img/KL_divergence_RBM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>RBM根据权重产生的误差反复调整权重，以此学习估计原始数据的近似值。可以说权重会慢慢开始反映出输入的结构，而这种结构被编码为第一个隐藏层的激活值。整个学习过程看上去像是两条概率分布曲线在逐步重合。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://deeplearning4j.org/img/KLD_update_RBM.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>最后一点：你会发现RBM有两个偏置值。隐藏的偏置值帮助RBM在正向传递中生成激活值（因为偏置设定了下限，所以无论数据有多稀疏，至少有一部分节点会被激活），而可见层的偏置则帮助RBM通过反向传递学习重构数据。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>本文参考了以下博客和资料：</p>
<p><a href="http://www.jeyzhang.com/cnn-learning-notes-1.html" target="_blank" rel="noopener">卷积神经网络(CNN)学习笔记1：基础入门</a></p>
<p><a href="http://mengqi92.github.io/2015/10/06/convolution/" target="_blank" rel="noopener">我对卷积的理解</a></p>
<p><a href="https://deeplearning4j.org/cn/restrictedboltzmannmachine" target="_blank" rel="noopener">玻尔兹曼机</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/22794772" target="_blank" rel="noopener">RBM学习笔记</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（十一）]]></title>
      <url>https://www.prime666.com/2017/07/25/pat%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级1101——1110，好吧，上次是我吹牛逼了，举步维艰​:cry:​</p>
<a id="more"></a>
<h1 id="pat甲级1101——1110"><a href="#pat甲级1101——1110" class="headerlink" title="pat甲级1101——1110"></a>pat甲级1101——1110</h1><h2 id="1101-快速排序"><a href="#1101-快速排序" class="headerlink" title="1101[快速排序]"></a>1101[快速排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1101" target="_blank" rel="noopener">Quick Sort</a></p>
<p>思路：<strong>题意是要求输出主元数目，注意不能直接排序后比较，原序列和排序后序列对应元素相等就输出该元素！因为这个不一定是主元，比如1 7 3 2 9中3就不是主元，但是按这样算就不对了！所以额外加一个条件，大于前面最大的元素！（小于后面最小的元素就不必了，隐含了）。还要最后记得多加一个换行！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/28.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N),b;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">    b=a;</div><div class="line">    sort(b.begin(),b.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">int</span> left_max=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==b[i]&amp;&amp;a[i]&gt;left_max)</div><div class="line">            res.push_back(a[i]);</div><div class="line">        <span class="keyword">if</span>(a[i]&gt;left_max)</div><div class="line">            left_max=a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res.size());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">        <span class="keyword">if</span>(i!=res.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="comment">//不加这句的话会有一个测试点没法通过。。。大部分测试用例结尾不输出换行符都可以通过。</span></div><div class="line">    <span class="comment">// 只有一个出现格式错误，是由于该测试点为特例，其结果为0。没有换行符其结果只有一行～</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1102-二叉树层序和中序遍历"><a href="#1102-二叉树层序和中序遍历" class="headerlink" title="1102[二叉树层序和中序遍历]"></a>1102[二叉树层序和中序遍历]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1102" target="_blank" rel="noopener">Invert a Binary Tree</a></p>
<p>思路：<strong>直接用结构数组保存结点，输入的时候左右孩子交换即可，0~N中没出现的id就是根。然后遍历就好了。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/28.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> left,right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; tree(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(root);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(tree[t].left!=<span class="number">-1</span>)</div><div class="line">            <span class="built_in">queue</span>.push_back(tree[t].left);</div><div class="line">        <span class="keyword">if</span>(tree[t].right!=<span class="number">-1</span>)</div><div class="line">            <span class="built_in">queue</span>.push_back(tree[t].right);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,t);</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> num;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(<span class="keyword">int</span> root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    in_order(tree[root].left);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,root);</div><div class="line">    num--;</div><div class="line">    <span class="keyword">if</span>(num!=<span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    in_order(tree[root].right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    num=N;</div><div class="line">    <span class="keyword">bool</span> exist[N];</div><div class="line">    fill(exist,exist+N,<span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> L,R;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R;</div><div class="line">        <span class="keyword">if</span>(L==<span class="string">"-"</span>)</div><div class="line">            tree[i].right=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            tree[i].right=stoi(L);</div><div class="line">            exist[tree[i].right]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(R==<span class="string">"-"</span>)</div><div class="line">            tree[i].left=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            tree[i].left=stoi(R);</div><div class="line">            exist[tree[i].left]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> root;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!exist[i])</div><div class="line">        &#123;</div><div class="line">            root=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    BFS(root);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    in_order(root);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1103-因式分解-DFS"><a href="#1103-因式分解-DFS" class="headerlink" title="1103[因式分解/DFS]"></a>1103[因式分解/DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1103" target="_blank" rel="noopener">Integer Factorization</a></p>
<p>思路：<strong>题目太难，不会做。。。一开始用数组a从1记录每个整数的p次方知道大于N为止（a[0]=0，为了后面方便），然后DFS搜索，注意，这种有点类似背包问题，所以不是连续的DFS，即可能选可能不选，所以DFS程序中就有了两次调用子过程。。。值得学习</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</div><div class="line"><span class="keyword">int</span> N,K,P;</div><div class="line"><span class="keyword">int</span> max_fac_sum=<span class="number">-1</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path,tmp_path;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> tmp_k,<span class="keyword">int</span> tmp_sum,<span class="keyword">int</span> fac_sum)</span></span></div><div class="line">&#123;<span class="comment">//index是数组a的下标，tmp_k记录项的个数，tmp_sum记录因式的和，fac_sum记录底数的和</span></div><div class="line">    <span class="keyword">if</span>(tmp_k==K&amp;&amp;tmp_sum==N)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(fac_sum&gt;max_fac_sum)</div><div class="line">        &#123;</div><div class="line">            path=tmp_path;</div><div class="line">            max_fac_sum=fac_sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tmp_k&gt;K||tmp_sum&gt;N)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(index&gt;=<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        tmp_path.push_back(index);</div><div class="line">        DFS(index,tmp_k+<span class="number">1</span>,tmp_sum+a[index],fac_sum+index);</div><div class="line">        tmp_path.pop_back();</div><div class="line">        DFS(index<span class="number">-1</span>,tmp_k,tmp_sum,fac_sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;K,&amp;P);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;++i)</div><div class="line">    &#123;<span class="comment">//此处让a[0]=0，后面用不到。</span></div><div class="line">        <span class="keyword">int</span> t=<span class="built_in">pow</span>(i,P);</div><div class="line">        <span class="keyword">if</span>(t&gt;N)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            a.push_back(t);</div><div class="line">    &#125;</div><div class="line">    DFS(a.size()<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span>(path.size()==<span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Impossible"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d = "</span>,N);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d^%d"</span>,path[i],P);</div><div class="line">            <span class="keyword">if</span>(i!=path.size()<span class="number">-1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" + "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1104-数学问题"><a href="#1104-数学问题" class="headerlink" title="1104[数学问题]"></a>1104[数学问题]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1104" target="_blank" rel="noopener">Sum of Number Segments</a></p>
<p>思路：<strong>找输入规律即可，忘记float这个类型吧，以后只用double！！！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="keyword">double</span> arr[N+<span class="number">1</span>];</div><div class="line">    <span class="keyword">double</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;arr[i];</div><div class="line">        res=res+i*arr[i]*(N-i+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1105-螺旋矩阵"><a href="#1105-螺旋矩阵" class="headerlink" title="1105[螺旋矩阵]"></a>1105[螺旋矩阵]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1105" target="_blank" rel="noopener">Spiral Matrix</a></p>
<p>思路：<strong>就是模拟吧，用level表示层，从最外层到里层，每次先填充上层，然后右侧，下侧，最后左侧。其中对角包括在上下侧的填充循环中。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">int</span> m,n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="built_in">sqrt</span>(N);i&gt;=<span class="number">1</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(N%i==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            n=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    m=N/n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</div><div class="line">    sort(s.begin(),s.end(),greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));<span class="comment">//m*n矩阵</span></div><div class="line">    <span class="keyword">int</span> level=m/<span class="number">2</span>+m%<span class="number">2</span>;<span class="comment">//一共有几圈</span></div><div class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;<span class="comment">//输入序列的指针</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;level;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=n<span class="number">-1</span>-i&amp;&amp;t&lt;N;j++)</div><div class="line">            res[i][j]=s[t++];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m<span class="number">-1</span>-i<span class="number">-1</span>&amp;&amp;t&lt;N;j++)</div><div class="line">            res[j][n-i<span class="number">-1</span>]=s[t++];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=n<span class="number">-1</span>-i;j&gt;=i&amp;&amp;t&lt;N;j--)</div><div class="line">            res[m<span class="number">-1</span>-i][j]=s[t++];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=m<span class="number">-1</span>-i<span class="number">-1</span>;j&gt;=i+<span class="number">1</span>&amp;&amp;t&lt;N;j--)</div><div class="line">            res[j][i]=s[t++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i][j]);</div><div class="line">            <span class="keyword">if</span>(j!=n<span class="number">-1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1106-树的DFS"><a href="#1106-树的DFS" class="headerlink" title="1106[树的DFS]"></a>1106[树的DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1106" target="_blank" rel="noopener">Lowest Price in Supply Chain</a>同一背景题还有1090、1079。</p>
<p>思路：<strong>直接DFS走起，要么直接求最低价格，要么先求最低深度。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="keyword">double</span> P,R;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100000</span>];</div><div class="line"><span class="keyword">double</span> min_price=<span class="number">99999999</span>;</div><div class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">double</span> price)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[root].empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(price&lt;min_price)</div><div class="line">        &#123;</div><div class="line">            count=<span class="number">1</span>;</div><div class="line">            min_price=price;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(price==min_price)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:tree[root])</div><div class="line">            DFS(e,price*(<span class="number">1.0</span>+R));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>,&amp;N,&amp;P,&amp;R);</div><div class="line">    R/=<span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            tree[i].push_back(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>,P);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.4lf %d"</span>,min_price,count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="keyword">double</span> P,R;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100000</span>];</div><div class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> min_depth=<span class="number">99999</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[root].empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(depth&lt;min_depth)</div><div class="line">        &#123;</div><div class="line">            min_depth=depth;</div><div class="line">            count=<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(depth==min_depth)</div><div class="line">        &#123;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:tree[root])</div><div class="line">            DFS(e,depth+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>,&amp;N,&amp;P,&amp;R);</div><div class="line">    R/=<span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            tree[i].push_back(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.4lf %d"</span>,P*<span class="built_in">pow</span>((<span class="number">1</span>+R),min_depth),count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1107-并查集"><a href="#1107-并查集" class="headerlink" title="1107[并查集]"></a>1107[并查集]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1107" target="_blank" rel="noopener">Social Clusters</a></p>
<p>思路：<strong>直接上并查集这个数据结构，这里利用了路径压缩方法(get_father)。用tmp记录有爱好i的人的编号，用于合并子集之用。然后用res数组记录集合中元素的个数，对所有的人进行遍历，这里非常巧妙！最后输出即可。注意排序边界，原本从1开始，但是全排序之后最大的就是0下标了。另外，数组不会默认初始化，vector可以。还是多用vector吧！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; father;</div><div class="line"><span class="keyword">int</span> tmp[<span class="number">1001</span>];<span class="comment">//记录爱好i的人的编号</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_father</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> p=v;</div><div class="line">    <span class="keyword">while</span>(p!=father[p])</div><div class="line">        p=father[p];<span class="comment">//p指向v的根节点</span></div><div class="line">    <span class="keyword">while</span>(v!=father[v])<span class="comment">//对每一个不是第二层的结点，把它置于第二层。</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tmp=v;</div><div class="line">        father[tmp]=p;</div><div class="line">      	v=father[v];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">union_father</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx=get_father(x);</div><div class="line">    <span class="keyword">int</span> fy=get_father(y);</div><div class="line">    <span class="keyword">if</span>(fx!=fy)</div><div class="line">        father[fy]=fx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    father.resize(N+<span class="number">1</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(N+<span class="number">1</span>);</div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        father[i]=i;<span class="comment">//每个人先独立</span></div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,hobby;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:"</span>,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;hobby);</div><div class="line">            <span class="keyword">if</span>(tmp[hobby]==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                tmp[hobby]=i;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            union_father(i,tmp[hobby]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        res[get_father(i)]++;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(res[i]&gt;<span class="number">0</span>)</div><div class="line">            count++;</div><div class="line">    &#125;</div><div class="line">    sort(res.begin(),res.end(),greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)<span class="comment">//注意排序全排序，所以最大的在下标0</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">        <span class="keyword">if</span>(i!=count<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1108-数字判别"><a href="#1108-数字判别" class="headerlink" title="1108[数字判别]"></a>1108[数字判别]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1108" target="_blank" rel="noopener">Finding Average</a></p>
<p>思路：<strong>不要太依赖c++那些流操作，现在才发现c是那么的美。本题需要用到格式化字符串，sscanf和sprintf，然后，就过了。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/2.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="keyword">char</span> a[<span class="number">60</span>],b[<span class="number">60</span>];</div><div class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>,tmp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</div><div class="line">        <span class="built_in">sscanf</span>(a,<span class="string">"%lf"</span>,&amp;tmp);</div><div class="line">        <span class="built_in">sprintf</span>(b,<span class="string">"%.2lf"</span>,tmp);</div><div class="line">        <span class="keyword">bool</span> error= <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(a);j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[j]!=b[j])</div><div class="line">                error=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(error||tmp&gt;<span class="number">1000</span>||tmp&lt;<span class="number">-1000</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %s is not a legal number\n"</span>,a);</div><div class="line">         <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            sum+=tmp;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The average of 0 numbers is Undefined\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">1</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The average of 1 number is %.2lf\n"</span>,sum);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The average of %d numbers is %.2lf\n"</span>,count,sum/count);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1109-模拟排队"><a href="#1109-模拟排队" class="headerlink" title="1109[模拟排队]"></a>1109[模拟排队]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1109" target="_blank" rel="noopener">Group Photo</a></p>
<p>思路：<strong>模拟题，注意每一排交错站的处理。用t保存排第几个人。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/2.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="keyword">int</span> height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node &amp;o1,<span class="keyword">const</span> Node&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.height!=o2.height)</div><div class="line">        <span class="keyword">return</span> o1.height&gt;o2.height;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> o1.name&lt;o2.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;K;</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; a(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i].name&gt;&gt;a[i].height;</div><div class="line">    &#125;</div><div class="line">    sort(a.begin(),a.end(),cmp);</div><div class="line">    <span class="keyword">int</span> m;<span class="comment">//每行m个人</span></div><div class="line">    <span class="keyword">int</span> Row=K;</div><div class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(Row)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(Row==K)</div><div class="line">            m=N-N/K*(K<span class="number">-1</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            m=N/K;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; line(m);</div><div class="line">        line[m/<span class="number">2</span>]=a[t].name;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=m/<span class="number">2</span><span class="number">-1</span>,j=t+<span class="number">1</span>;j&lt;t+m;j+=<span class="number">2</span>)<span class="comment">//先排最高个的右手边</span></div><div class="line">            line[i--]=a[j].name;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=m/<span class="number">2</span>+<span class="number">1</span>,j=t+<span class="number">2</span>;j&lt;t+m;j+=<span class="number">2</span>)<span class="comment">//再排最高个的左手边</span></div><div class="line">            line[i++]=a[j].name;</div><div class="line">        t+=m;</div><div class="line">        Row--;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;line.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;line[i];</div><div class="line">            <span class="keyword">if</span>(i!=line.size()<span class="number">-1</span>)</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1110-完全二叉树"><a href="#1110-完全二叉树" class="headerlink" title="1110[完全二叉树]"></a>1110[完全二叉树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1110" target="_blank" rel="noopener">Complete Binary Tree</a></p>
<p>判断是不是完全二叉树。</p>
<p>思路：<strong>层序遍历并统计结点个数。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/8/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> left,right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> exist[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; tree(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> L_tmp[<span class="number">3</span>],R_tmp[<span class="number">3</span>];</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,L_tmp,R_tmp);</div><div class="line">        <span class="keyword">int</span> L=<span class="number">-1</span>,R=<span class="number">-1</span>;</div><div class="line">        <span class="built_in">sscanf</span>(L_tmp,<span class="string">"%d"</span>,&amp;L);</div><div class="line">        <span class="built_in">sscanf</span>(R_tmp,<span class="string">"%d"</span>,&amp;R);</div><div class="line">        tree[i].left=L;</div><div class="line">        tree[i].right=R;</div><div class="line">        <span class="keyword">if</span>(L!=<span class="number">-1</span>)</div><div class="line">            exist[L]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(R!=<span class="number">-1</span>)</div><div class="line">            exist[R]=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> root;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!exist[i])</div><div class="line">        &#123;</div><div class="line">            root=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(root);</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//统计结点个数</span></div><div class="line">    <span class="keyword">int</span> last=<span class="number">-1</span>;<span class="comment">//最后一个结点</span></div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="keyword">if</span>(t!=<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            last=t;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(count==N)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"YES %d"</span>,last);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NO %d"</span>,root);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">queue</span>.push_back(tree[t].left);</div><div class="line">        <span class="built_in">queue</span>.push_back(tree[t].right);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（十）]]></title>
      <url>https://www.prime666.com/2017/07/25/pat%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>甲级pat1091——1100，立个flag，回家之前打爆题库！！！</p>
<a id="more"></a>
<h1 id="甲级1091——1100"><a href="#甲级1091——1100" class="headerlink" title="甲级1091——1100"></a>甲级1091——1100</h1><h2 id="1091-三维BFS"><a href="#1091-三维BFS" class="headerlink" title="1091[三维BFS]"></a>1091[三维BFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1091" target="_blank" rel="noopener">Acute Stroke</a></p>
<p>思路：<strong>第一次遇到三维空间的BFS，题目思路很简单，就是对肿瘤点进行BFS，如果一轮下来肿瘤点个数大于等于T就统计它，否则忽略。用visited记录已经访问过的结点。其中，为了三维遍历方便，用了XYZ三个数组，它们的组合就是6个方向。最后要说的是，不要特意区分长宽高了，说白了都是一维数组，管它呢！直接x,y,z走起！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    Node(<span class="keyword">int</span> _x,<span class="keyword">int</span> _y,<span class="keyword">int</span> _z):x(_x),y(_y),z(_z)&#123;&#125;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> X[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Y[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> Z[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> M,N,L,T;</div><div class="line"><span class="keyword">int</span> a[<span class="number">1300</span>][<span class="number">150</span>][<span class="number">80</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">1300</span>][<span class="number">150</span>][<span class="number">80</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=M||y&lt;<span class="number">0</span>||y&gt;=N||z&lt;<span class="number">0</span>||z&gt;=L)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(visited[x][y][z]||a[x][y][z]==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="function">Node <span class="title">t</span><span class="params">(x,y,z)</span></span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    visited[x][y][z]=<span class="literal">true</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(t);</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(check(t.x+X[i],t.y+Y[i],t.z+Z[i]))</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                <span class="built_in">queue</span>.push_back(Node (t.x+X[i],t.y+Y[i],t.z+Z[i]));</div><div class="line">                visited[t.x+X[i]][t.y+Y[i]][t.z+Z[i]]=<span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(count&gt;=T)</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;M,&amp;N,&amp;L,&amp;T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;L;++k)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j][k]);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;L;++k)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(a[i][j][k]==<span class="number">1</span>&amp;&amp;!visited[i][j][k])</div><div class="line">                    res+=BFS(i,j,k);</div><div class="line">            &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1092-map"><a href="#1092-map" class="headerlink" title="1092[map]"></a>1092[map]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1092" target="_blank" rel="noopener">To Buy or Not to Buy</a></p>
<p>题意可以概括为，给出a、b串，求a中是否包含b中全部字符，且出现次数也大于等于，如果符合输出Yes并统计多于的字符个数；否则，输出No，统计缺失的字符个数。</p>
<p>思路：<strong>直接用map记录每个字符出现的次数，遍历b串时遇到一个则次数减去一个，注意优先考虑是否缺失，然后才考虑多余的。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> shop,eva;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;shop&gt;&gt;eva;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; m;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:shop)</div><div class="line">        m[e]++;</div><div class="line">    <span class="keyword">int</span> miss=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:eva)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(m[e]==<span class="number">0</span>)</div><div class="line">            miss++;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            m[e]--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(miss&gt;<span class="number">0</span>)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No "</span>&lt;&lt;miss;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> extra=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;it:m)</div><div class="line">        &#123;</div><div class="line">            extra+=it.second;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes "</span>&lt;&lt;extra;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1093-计数问题"><a href="#1093-计数问题" class="headerlink" title="1093[计数问题]"></a>1093[计数问题]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1093" target="_blank" rel="noopener">Count PAT’s</a></p>
<p>思路：<strong>哈哈，超简单的思路，设置两个变量P、A，遇到P字符就P加一，当遇到A时，A+=P，表明此时有P种方案，遇到T时，结果加上A，然后求模即可。简单的我都难以置信。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;s;</div><div class="line">    <span class="keyword">int</span> P=<span class="number">0</span>,A=<span class="number">0</span>;</div><div class="line">    <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e==<span class="string">'P'</span>)</div><div class="line">            P++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">'A'</span>)</div><div class="line">        &#123;</div><div class="line">            A+=P;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            res+=A;</div><div class="line">            res%=<span class="number">1000000007</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;res;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1094-树的BFS遍历-DFS也行"><a href="#1094-树的BFS遍历-DFS也行" class="headerlink" title="1094[树的BFS遍历/DFS也行]"></a>1094[树的BFS遍历/DFS也行]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1094" target="_blank" rel="noopener">The Largest Generation</a>本题和1004有点像，异曲同工吧。</p>
<p>思路：<strong>直接BFS，每一层统计结点个数。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> level;</div><div class="line">    Node(<span class="keyword">int</span> i,<span class="keyword">int</span> l):id(i),level(l)&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> level,population=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(Node(u,<span class="number">1</span>));</div><div class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tmp_level=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        temp=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">queue</span>[<span class="number">0</span>].level==tmp_level)</div><div class="line">        &#123;</div><div class="line">            Node node=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:tree[node.id])</div><div class="line">                <span class="built_in">queue</span>.push_back(Node(e,tmp_level+<span class="number">1</span>));</div><div class="line">            <span class="built_in">queue</span>.pop_front();</div><div class="line">            temp++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(temp&gt;population)</div><div class="line">        &#123;</div><div class="line">            population=temp;</div><div class="line">            level=tmp_level;</div><div class="line">        &#125;</div><div class="line">        tmp_level++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,id,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            tree[id].push_back(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    BFS(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,population,level);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>第二种方法，上DFS，统计每个结点所在level，用一个数组记录每个结点level数，最后遍历找最大的即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> population[<span class="number">100</span>];<span class="comment">//记录每一层结点的个数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> level)</span></span></div><div class="line">&#123;</div><div class="line">    population[level]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:tree[u])</div><div class="line">        DFS(e,level+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k,id,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            tree[id].push_back(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> max_population=<span class="number">0</span>,point;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(population[i]&gt;max_population)</div><div class="line">        &#123;</div><div class="line">            max_population=population[i];</div><div class="line">            point=i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,max_population,point);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1095-多种问题综合"><a href="#1095-多种问题综合" class="headerlink" title="1095[多种问题综合]"></a>1095[多种问题综合]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1095" target="_blank" rel="noopener">Cars on Campus</a></p>
<p>思路：<strong>挺复杂的一道题，没有啥现成的模板，只能自己慢慢推敲。一开始，先按id排序，排除不符合条件的数据，同时用map保存每个车呆的总时间，记录最长的时间。然后再次按时间重新排序，这是用一个数组count记录每个点车辆总数，查询的时候用一个index记录当前在count数组的位置，因为题目说了查询的时候升序。最后遍历map输出时间等于最长时间的id。老规矩，时间统一化成秒。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Car</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> symbol;<span class="comment">//1表示in，-1表示out</span></div><div class="line">    <span class="keyword">int</span> time;</div><div class="line">    <span class="keyword">char</span> id[<span class="number">10</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Car&amp;o1,<span class="keyword">const</span> Car&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(o1.id,o2.id)==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> o1.time&lt;o2.time;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(o1.id,o2.id)&lt;<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Car&amp;o1,<span class="keyword">const</span> Car&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.time&lt;o2.time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;Car&gt; c(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> tmp[<span class="number">4</span>];</div><div class="line">        <span class="keyword">int</span> h,m,s;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d:%d:%d %s"</span>,c[i].id,&amp;h,&amp;m,&amp;s,tmp);</div><div class="line">        c[i].time=h*<span class="number">3600</span>+m*<span class="number">60</span>+s;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(tmp,<span class="string">"in"</span>)==<span class="number">0</span>)</div><div class="line">            c[i].symbol=<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            c[i].symbol=<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    sort(c.begin(),c.end(),cmp);</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; dict;<span class="comment">//id——停车时间</span></div><div class="line">    <span class="built_in">vector</span>&lt;Car&gt; t;</div><div class="line">    <span class="keyword">int</span> longest=<span class="number">0</span>;<span class="comment">//记录最长的停车时间</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(c[i].id,c[i+<span class="number">1</span>].id)==<span class="number">0</span>&amp;&amp;c[i].symbol==<span class="number">1</span>&amp;&amp;c[i+<span class="number">1</span>].symbol==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            t.push_back(c[i]);</div><div class="line">            t.push_back(c[i+<span class="number">1</span>]);</div><div class="line">            dict[c[i].id]+=c[i+<span class="number">1</span>].time-c[i].time;</div><div class="line">            <span class="keyword">if</span>(dict[c[i].id]&gt;longest)</div><div class="line">                longest=dict[c[i].id];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(t.begin(),t.end(),cmp2);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; count(t.size());<span class="comment">//记录每个时间点的车数量</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</div><div class="line">            count[i]=t[<span class="number">0</span>].symbol;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            count[i]=count[i<span class="number">-1</span>]+t[i].symbol;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> h,m,s;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:%d:%d"</span>,&amp;h,&amp;m,&amp;s);</div><div class="line">        <span class="keyword">int</span> time=h*<span class="number">3600</span>+m*<span class="number">60</span>+s;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=index;j&lt;count.size();j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(time&lt;t[j].time)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count[j<span class="number">-1</span>]);</div><div class="line">                index=j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==count.size()<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count[j]);</div><div class="line">                index=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp;p:dict)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(p.second==longest)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>,p.first.c_str());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d"</span>,longest/<span class="number">3600</span>,longest%<span class="number">3600</span>/<span class="number">60</span>,longest%<span class="number">60</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1096-分解因子"><a href="#1096-分解因子" class="headerlink" title="1096[分解因子]"></a>1096[分解因子]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1096" target="_blank" rel="noopener">Consecutive Factors</a></p>
<p>思路：<strong>暴力搜索。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="keyword">int</span> n=<span class="built_in">sqrt</span>(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len=<span class="number">12</span>;len&gt;=<span class="number">1</span>;len--)<span class="comment">//2的31次方介于12阶乘与13的阶乘之间，故最长序列不超过12，先试长的再试短的</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start=<span class="number">2</span>;start&lt;=n;start++)<span class="comment">//2到根号N开始试</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">long</span> res=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=start;i-start&lt;len;i++)</div><div class="line">            &#123;</div><div class="line">                res*=i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(N%res==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;len&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i-start&lt;len;i++)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;i;</div><div class="line">                    <span class="keyword">if</span>(i!=len+start<span class="number">-1</span>)</div><div class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1\n"</span>&lt;&lt;N;<span class="comment">//素数</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1097-链表删除"><a href="#1097-链表删除" class="headerlink" title="1097[链表删除]"></a>1097[链表删除]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1097" target="_blank" rel="noopener">Deduplication on a Linked List</a></p>
<p>思路：<strong>老套路，先剔除不合题意的数据，然后用一个标志标记是否被remove，遍历输出即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> address;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">bool</span> is_remove;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> address,N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;address,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; tmp(<span class="number">100000</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> addr;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;addr);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tmp[addr].val,&amp;tmp[addr].next);</div><div class="line">        tmp[addr].address=addr;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> point=address;point!=<span class="number">-1</span>;point=tmp[point].next)</div><div class="line">    &#123;</div><div class="line">        s.push_back(tmp[point]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.find(<span class="built_in">abs</span>(e.val))!=<span class="built_in">set</span>.end())</div><div class="line">        &#123;</div><div class="line">            e.is_remove=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">set</span>.insert(<span class="built_in">abs</span>(e.val));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> first=<span class="literal">true</span>,valid= <span class="literal">false</span>;<span class="comment">//第一个单独处理</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!s[i].is_remove)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(first)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>,s[i].address,s[i].val);</div><div class="line">                first= <span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%05d\n%05d %d "</span>,s[i].address,s[i].address,s[i].val);</div><div class="line">            &#125;</div><div class="line">            valid=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(valid)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    first=<span class="literal">true</span>,valid= <span class="literal">false</span>;<span class="comment">//valid表示列表是否为空</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(s[i].is_remove)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(first)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>,s[i].address,s[i].val);</div><div class="line">                first= <span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%05d\n%05d %d "</span>,s[i].address,s[i].address,s[i].val);</div><div class="line">            &#125;</div><div class="line">            valid=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(valid)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1098-插入-堆排序"><a href="#1098-插入-堆排序" class="headerlink" title="1098[插入/堆排序]"></a>1098[插入/堆排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1098" target="_blank" rel="noopener">Insertion or Heap Sort</a>呼应1089</p>
<p>思路：<strong>插入排序和1089一样，竟然又忘了&lt;=，又卡了半天。次奥！堆排序直接用sink操作即可。这里堆排序每一轮的意思是交换堆顶和堆的最后一个元素，这个是排了一轮，也就是一个元素归位。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;partial,<span class="keyword">int</span> parent,<span class="keyword">int</span> length)</span></span></div><div class="line">&#123;<span class="comment">//顶点元素下沉</span></div><div class="line">    <span class="keyword">int</span> child=<span class="number">2</span>*parent;</div><div class="line">    <span class="keyword">while</span>(child&lt;=length)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(child&lt;length&amp;&amp;partial[child+<span class="number">1</span>]&gt;partial[child])</div><div class="line">            child=child+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(partial[parent]&gt;=partial[child])</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        swap(partial[child],partial[parent]);</div><div class="line">        parent=child;</div><div class="line">        child=parent*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; init(N+<span class="number">1</span>),partial(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;init[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;partial[i]);</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;N&amp;&amp;partial[i]&lt;=partial[i+<span class="number">1</span>];i++);<span class="comment">//i指向最后一个有序的元素</span></div><div class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=N&amp;&amp;partial[j]==init[j];j++);</div><div class="line">    <span class="keyword">if</span>(j==N+<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Insertion Sort\n"</span>);</div><div class="line">        sort(partial.begin()+<span class="number">1</span>,partial.begin()+<span class="number">1</span>+i+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Heap Sort\n"</span>);</div><div class="line">        <span class="keyword">for</span>(i=N;i&gt;<span class="number">1</span>&amp;&amp;partial[i]&gt;=partial[i<span class="number">-1</span>];i--);<span class="comment">//i指向堆的最后一个元素</span></div><div class="line">        swap(partial[<span class="number">1</span>],partial[i]);</div><div class="line">        sink(partial,<span class="number">1</span>,i<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,partial[i]);</div><div class="line">        <span class="keyword">if</span>(i!=N)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1099-BST的建立及层序遍历"><a href="#1099-BST的建立及层序遍历" class="headerlink" title="1099[BST的建立及层序遍历]"></a>1099[BST的建立及层序遍历]</h2><p><a href="Build A Binary Search Tree">Build A Binary Search Tree</a></p>
<p>思路：<strong>好好看示例图，不要一开始想着建好整个树！先用Node的数组，保存第i个Node的左右孩子，然后读入序列，对这棵树中序遍历，其结果应该是序列从小到大的顺序，所以依据这个填充树的值。层序遍历即可。极简的风格~</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> left,right;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;Node&gt; tree;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line"></div><div class="line"><span class="keyword">int</span> point=<span class="number">0</span>;<span class="comment">//point用于记录v当前该填充数的下标</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(<span class="keyword">int</span> root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    in_order(tree[root].left);</div><div class="line">    tree[root].val=v[point++];</div><div class="line">    in_order(tree[root].right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    tree.resize(N);</div><div class="line">    v.resize(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tree[i].left,&amp;tree[i].right);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i]);</div><div class="line">    sort(v.begin(),v.end());</div><div class="line">    in_order(<span class="number">0</span>);</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(tree[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node t=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,t.val);</div><div class="line">        <span class="keyword">if</span>(t.left!=<span class="number">-1</span>)</div><div class="line">            <span class="built_in">queue</span>.push_back(tree[t.left]);</div><div class="line">        <span class="keyword">if</span>(t.right!=<span class="number">-1</span>)</div><div class="line">            <span class="built_in">queue</span>.push_back(tree[t.right]);</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1100-字符串数字转换"><a href="#1100-字符串数字转换" class="headerlink" title="1100[字符串数字转换]"></a>1100[字符串数字转换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1100" target="_blank" rel="noopener">Mars Numbers</a></p>
<p>思路：<strong>对数字和字符串序列分开处理即可，注意，13要输出tam而不是tam tret！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">string</span> low[<span class="number">13</span>]=&#123;<span class="string">"tret"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>&#125;;</div><div class="line"><span class="built_in">string</span> high[<span class="number">13</span>]=&#123;<span class="string">""</span>, <span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">s_to_i</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">13</span>;k++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(high[k]==v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> k*<span class="number">13</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(low[k]==v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> k;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="built_in">string</span> input;</div><div class="line">    getchar();<span class="comment">//读取第一行的换行符</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        getline(<span class="built_in">cin</span>,input);</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(input[<span class="number">0</span>]))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> num=stoi(input);</div><div class="line">            <span class="keyword">int</span> L=num%<span class="number">13</span>,H=num/<span class="number">13</span>;</div><div class="line">            <span class="keyword">if</span>(H!=<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(L==<span class="number">0</span>)</div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;high[H]&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;high[H]&lt;&lt;<span class="string">" "</span>&lt;&lt;low[L]&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;low[L]&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            input+=<span class="string">' '</span>;</div><div class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>,last=<span class="number">0</span>;j&lt;input.size();j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(input[j]==<span class="string">' '</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">string</span> v=input.substr(last,j-last);</div><div class="line">                    last=j+<span class="number">1</span>;</div><div class="line">                    res+=s_to_i(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（九）]]></title>
      <url>https://www.prime666.com/2017/07/23/pat%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>PAT甲级1081——1090</p>
<a id="more"></a>
<h1 id="PAT甲级1081——1090"><a href="#PAT甲级1081——1090" class="headerlink" title="PAT甲级1081——1090"></a>PAT甲级1081——1090</h1><h2 id="1081-分数求和"><a href="#1081-分数求和" class="headerlink" title="1081[分数求和]"></a>1081[分数求和]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1081" target="_blank" rel="noopener">Rational Sum</a></p>
<p>思路：<strong>主要就是通分和约分，所以需要求GCD</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// @author prime on 2017/7/6.</div><div class="line">//</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">long long gcd(long long a,long long b)</div><div class="line">&#123;//求最大公约数，可能为负，需要绝对值</div><div class="line">    return b==0?abs(a):gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int N;</div><div class="line">    scanf("%d",&amp;N);</div><div class="line">    long long a,b,res_a=0,res_b=1,gc;</div><div class="line">    for(int i=0;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        scanf("%lld/%lld",&amp;a,&amp;b);</div><div class="line">        gc=gcd(a,b);</div><div class="line">        a/=gc;</div><div class="line">        b/=gc;</div><div class="line">        res_a=res_b*a+res_a*b;</div><div class="line">        res_b=res_b*b;</div><div class="line">        gc=gcd(res_a,res_b);</div><div class="line">        res_a/=gc;</div><div class="line">        res_b/=gc;</div><div class="line">    &#125;</div><div class="line">    long long in=res_a/res_b;</div><div class="line">    res_a-=in*res_b;</div><div class="line">    if(in==0)</div><div class="line">    &#123;</div><div class="line">        if(res_a==0)</div><div class="line">            printf("0");</div><div class="line">        else</div><div class="line">            printf("%lld/%lld",res_a,res_b);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        if(res_a==0)</div><div class="line">            printf("%lld",in);</div><div class="line">        else</div><div class="line">            printf("%lld %lld/%lld",in,res_a,res_b);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1082-字符串处理-数字"><a href="#1082-字符串处理-数字" class="headerlink" title="1082[字符串处理/数字]"></a>1082[字符串处理/数字]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1082" target="_blank" rel="noopener">Read Number in Chinese</a></p>
<p>思路：<strong>主要就是四位四位进行转换，各种flag控制输出ling和空格。注意，题目没有卡亿位直接跳过万位的情况，但是我还是添上了这一点，用cross标志。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// @author prime on <span class="number">2017</span>/<span class="number">7</span>/<span class="number">23.</span></div><div class="line">//</div><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">char c[<span class="number">5</span>][<span class="number">5</span>] = &#123;<span class="string">"Shi"</span>, <span class="string">"Bai"</span>, <span class="string">"Qian"</span>, <span class="string">"Wan"</span>, <span class="string">"Yi"</span>&#125;;</div><div class="line">char t[<span class="number">10</span>][<span class="number">5</span>] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</div><div class="line"></div><div class="line">bool flag=true;//亿位、万位是否为<span class="number">0</span>，true表示是<span class="number">0</span></div><div class="line">bool across=false;//表示是否从亿跨越了万位</div><div class="line"></div><div class="line">void process(int num)</div><div class="line">&#123;//四位一处理</div><div class="line">    bool flag1,flag2,flag3;//表示千、百、十位是否是<span class="number">0</span>，true表示是<span class="number">0</span></div><div class="line">    flag1=flag2=flag3= true;</div><div class="line">    <span class="keyword">if</span>(num/<span class="number">1000</span>)</div><div class="line">    &#123;//千位</div><div class="line">        printf(<span class="string">"%s %s"</span>,t[num/<span class="number">1000</span>],c[<span class="number">2</span>]);</div><div class="line">        flag1= false;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(num/<span class="number">100</span>%<span class="number">10</span>)</div><div class="line">    &#123;//百位</div><div class="line">        <span class="keyword">if</span>(!flag1)//前几位非<span class="number">0</span></div><div class="line">            printf(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>(!flag&amp;&amp;flag1)</div><div class="line">            printf(<span class="string">"ling "</span>);</div><div class="line">        printf(<span class="string">"%s %s"</span>,t[num/<span class="number">100</span>%<span class="number">10</span>],c[<span class="number">1</span>]);</div><div class="line">        flag2= false;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(num/<span class="number">10</span>%<span class="number">10</span>)</div><div class="line">    &#123;//十位</div><div class="line">        <span class="keyword">if</span>(!flag2||!flag1)//前几位非<span class="number">0</span></div><div class="line">            printf(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>((!flag1||!flag)&amp;&amp;flag2)</div><div class="line">            printf(<span class="string">"ling "</span>);</div><div class="line">        printf(<span class="string">"%s %s"</span>,t[num/<span class="number">10</span>%<span class="number">10</span>],c[<span class="number">0</span>]);</div><div class="line">        flag3= false;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(num%<span class="number">10</span>)</div><div class="line">    &#123;//个位</div><div class="line">        <span class="keyword">if</span>(!flag1||!flag2||!flag3)//前几位非零</div><div class="line">            printf(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">if</span>((!flag1||!flag2||!flag)&amp;&amp;flag3)</div><div class="line">            printf(<span class="string">"ling "</span>);</div><div class="line">        printf(<span class="string">"%s"</span>,t[num%<span class="number">10</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int a;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;a);</div><div class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        printf(<span class="string">"Fu "</span>);</div><div class="line">        a=-a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)</div><div class="line">        printf(<span class="string">"ling"</span>);</div><div class="line">    <span class="keyword">if</span>(a&gt;<span class="number">99999999</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a%<span class="number">100000000</span>&lt;=<span class="number">9999</span>)</div><div class="line">            across=true;</div><div class="line">        printf(<span class="string">"%s %s"</span>,t[a/<span class="number">100000000</span>],c[<span class="number">4</span>]);</div><div class="line">        a%=<span class="number">100000000</span>;</div><div class="line">        flag= false;//亿位有效</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a&gt;<span class="number">9999</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            printf(<span class="string">" "</span>);</div><div class="line">        int num=a/<span class="number">10000</span>;</div><div class="line">        process(num);</div><div class="line">        printf(<span class="string">" %s"</span>,c[<span class="number">3</span>]);</div><div class="line">        a%=<span class="number">10000</span>;</div><div class="line">        flag=false;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(across)</div><div class="line">        printf(<span class="string">" ling"</span>);</div><div class="line">    <span class="keyword">if</span>(a&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!flag)</div><div class="line">            printf(<span class="string">" "</span>);</div><div class="line">        process(a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1083-学生成绩排序"><a href="#1083-学生成绩排序" class="headerlink" title="1083[学生成绩排序]"></a>1083[学生成绩排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1083" target="_blank" rel="noopener">List Grades</a></p>
<p>思路：<strong>先排序，然后输出那个成绩段的人即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">11</span>];</div><div class="line">    <span class="keyword">char</span> id[<span class="number">11</span>];</div><div class="line">    <span class="keyword">int</span> score;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp;o1,<span class="keyword">const</span> Student&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.score&gt;o2.score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Student&gt; s(N);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %s %d"</span>,s[i].name,s[i].id,&amp;s[i].score);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">    sort(s.begin(),s.end(),cmp);</div><div class="line">    <span class="keyword">bool</span> has=<span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e.score&lt;a)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(e.score&gt;=a&amp;&amp;e.score&lt;=b)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,e.name,e.id);</div><div class="line">            has=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!has)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NONE"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1084-hash"><a href="#1084-hash" class="headerlink" title="1084[hash]"></a>1084[hash]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1084" target="_blank" rel="noopener">Broken Keyboard</a></p>
<p>思路：<strong>其实就是两个字符串，比较找出第二个字符串中缺少了哪些字符，要求按照检测顺序输出且不能重复。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> in,out;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;in&gt;&gt;out;</div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; s;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;in.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(out[j]==in[i])</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> C=(<span class="keyword">char</span>)<span class="built_in">toupper</span>(in[i]);</div><div class="line">            <span class="keyword">if</span>(s.find(C)!=s.end())</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                s.insert(C);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>,C);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1085-暴力搜索"><a href="#1085-暴力搜索" class="headerlink" title="1085[暴力搜索]"></a>1085[暴力搜索]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1085" target="_blank" rel="noopener">Perfect Sequence</a></p>
<p>思路：<strong>就是用两层循环试，注释掉的部分是最初的思路，一个用例超时了；第二个版本是每次从i+max起试，我们需要输出的仅仅是最大的个数，所以直接看后面的是不是满足比当前max大，所以i到i+max-1之间的就不用试了。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,p;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;p);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s[i]);</div><div class="line">    &#125;</div><div class="line">    sort(s.begin(),s.end());</div><div class="line">    <span class="keyword">int</span> max=<span class="number">1</span>;<span class="comment">//如果不存在，显然应该输出1</span></div><div class="line">  <span class="comment">/*以下注释部分一个用例超时*/</span></div><div class="line"><span class="comment">//    for (int i=0;i&lt;N;i++)</span></div><div class="line"><span class="comment">//        for (int j=N-1;j&gt;i;j--)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//            if(s[i]*p&gt;=s[j])</span></div><div class="line"><span class="comment">//            &#123;</span></div><div class="line"><span class="comment">//                if(j-i+1&gt;max)</span></div><div class="line"><span class="comment">//                    max=j-i+1;</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N<span class="number">-2</span>;++i)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+max;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]*p&gt;=s[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(j-i+<span class="number">1</span>&gt;max)</div><div class="line">                    max=j-i+<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,max);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1086-已知先序和中序求后序"><a href="#1086-已知先序和中序求后序" class="headerlink" title="1086[已知先序和中序求后序]"></a>1086[已知先序和中序求后序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1086" target="_blank" rel="noopener">Tree Traversals Again</a></p>
<p>思路：<strong>可以看到，push的顺序正好是先序，而pop的顺序又正好是中序，所以可以根据输入得到先序和中序遍历序列。然后，嘿嘿嘿。。。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,in,post;<span class="comment">//先序、中序序列</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(start&gt;end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> i;<span class="comment">//代表中序的根节点下标</span></div><div class="line">    <span class="keyword">for</span>(i=start;i&lt;=end;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(in[i]==pre[root])</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    postorder(root+<span class="number">1</span>,start,i<span class="number">-1</span>);</div><div class="line">    postorder(root+(i-start)+<span class="number">1</span>,i+<span class="number">1</span>,end);</div><div class="line">    post.push_back(pre[root]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(op)==<span class="number">4</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">            pre.push_back(num);</div><div class="line">            <span class="built_in">stack</span>.push_back(num);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            num=<span class="built_in">stack</span>.back();</div><div class="line">            in.push_back(num);</div><div class="line">            <span class="built_in">stack</span>.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*debug*/</span></div><div class="line"><span class="comment">//    for(auto &amp;e:pre)</span></div><div class="line"><span class="comment">//        printf("%d ",e);</span></div><div class="line"><span class="comment">//    printf("\n");</span></div><div class="line"><span class="comment">//    for(auto &amp;e:in)</span></div><div class="line"><span class="comment">//        printf("%d ",e);</span></div><div class="line">    postorder(<span class="number">0</span>,<span class="number">0</span>,N<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;post.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,post[i]);</div><div class="line">        <span class="keyword">if</span>(i!=post.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1087-Dijkstra-DFS"><a href="#1087-Dijkstra-DFS" class="headerlink" title="1087[Dijkstra+DFS]"></a>1087[Dijkstra+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1087" target="_blank" rel="noopener">All Roads Lead to Rome</a></p>
<p>思路：<strong>都是套路，不解释了。注意，和以前不同的是，这里在DFS求了最终的路径个数，而没有在Djikstra算法中求出。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> G[<span class="number">201</span>][<span class="number">201</span>];<span class="comment">//城市编号1~n</span></div><div class="line"><span class="keyword">int</span> weight[<span class="number">201</span>];</div><div class="line"><span class="keyword">int</span> dist[<span class="number">201</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">201</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[<span class="number">201</span>];</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; s_i;</div><div class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; i_s;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp_path,path;</div><div class="line"><span class="keyword">int</span> res_happiness=<span class="number">0</span>; <span class="comment">//总幸福值</span></div><div class="line"><span class="keyword">double</span> average=<span class="number">0</span>;<span class="comment">//平均幸福值，不算起点</span></div><div class="line"><span class="keyword">int</span> total_path=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//int path_count[201];</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    tmp_path.push_back(u);</div><div class="line">    <span class="keyword">if</span>(u==<span class="number">1</span>)</div><div class="line">    &#123;<span class="comment">//1代表起点</span></div><div class="line">        <span class="keyword">int</span> tmp_max_happiness=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp_path.size()<span class="number">-1</span>;i++)</div><div class="line">            tmp_max_happiness+=weight[tmp_path[i]];</div><div class="line">        <span class="keyword">if</span>(tmp_max_happiness&gt;res_happiness)</div><div class="line">        &#123;</div><div class="line">            res_happiness=tmp_max_happiness;</div><div class="line">            average=res_happiness/(tmp_path.size()<span class="number">-1</span>);</div><div class="line">            path=tmp_path;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp_max_happiness==res_happiness)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">double</span> tmp_average=tmp_max_happiness/(tmp_path.size()<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span>(tmp_average&gt;average)</div><div class="line">            &#123;</div><div class="line">                average=tmp_average;</div><div class="line">                path=tmp_path;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        total_path++;<span class="comment">//统计一共多少条最短路径</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[u].size();++i)</div><div class="line">            DFS(pre[u][i]);</div><div class="line">    &#125;</div><div class="line">    tmp_path.pop_back();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+<span class="number">201</span>*<span class="number">201</span>,inf);</div><div class="line">    fill(dist,dist+<span class="number">201</span>,inf);</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;name;</div><div class="line">    s_i[name]=<span class="number">1</span>;</div><div class="line">    i_s[<span class="number">1</span>]=name;</div><div class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//path_count[1]=1;</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;name&gt;&gt;weight[i+<span class="number">1</span>];</div><div class="line">        s_i[name]=i+<span class="number">1</span>;</div><div class="line">        i_s[i+<span class="number">1</span>]=name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> u,v;</div><div class="line">        <span class="keyword">int</span> w;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</div><div class="line">        G[s_i[u]][s_i[v]]=w;</div><div class="line">        G[s_i[v]][s_i[u]]=w;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_dist=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;dist[j]&lt;min_dist)</div><div class="line">            &#123;</div><div class="line">                min_dist=dist[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=N;++v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[u]+G[u][v]&lt;dist[v])</div><div class="line">                &#123;</div><div class="line">                    dist[v]=dist[u]+G[u][v];</div><div class="line">                    pre[v].clear();</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                    <span class="comment">//path_count[v]=path_count[u];</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist[u]+G[u][v]==dist[v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                    <span class="comment">//path_count[v]+=path_count[u];</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(s_i[<span class="string">"ROM"</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d %.0f\n"</span>,total_path,dist[s_i[<span class="string">"ROM"</span>]],res_happiness,average);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i_s[path[i]];<span class="comment">//注意，string不要用printf输出！！！！</span></div><div class="line">        <span class="keyword">if</span>(i!=<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1088-分数四则运算"><a href="#1088-分数四则运算" class="headerlink" title="1088[分数四则运算]"></a>1088[分数四则运算]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1088" target="_blank" rel="noopener">Rational Arithmetic</a></p>
<p>思路：<strong>这次很少见的用了oop，主要觉得思路清晰。这个题倒数第二个用例卡输入，如果输入不是最简形式，要先转换成最简的形式。其它的注意点题目要求就好了。</strong></p>
<p><strong>另外，重载输出运算符时，第二个参数如果不是const时，则表达式<code>cout&lt;&lt;o1+o2;</code>报错，因为<code>o1+o2</code>是个右值，不能被非const引用。</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// @author prime on 2017/7/24.</div><div class="line">//</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">long long gcd(long long a,long long b)</div><div class="line">&#123;//求最大公约数，可能为负，需要绝对值</div><div class="line">    return b==0?abs(a):gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct Frac</div><div class="line">&#123;</div><div class="line">    Frac(long long n,long long d):numerator(n),denominator(d)&#123;&#125;;</div><div class="line">    Frac()= default;</div><div class="line">    long long int numerator,denominator;</div><div class="line">    friend Frac operator+(const Frac&amp;o1,const Frac&amp;o2);</div><div class="line">    friend Frac operator-(const Frac&amp;o1,const Frac&amp;o2);</div><div class="line">    friend Frac operator*(const Frac&amp;o1,const Frac&amp;o2);</div><div class="line">    friend Frac operator/(const Frac&amp;o1,const Frac&amp;o2);</div><div class="line">    friend ostream&amp; operator&lt;&lt;(ostream&amp; out,const Frac&amp;o);</div><div class="line">    //friend ostream&amp; operator&lt;&lt;(ostream&amp; out,Frac&amp;&amp;o);</div><div class="line">    friend void simplify(Frac&amp;o);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void simplify(Frac &amp;o)</div><div class="line">&#123;</div><div class="line">    long long a=1;</div><div class="line">    if(o.numerator!=0)</div><div class="line">        a=gcd(o.numerator,o.denominator);</div><div class="line">    o.numerator/=a;</div><div class="line">    o.denominator/=a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ostream&amp; operator&lt;&lt;(ostream&amp; out,const Frac&amp;o)</div><div class="line">&#123;</div><div class="line">    long long a=o.numerator,b=o.denominator;</div><div class="line">    if(b==0)</div><div class="line">    &#123;</div><div class="line">        out&lt;&lt;"Inf";</div><div class="line">        return out;</div><div class="line">    &#125;</div><div class="line">    long long coefficient=o.numerator/o.denominator;</div><div class="line">    if(a==0)</div><div class="line">    &#123;</div><div class="line">        out&lt;&lt;"0";</div><div class="line">    &#125; else if(a&gt;0)</div><div class="line">    &#123;</div><div class="line">        a-=b*coefficient;</div><div class="line">        if(a==0)</div><div class="line">            out&lt;&lt;coefficient;</div><div class="line">        else</div><div class="line">            if(coefficient==0)</div><div class="line">                out&lt;&lt;a&lt;&lt;"/"&lt;&lt;b;</div><div class="line">            else</div><div class="line">                out&lt;&lt;coefficient&lt;&lt;" "&lt;&lt;a&lt;&lt;"/"&lt;&lt;b;</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;//分子小于0，显然系数也小于0</div><div class="line">        a-=b*coefficient;</div><div class="line">        if(a==0)</div><div class="line">            out&lt;&lt;"("&lt;&lt;coefficient&lt;&lt;")";</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            if(coefficient==0)</div><div class="line">                out&lt;&lt;"("&lt;&lt;a&lt;&lt;"/"&lt;&lt;b&lt;&lt;")";</div><div class="line">            else</div><div class="line">                out&lt;&lt;"("&lt;&lt;coefficient&lt;&lt;" "&lt;&lt;-a&lt;&lt;"/"&lt;&lt;b&lt;&lt;")";</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return out;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//ostream&amp; operator&lt;&lt;(ostream&amp; out,Frac&amp;&amp;o)</div><div class="line">//&#123;</div><div class="line">//    long long a=o.numerator,b=o.denominator;</div><div class="line">//    if(b==0)</div><div class="line">//    &#123;</div><div class="line">//        out&lt;&lt;"Inf";</div><div class="line">//        return out;</div><div class="line">//    &#125;</div><div class="line">//    long long coefficient=o.numerator/o.denominator;</div><div class="line">//    if(a==0)</div><div class="line">//    &#123;</div><div class="line">//        out&lt;&lt;"0";</div><div class="line">//    &#125; else if(a&gt;0)</div><div class="line">//    &#123;</div><div class="line">//        a-=b*coefficient;</div><div class="line">//        if(a==0)</div><div class="line">//            out&lt;&lt;coefficient;</div><div class="line">//        else</div><div class="line">//        if(coefficient==0)</div><div class="line">//            out&lt;&lt;a&lt;&lt;"/"&lt;&lt;b;</div><div class="line">//        else</div><div class="line">//            out&lt;&lt;coefficient&lt;&lt;" "&lt;&lt;a&lt;&lt;"/"&lt;&lt;b;</div><div class="line">//    &#125;</div><div class="line">//    else</div><div class="line">//    &#123;//分子小于0，显然系数也小于0</div><div class="line">//        a-=b*coefficient;</div><div class="line">//        if(a==0)</div><div class="line">//            out&lt;&lt;"("&lt;&lt;coefficient&lt;&lt;")";</div><div class="line">//        else</div><div class="line">//        &#123;</div><div class="line">//            if(coefficient==0)</div><div class="line">//                out&lt;&lt;"("&lt;&lt;a&lt;&lt;"/"&lt;&lt;b&lt;&lt;")";</div><div class="line">//            else</div><div class="line">//                out&lt;&lt;"("&lt;&lt;coefficient&lt;&lt;" "&lt;&lt;-a&lt;&lt;"/"&lt;&lt;b&lt;&lt;")";</div><div class="line">//        &#125;</div><div class="line">//    &#125;</div><div class="line">//    return out;</div><div class="line">//&#125;</div><div class="line"></div><div class="line">Frac operator+(const Frac &amp;o1, const Frac &amp;o2)</div><div class="line">&#123;</div><div class="line">    Frac res;</div><div class="line">    res.denominator=o1.denominator*o2.denominator;</div><div class="line">    res.numerator=o1.numerator*o2.denominator+o2.numerator*o1.denominator;</div><div class="line">    long long a=1;</div><div class="line">    simplify(res);</div><div class="line">    return res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Frac operator*(const Frac&amp;o1,const Frac&amp;o2)</div><div class="line">&#123;</div><div class="line">    Frac res;</div><div class="line">    res.numerator=o1.numerator*o2.numerator;</div><div class="line">    res.denominator=o1.denominator*o2.denominator;</div><div class="line">    simplify(res);</div><div class="line">    return res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Frac operator-(const Frac &amp;o1,const Frac &amp;o2)</div><div class="line">&#123;</div><div class="line">    Frac tmp=o2;</div><div class="line">    tmp.numerator=-tmp.numerator;</div><div class="line">    return o1+tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Frac operator/(const Frac&amp;o1,const Frac&amp;o2)</div><div class="line">&#123;</div><div class="line">    Frac tmp(o2.denominator,o2.numerator);</div><div class="line">    if(tmp.denominator*tmp.numerator&lt;0)</div><div class="line">    &#123;//保证符号始终在分子上</div><div class="line">        tmp.denominator=abs(tmp.denominator);</div><div class="line">        tmp.numerator=-abs(tmp.numerator);</div><div class="line">    &#125;</div><div class="line">    return o1*tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    long long a,b,c,d;</div><div class="line">    scanf("%lld/%lld %lld/%lld",&amp;a,&amp;b,&amp;c,&amp;d);</div><div class="line">    Frac o1(a,b),o2(c,d);</div><div class="line">    simplify(o1);</div><div class="line">    simplify(o2);</div><div class="line">    cout&lt;&lt;o1&lt;&lt;" + "&lt;&lt;o2&lt;&lt;" = "&lt;&lt;o1+o2&lt;&lt;endl;</div><div class="line">    cout&lt;&lt;o1&lt;&lt;" - "&lt;&lt;o2&lt;&lt;" = "&lt;&lt;o1-o2&lt;&lt;endl;</div><div class="line">    cout&lt;&lt;o1&lt;&lt;" * "&lt;&lt;o2&lt;&lt;" = "&lt;&lt;o1*o2&lt;&lt;endl;</div><div class="line">    cout&lt;&lt;o1&lt;&lt;" / "&lt;&lt;o2&lt;&lt;" = "&lt;&lt;o1/o2&lt;&lt;endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1089-归并-插入排序"><a href="#1089-归并-插入排序" class="headerlink" title="1089[归并/插入排序]"></a>1089[归并/插入排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1089" target="_blank" rel="noopener">Insert or Merge</a></p>
<p><em>题意：给一个原始序列和部分排序后的序列，判断是归并/插入排序中的哪一种，并根据判断的结果输出下一轮排序的结果。</em></p>
<p>思路：<strong>先从头看已经有序的序列，如果后面的无序序列和原始序列一样就是插入，否则就是归并排序。插入排序的下一轮很好做，多加一个元素排序即可。而对于归并排序，不能根据一开始有序序列的个数k就认定下一次应该k个k个排序，因为可能正好一开始k个是有序的。所以，需要先模拟出和输入的部分排序结果相同的序列，然后再执行一轮。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(N),p(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</div><div class="line">    <span class="keyword">int</span> point;</div><div class="line">    <span class="keyword">for</span> (point=<span class="number">0</span>;point&lt;N<span class="number">-1</span>&amp;&amp;p[point]&lt;=p[point+<span class="number">1</span>];point++);<span class="comment">//point是最后一个有序元素的下标,必须是&lt;=，题目中没说每个数字都不同！！！</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    point+=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i=point;i&lt;N&amp;&amp;p[i]==s[i];i++);</div><div class="line">    <span class="keyword">if</span>(i==N)</div><div class="line">    &#123;<span class="comment">//如果point之后的元素和原始序列一样，表明是插入排序。</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Insertion Sort\n"</span>);</div><div class="line">        sort(p.begin(),p.begin()+point+<span class="number">1</span>);<span class="comment">//只要在有序的序列上多加一个元素排序即可。</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Merge Sort\n"</span>);</div><div class="line">        <span class="keyword">bool</span> flag= <span class="literal">true</span>;</div><div class="line">        <span class="keyword">int</span> k=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(flag)</div><div class="line">        &#123;</div><div class="line">            flag=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">            &#123;<span class="comment">//需要先找到当前运行到归并排序的第几次,k表示几几归并</span></div><div class="line">                <span class="keyword">if</span>(s[i]!=p[i])</div><div class="line">                    flag= <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            k*=<span class="number">2</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=s.begin();it&lt;s.end();it+=k)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(it+k&lt;=s.end())</div><div class="line">                    sort(it,it+k);</div><div class="line">                <span class="keyword">else</span><span class="comment">//把不足k个的最后几个排序</span></div><div class="line">                    sort(it,s.end());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        p=s;<span class="comment">//模拟部分是直接在原始序列s上做的，为了输出，所以拷贝到p</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,p[i]);</div><div class="line">        <span class="keyword">if</span>(i!=N<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1090-树的DFS"><a href="#1090-树的DFS" class="headerlink" title="1090[树的DFS]"></a>1090[树的DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1090" target="_blank" rel="noopener">Highest Price in Supply Chain</a>这个题的背景见了好几次了吧，最近一次是1079。这次要求求出最高的价格。</p>
<p>思路：<strong>进行DFS即可，记录最贵的价格。由于DFS过程默认根供应商也乘了(1+r%)，所以最后的结果要除以(1+r)%。另外，也可以用DFS求出最大深度，然后一次进行幂运算~~~</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; stor;</div><div class="line"><span class="keyword">double</span> max_price=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line"><span class="keyword">double</span> p,r;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">double</span> price)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(stor[u].empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(price&gt;max_price)</div><div class="line">        &#123;</div><div class="line">            max_price=price;</div><div class="line">            total=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(price==max_price)</div><div class="line">            total++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;stor[u].size();i++)</div><div class="line">            DFS(stor[u][i],price*(<span class="number">1.0</span>+r));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;p&gt;&gt;r;</div><div class="line">    r/=<span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> supplier;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;supplier;</div><div class="line">        stor[supplier].push_back(i);</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">-1</span>,p);</div><div class="line">    max_price/=(<span class="number">1</span>+r);<span class="comment">//注意这里之所以除以一次，是因为我们从根结点出发的，根节点的下级本应是p，但是算成了p(1+r)，所以多乘了一次。</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf %d"</span>,max_price,total);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[非监督学习]]></title>
      <url>https://www.prime666.com/2017/07/20/%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>非监督学习</p>
<a id="more"></a>
<h1 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h1><p>非监督学习和监督学习主要区别在于没有类别标记(class label)。</p>
<h2 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li><p>基本功能</p>
<p>算法接受参数 k ；然后将事先输入的n个数据对象划分为 k个聚类以便使得所获得的聚类满足：同一聚类中的对象相似度较高；而不同聚类中的对象相似度较小。</p>
</li>
<li><p>算法流程</p>
<ul>
<li>适当选择c个类的初始中心；</li>
<li>在第k次迭代中，对任意一个样本，求其到c各中心的距离，将该样本归到距离最短的中心所在的类；</li>
<li>利用均值等方法更新该类的中心值；</li>
<li>对于所有的c个聚类中心，如果利用以上两步的迭代法更新后，值保持不变（或者迭代次数达到了预设的阈值），则迭代结束，否则继续迭代。</li>
</ul>
</li>
<li><p>算法优缺点</p>
<ul>
<li><p>优点</p>
<p>速度快，简单</p>
</li>
<li><p>缺点</p>
<p>最终结果跟初始点选择相关，容易陷入局部最优，另外需知道k值。</p>
</li>
</ul>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">K_means</span><span class="params">(X,k,max_count)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param X: 训练数据</div><div class="line">    :param k: 类别个数</div><div class="line">    :param max_count: 最大迭代次数</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    row,col=X.shape</div><div class="line">    dataSet=np.zeros((row,col+<span class="number">1</span>))</div><div class="line">    dataSet[:,:<span class="number">-1</span>]=X <span class="comment">#添加最后一列记录类别，用1~k表示</span></div><div class="line">    <span class="comment"># Initialize centroids randomly</span></div><div class="line">    <span class="comment"># centroids=dataSet[np.random.randint(low=X.shape[0],size=k),:] #选了k个点,这个方法并不好，因为可能会产生两次随机到了同一个点！</span></div><div class="line">    centroids=dataSet[random.sample(range(k),k),:] <span class="comment">#该随机函数从第一个参数序列中选择k个元素，保证不会重复选择同一个！</span></div><div class="line">    <span class="comment"># centroids = dataSet[0:2,:]</span></div><div class="line">    centroids[:,<span class="number">-1</span>]=np.arange(<span class="number">1</span>,k+<span class="number">1</span>) <span class="comment">#最后一行，赋值1~k记录类别</span></div><div class="line"></div><div class="line">    <span class="comment"># Initialize book keeping vars.</span></div><div class="line">    iterations = <span class="number">1</span></div><div class="line">    oldCentroids = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># Run the main k-means algorithm</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> Is_stop(oldCentroids,centroids,iterations,max_count):</div><div class="line">        print(<span class="string">'第%d次迭代'</span>%iterations,<span class="string">'*'</span>*<span class="number">50</span>)</div><div class="line">        print(<span class="string">'中心点:'</span>)</div><div class="line">        print(centroids)</div><div class="line"></div><div class="line">        oldCentroids=np.copy(centroids) <span class="comment">#深拷贝</span></div><div class="line">        iterations+=<span class="number">1</span></div><div class="line"></div><div class="line">        Updata_label(dataSet,centroids)</div><div class="line">        centroids=getCentroids(dataSet,k)</div><div class="line"></div><div class="line">    <span class="keyword">return</span>  dataSet</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Is_stop</span><span class="params">(oldCentroids, centroids, iterations, max_count)</span>:</span></div><div class="line">    <span class="keyword">if</span> iterations&gt;max_count:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> np.array_equal(oldCentroids,centroids)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Updata_label</span><span class="params">(dataSet,centroids)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param dataSet: 数据集</div><div class="line">    :param centroids: 中心点数据集</div><div class="line">    :return:</div><div class="line">    '''</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> dataSet:</div><div class="line">        line[<span class="number">-1</span>]=getLabelFromClosestCentroid(line,centroids)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLabelFromClosestCentroid</span><span class="params">(dataSetRow, centroids)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param dataSetRow: 数据集中某一行</div><div class="line">    :param centroids: 中心点的集合</div><div class="line">    :return: 该行对应点的更新后的Label</div><div class="line">    '''</div><div class="line">    label=centroids[<span class="number">0</span>,<span class="number">-1</span>] <span class="comment">#一个数字标记</span></div><div class="line">    minDist = np.linalg.norm(dataSetRow[:<span class="number">-1</span>]- centroids[<span class="number">0</span>, :<span class="number">-1</span>])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,centroids.shape[<span class="number">0</span>]):</div><div class="line">        dis=np.linalg.norm(dataSetRow[:<span class="number">-1</span>]-centroids[i,:<span class="number">-1</span>])</div><div class="line">        <span class="keyword">if</span> dis&lt;minDist:</div><div class="line">            minDist=dis</div><div class="line">            label=centroids[i,<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> label</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCentroids</span><span class="params">(dataSet, k)</span>:</span></div><div class="line">    result = np.zeros((k, dataSet.shape[<span class="number">1</span>])) <span class="comment">#新建中心点数据集，一开始全为0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k + <span class="number">1</span>):</div><div class="line">        oneCluster = dataSet[dataSet[:, <span class="number">-1</span>] == i, :<span class="number">-1</span>] <span class="comment">#掩码方式选择行，挺高的！</span></div><div class="line">        result[i - <span class="number">1</span>, :<span class="number">-1</span>] = np.mean(oneCluster, axis=<span class="number">0</span>) <span class="comment">#跨行求平均值，结果是一维向量，每个值表示这一列的平均值。</span></div><div class="line">        result[i - <span class="number">1</span>, <span class="number">-1</span>] = i</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">x1 = np.array([<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">x2 = np.array([<span class="number">2</span>, <span class="number">1</span>])</div><div class="line">x3 = np.array([<span class="number">4</span>, <span class="number">3</span>])</div><div class="line">x4 = np.array([<span class="number">5</span>, <span class="number">4</span>])</div><div class="line">testX = np.vstack((x1, x2, x3, x4))</div><div class="line"></div><div class="line">result = K_means(testX, <span class="number">2</span>, <span class="number">10</span>)</div><div class="line">print(<span class="string">'最终结果'</span>,result)</div></pre></td></tr></table></figure>
<h2 id="层次聚类"><a href="#层次聚类" class="headerlink" title="层次聚类"></a>层次聚类</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ol>
<li><p>算法流程</p>
<p>假设有N个待聚类的样本，对于层次聚类来说，步骤：</p>
<ol>
<li>（初始化）把每个样本归为一类，计算每两个类之间的距离，也就是样本与样本之间的相似度；</li>
<li>寻找各个类之间最近的两个类，把他们归为一类（这样类的总数就少了一个）；</li>
<li>重新计算新生成的这个类与各个旧类之间的相似度；</li>
<li>重复2和3直到所有样本点都归为一类，结束（或者设置一个阈值，当类之间距离大于这个阈值时终止）</li>
</ol>
</li>
<li><p>求相似度</p>
<p> 整个聚类过程其实是<strong>建立了一棵树</strong>（两两合并，类似霍夫曼树的构造），在建立的过程中，可以通过在第二步上设置一个阈值，当最近的两个类的距离大于这个阈值，则认为迭代可以终止。另外关键的一步就是第三步，如何判断两个类之间的相似度有不少种方法。这里介绍一下三种：</p>
<ul>
<li>SingleLinkage：又叫做 nearest-neighbor ，就是取两个类中距离最近的两个样本的距离作为这两个集合的距离，也就是说，最近两个样本之间的距离越小，这两个类之间的相似度就越大。容易造成一种叫做 Chaining 的效果，两个 cluster 明明从“大局”上离得比较远，但是由于其中个别的点距离比较近就被合并了，并且这样合并之后 Chaining 效应会进一步扩大，最后会得到比较松散的 cluster 。</li>
<li>CompleteLinkage：这个则完全是 Single Linkage 的反面极端，取两个集合中距离最远的两个点的距离作为两个集合的距离。其效果也是刚好相反的，限制非常大，两个 cluster 即使已经很接近了，但是只要有不配合的点存在，就顽固到底，老死不相合并，也是不太好的办法。这两种相似度的定义方法的共同问题就是指考虑了某个有特点的数据，而没有考虑类内数据的整体特点。</li>
<li>Average-linkage：这种方法就是把两个集合中的点两两的距离全部放在一起求一个平均值，相对也能得到合适一点的结果。</li>
<li>average-linkage的一个变种就是取两两距离的中值，与取均值相比更加能够解除个别偏离样本对结果的干扰。</li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy.ma <span class="keyword">import</span> sqrt, array</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">cluster_node</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,vec,left=None,right=None,distance=<span class="number">0.0</span>,id=None,count=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        :param vec: 数据集中一行</div><div class="line">        :param left: 左孩子</div><div class="line">        :param right: 右孩子</div><div class="line">        :param distance: 结点距离</div><div class="line">        :param id:</div><div class="line">        :param count: 结点个数</div><div class="line">        '''</div><div class="line">        self.left=left</div><div class="line">        self.right=right</div><div class="line">        self.vec=vec</div><div class="line">        self.id=id</div><div class="line">        self.distance=distance</div><div class="line">        self.count=count <span class="comment">#only used for weighted average</span></div><div class="line"></div><div class="line"><span class="comment">#两个求距离的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">L2dist</span><span class="params">(v1, v2)</span>:</span></div><div class="line">    <span class="keyword">return</span> sqrt(sum((v1 - v2) ** <span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">L1dist</span><span class="params">(v1, v2)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(abs(v1 - v2))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hcluster</span><span class="params">(features, distance=L2dist)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param features: 数据集矩阵，每一行代表一个点</div><div class="line">    :param distance: 指定求距离的方法</div><div class="line">    :return: 根node</div><div class="line">    '''</div><div class="line">    <span class="comment"># cluster the rows of the "features" matrix</span></div><div class="line">    distances = &#123;&#125; <span class="comment">#键是点的tuple，值是其距离</span></div><div class="line">    currentclustid = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="comment"># clusters are initially just the individual rows</span></div><div class="line">    clust = [cluster_node(array(features[i]), id=i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(features))]</div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(clust) &gt; <span class="number">1</span>: <span class="comment">#总类别大于1</span></div><div class="line">        lowestpair = (<span class="number">0</span>, <span class="number">1</span>) <span class="comment">#最近的两个点下标的tuple</span></div><div class="line">        closest = distance(clust[<span class="number">0</span>].vec, clust[<span class="number">1</span>].vec) <span class="comment">#保存最近的两个点的距离</span></div><div class="line"></div><div class="line">        <span class="comment"># loop through every pair looking for the smallest distance</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(clust)):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(clust)):</div><div class="line">                <span class="comment"># distances is the cache of distance calculations</span></div><div class="line">                <span class="keyword">if</span> (clust[i].id, clust[j].id) <span class="keyword">not</span> <span class="keyword">in</span> distances:</div><div class="line">                    distances[(clust[i].id, clust[j].id)] = distance(clust[i].vec, clust[j].vec)</div><div class="line"></div><div class="line">                d = distances[(clust[i].id, clust[j].id)]</div><div class="line"></div><div class="line">                <span class="keyword">if</span> d &lt; closest:</div><div class="line">                    closest = d</div><div class="line">                    lowestpair = (i, j)</div><div class="line"></div><div class="line">        <span class="comment"># calculate the average of the two clusters</span></div><div class="line">        mergevec = [(clust[lowestpair[<span class="number">0</span>]].vec[i] + clust[lowestpair[<span class="number">1</span>]].vec[i]) / <span class="number">2.0</span> \</div><div class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(clust[<span class="number">0</span>].vec))]</div><div class="line"></div><div class="line">        <span class="comment"># create the new cluster</span></div><div class="line">        newcluster = cluster_node(array(mergevec), left=clust[lowestpair[<span class="number">0</span>]],</div><div class="line">                                  right=clust[lowestpair[<span class="number">1</span>]],</div><div class="line">                                  distance=closest, id=currentclustid)</div><div class="line"></div><div class="line">        <span class="comment"># cluster ids that weren't in the original set are negative</span></div><div class="line">        currentclustid -= <span class="number">1</span></div><div class="line">        <span class="keyword">del</span> clust[lowestpair[<span class="number">1</span>]]</div><div class="line">        <span class="keyword">del</span> clust[lowestpair[<span class="number">0</span>]]</div><div class="line">        clust.append(newcluster)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> clust[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_clusters</span><span class="params">(clust,dist)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param clust: 根节点</div><div class="line">    :param dist: 距离的阈值</div><div class="line">    :return: 所有距离小于dist的子树</div><div class="line">    '''</div><div class="line">    <span class="comment"># extract list of sub-tree clusters from hcluster tree with distance&lt;dist</span></div><div class="line">    clusters = &#123;&#125;</div><div class="line">    <span class="keyword">if</span> clust.distance&lt;dist:</div><div class="line">        <span class="comment"># we have found a cluster subtree</span></div><div class="line">        <span class="keyword">return</span> [clust]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># check the right and left branches</span></div><div class="line">        cl = []</div><div class="line">        cr = []</div><div class="line">        <span class="keyword">if</span> clust.left!=<span class="keyword">None</span>:</div><div class="line">            cl = extract_clusters(clust.left,dist=dist)</div><div class="line">        <span class="keyword">if</span> clust.right!=<span class="keyword">None</span>:</div><div class="line">            cr = extract_clusters(clust.right,dist=dist)</div><div class="line">        <span class="keyword">return</span> cl+cr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cluster_elements</span><span class="params">(clust)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param clust: 根节点</div><div class="line">    :return: id的列表</div><div class="line">    '''</div><div class="line">    <span class="comment"># return ids for elements in a cluster sub-tree</span></div><div class="line">    <span class="keyword">if</span> clust.id&gt;=<span class="number">0</span>:</div><div class="line">        <span class="comment"># positive id means that this is a leaf</span></div><div class="line">        <span class="keyword">return</span> [clust.id]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># check the right and left branches</span></div><div class="line">        cl = []</div><div class="line">        cr = []</div><div class="line">        <span class="keyword">if</span> clust.left!=<span class="keyword">None</span>:</div><div class="line">            cl = get_cluster_elements(clust.left)</div><div class="line">        <span class="keyword">if</span> clust.right!=<span class="keyword">None</span>:</div><div class="line">            cr = get_cluster_elements(clust.right)</div><div class="line">        <span class="keyword">return</span> cl+cr</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printclust</span><span class="params">(clust, labels=None, n=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="comment"># indent to make a hierarchy layout</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n): print(<span class="string">' '</span>,end=<span class="string">''</span>)</div><div class="line">    <span class="keyword">if</span> clust.id &lt; <span class="number">0</span>:</div><div class="line">        <span class="comment"># negative id means that this is branch</span></div><div class="line">        print(<span class="string">'-'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># positive id means that this is an endpoint</span></div><div class="line">        <span class="keyword">if</span> labels == <span class="keyword">None</span>:</div><div class="line">            print(clust.id)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(labels[clust.id])</div><div class="line"></div><div class="line">    <span class="comment"># now print the right and left branches</span></div><div class="line">    <span class="keyword">if</span> clust.left != <span class="keyword">None</span>:</div><div class="line">        printclust(clust.left, labels=labels, n=n + <span class="number">1</span>)</div><div class="line">    <span class="keyword">if</span> clust.right != <span class="keyword">None</span>:</div><div class="line">        printclust(clust.right, labels=labels, n=n + <span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getheight</span><span class="params">(clust)</span>:</span></div><div class="line">    <span class="comment"># Is this an endpoint? Then the height is just 1</span></div><div class="line">    <span class="keyword">if</span> clust.left == <span class="keyword">None</span> <span class="keyword">and</span> clust.right == <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># Otherwise the height is the same of the heights of</span></div><div class="line">    <span class="comment"># each branch</span></div><div class="line">    <span class="keyword">return</span> getheight(clust.left) + getheight(clust.right)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdepth</span><span class="params">(clust)</span>:</span></div><div class="line">    <span class="comment"># The distance of an endpoint is 0.0</span></div><div class="line">    <span class="keyword">if</span> clust.left == <span class="keyword">None</span> <span class="keyword">and</span> clust.right == <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># The distance of a branch is the greater of its two sides</span></div><div class="line">    <span class="comment"># plus its own distance</span></div><div class="line">    <span class="keyword">return</span> max(getdepth(clust.left), getdepth(clust.right)) + clust.distance</div></pre></td></tr></table></figure>
<p>​</p>
<p>   ​</p>
<p>   ​</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ML入门]]></title>
      <url>https://www.prime666.com/2017/07/19/ML%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>学习彭亮的课程，各种笔记。</p>
<a id="more"></a>
<h1 id="ML入门"><a href="#ML入门" class="headerlink" title="ML入门"></a>ML入门</h1><p><em>原作者实现环境是python2.x，鉴于如今3是未来，所以我实现过程中对其中2.x的特性而3.x废除的特性进行了去除。我的环境是3.6.</em></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>定义</strong>：学习是指从有关某个布尔函数的输入输出训练样例中推断出该布尔函数</p>
<p><strong>训练集(training set/data)/训练样例（training examples)</strong>: 用来进行训练，也就是产生模型或者算法的数据集</p>
<p><strong>测试集(testing set/data)/测试样例 (testing examples)</strong>：用来专门进行测试已经学习好的模型或者算法的数据集</p>
<p><strong>特征向量(features/feature vector)</strong>：属性的集合，通常用一个向量来表示，附属于一个实例</p>
<p><strong>标记(label)</strong>: c(x), 实例类别的标记。<strong>正例(positive example)</strong>，<strong>反例(negative example)</strong></p>
<p><strong>分类 (classification)</strong>: 目标标记为类别型数据(category) </p>
<p><strong>回归(regression)</strong>: 目标标记为连续性数值 (continuous numeric value)</p>
<p><strong>有监督学习(supervised learning)</strong>： 训练集有类别标记(class label)</p>
<p><strong>无监督学习(unsupervised learning)</strong>： 无类别标记(class label)</p>
<p><strong>半监督学习（semi-supervised learning)</strong>：有类别标记的训练集 + 无标记的训练集</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[监督学习]]></title>
      <url>https://www.prime666.com/2017/07/19/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>机器学习之监督学习</p>
<a id="more"></a>
<h1 id="监督学习——分类"><a href="#监督学习——分类" class="headerlink" title="监督学习——分类"></a>监督学习——分类</h1><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p>判定树是一个类似于流程图的树结构：其中，每个内部结点表示在一个属性上的测试，每个分支代表一个属性输出，而每个树叶结点代表类或类分布。树的最顶层是根结点。</p>
<hr>
<p><strong>熵的概念</strong>：</p>
<p><a href="https://en.wikipedia.org/wiki/Entropy_(information_theory" target="_blank" rel="noopener">wiki</a>)</p>
<p>熵的概念最早起源于物理学，用于度量一个热力学系统的无序程度。在信息论里面，熵是<strong>对不确定性的测量</strong>，<strong>熵</strong>是接收的每条消息中包含的信息的平均量，单位通常为<strong>比特</strong>。在信息世界，熵越高，则能传输越多的信息，不确定性越大，熵越低，则意味着传输的信息越少，不确定性越低。</p>
<p>我们不知道某事物具体状态，却知道它有几种可能性时，显然，可能性种类愈多，不确定性愈大。不确定性愈大的事物，我们最后确定了、知道了，这就是说我们从中得到了愈多的信息，也就是信息量大。<em>所以，熵、不确定性、信息量，这三者是同一个数值。</em></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/67841ec4b4f7e6ab658842ef2f53add46a2debbd" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在这里b是对数所使用的底，通常是2,自然常数e，或是10。当b = 2，熵的单位是bit；当b = e，熵的单位是nat；而当b = 10,熵的单位是Hart。</p>
<ol>
<li><p>构造决策树的基本算法——决策树归纳算法（Iterative Dichotomiser 3简称ID3算法）</p>
<p>思路<strong>关键就是选择哪个属性作为结点</strong></p>
<p>信息获取量(Information Gain)：Gain(A) = Info(D) - Infor_A(D)</p>
<p>即用先不考虑属性A的信息熵-考虑属性A后的信息熵</p>
<p>每次选择一个Gain最大的作为结点。</p>
</li>
<li><p>优缺点</p>
<ul>
<li><p>优点</p>
<p>直观，便于理解</p>
</li>
<li><p>缺点</p>
<p>处理连续变量不好（连续变量必须离散化）</p>
<p>类别较多时，错误增加的比较快</p>
<p>小规模数据集有效</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing,tree</div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</div><div class="line"></div><div class="line">featureList=[]<span class="comment">#字典的列表，每个字典对应一个实例</span></div><div class="line">lableList=[]<span class="comment">#标题的列表</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">r'E:\pycharm\ML\computer.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    r=csv.reader(f)</div><div class="line">    header=next(r) <span class="comment">#标题行</span></div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> r:</div><div class="line">        lableList.append(line[<span class="number">-1</span>])</div><div class="line">        dic=&#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(line)<span class="number">-1</span>):</div><div class="line">            dic[header[i]]=line[i]</div><div class="line">        featureList.append(dic)</div><div class="line"></div><div class="line"><span class="comment"># pprint(featureList)</span></div><div class="line"></div><div class="line">vec=DictVectorizer()<span class="comment">#进行特征向量的变换</span></div><div class="line"></div><div class="line">dummyX=vec.fit_transform(featureList).toarray()</div><div class="line"></div><div class="line"><span class="comment"># print(dummyX.shape)</span></div><div class="line"><span class="comment"># print(dummyX)</span></div><div class="line"></div><div class="line">print(vec.get_feature_names())</div><div class="line"><span class="comment"># print(dummyX)</span></div><div class="line"></div><div class="line">dummyY=preprocessing.LabelBinarizer().fit_transform(lableList)</div><div class="line"></div><div class="line"></div><div class="line">classifier=tree.DecisionTreeClassifier(criterion=<span class="string">'entropy'</span>)<span class="comment">#利用信息熵时，用entropy（熵）。默认是gini</span></div><div class="line">classifier.fit(dummyX,dummyY)</div><div class="line"><span class="string">'''</span></div><div class="line">根据训练集(X,Y)建立决策树，X的维度为[n_samples, n_features]，Y的维度是shape = [n_samples] or [n_samples, n_outputs]，代表标记</div><div class="line">return:self</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'picture.dot'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f: <span class="comment">#写入dot文件</span></div><div class="line">    f=tree.export_graphviz(classifier,feature_names=vec.get_feature_names(),out_file=f)</div><div class="line"></div><div class="line">Row=dummyX[<span class="number">0</span>,:]</div><div class="line">Row[<span class="number">0</span>]=<span class="number">1</span></div><div class="line">Row[<span class="number">2</span>]=<span class="number">0</span></div><div class="line">print(<span class="string">'new Row:'</span>,str(Row))</div><div class="line"></div><div class="line">predict=classifier.predict(Row)</div><div class="line">print(<span class="string">'预测结果为'</span>,str(predict))</div></pre></td></tr></table></figure>
<p>Graphviz可以将dot文件转换成pdf，其即是可视化的文件。Graphviz安装后，把其bin目录添加到环境变量中，用<code>dot -Tpdf 输入文件名.dot -o 输出文件名.pdf</code>即可。</p>
<h2 id="KNN算法（k-Nearest-Neighbor）"><a href="#KNN算法（k-Nearest-Neighbor）" class="headerlink" title="KNN算法（k-Nearest Neighbor）"></a>KNN算法（k-Nearest Neighbor）</h2><ol>
<li><p>基本流程</p>
<ul>
<li>为了判断未知实例的类别，以所有已知类别的实例作为参照</li>
<li>选择参数K</li>
<li>计算未知实例与所有已知实例的距离</li>
<li>选择最近K个已知实例</li>
<li>根据少数服从多数的投票法则(majority-voting)，让未知实例归类为K个最邻近样本中最多数的类别</li>
</ul>
<p>针对距离的衡量，选择<strong>Euclidean distance，即两点间的直线距离</strong>。</p>
</li>
<li><p>算法优缺点</p>
<ul>
<li><p>优点</p>
<p>简单</p>
<p>易于理解</p>
<p>容易实现</p>
<p>通过对K的选择可具备丢弃噪音数据的健壮性</p>
</li>
<li><p>缺点</p>
<p>需要大量空间储存所有已知实例</p>
<p>算法复杂度高（需要比较所有已知实例与要分类的实例）</p>
<p>当其样本分布不平衡时，比如其中一类样本过大（实例数量过多）占主导的时候，新的未知实例容易被归类为这个主导样本，因为这类样本实例的数量过大，但这个新的未知实例实际并木接近目标样本</p>
</li>
</ul>
</li>
<li><p>改进</p>
<p>引入距离作为权重。</p>
</li>
</ol>
<p><strong>数据集iris介绍：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sklearn.datasets.load_iris(return_X_y=<span class="keyword">False</span>)</div><div class="line"><span class="comment">#return_X_y : boolean, default=False.If True, returns (data, target) instead of a Bunch object。</span></div><div class="line"><span class="comment">#return:</span></div><div class="line"><span class="string">'''</span></div><div class="line">data : Bunch</div><div class="line">Dictionary-like object, the interesting attributes are: ‘data’, the data to learn, ‘target’, the classification labels, ‘target_names’, the meaning of the labels, ‘feature_names’, the meaning of the features, and ‘DESCR’, the full description of the dataset.</div><div class="line">(data, target) : tuple if return_X_y is True</div><div class="line">'''</div></pre></td></tr></table></figure>
<p>该数据集包括3个类别，每个类50个实例，共计150个实例。</p>
<p><strong>KNN算法的封装</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">neighbors</span>.<span class="title">KNeighborsClassifier</span><span class="params">(n_neighbors=<span class="number">5</span>, weights=<span class="string">'uniform'</span>, algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, p=<span class="number">2</span>, metric=<span class="string">'minkowski'</span>, metric_params=None, n_jobs=<span class="number">1</span>, **kwargs)</span></span></div></pre></td></tr></table></figure>
<p>更多内容见<a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html" target="_blank" rel="noopener">详细文档</a></p>
<p>这里用到了其<code>fit(X,Y)</code>方法，用X作为训练数据，Y是target。<u>大部分情况下，fit基本上就是建立模型,其有拟合之意。</u></p>
<p>关于测试用了<code>predict(X)</code>方法，这里选择了参数X的维度是 (n_query, n_features)，返回一个数组，每个值都代表Class lable。</p>
<p>以下是利用库方法实现KNN算法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors</div><div class="line"></div><div class="line"></div><div class="line">K=neighbors.KNeighborsClassifier()<span class="comment">#实现了knn算法的分类器</span></div><div class="line">iris=datasets.load_iris() <span class="comment">#鸢尾(花)数据集</span></div><div class="line"></div><div class="line">K.fit(iris[<span class="string">'data'</span>],iris[<span class="string">'target'</span>])</div><div class="line"></div><div class="line">print(iris.target_names) <span class="comment">#也可以用iris['target_names']，如上</span></div><div class="line"></div><div class="line">predicted_lable=K.predict([[<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>]])</div><div class="line">print(predicted_lable)</div></pre></td></tr></table></figure>
<p>封装的很好，很简洁。</p>
<hr>
<p>手动实现如下 </p>
<p>先补充一些知识：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">operator.itemgetter(item)</div><div class="line">operator.itemgetter(*items)</div></pre></td></tr></table></figure>
<p>它们都是返回一个可调用对象，该对象会对其参数调用<code>__getitem__()</code>方法，也就是<code>[]</code>运算符。给定多个参数，就返回元组，示例如下</p>
<ul>
<li>After <code>f = itemgetter(2)</code>, the call <code>f(r)</code> returns <code>r[2]</code>.</li>
<li>After <code>g = itemgetter(2, 5, 3)</code>, the call <code>g(r)</code> returns <code>(r[2], r[5], r[3])</code>.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sorted(iterable, *, key=<span class="keyword">None</span>, reverse=<span class="keyword">False</span>)</div><div class="line"><span class="comment">#Return a new sorted list from the items in iterable!</span></div></pre></td></tr></table></figure>
<p>可以利用reverse进行相反排序，key参数可以传递排序方法。<strong>特别注意返回的是一个list。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataset</span><span class="params">(filename,split,trainingSet=[],testSet=[])</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param filename: 数据集文件名，建议绝对路径</div><div class="line">    :param split: 区分训练集和数据集的一个浮点数</div><div class="line">    :param trainingSet: 训练集</div><div class="line">    :param testSet: 测试集</div><div class="line">    :return: none</div><div class="line">    '''</div><div class="line">    <span class="keyword">with</span> open(filename,<span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">        dataSet=csv.reader(f)</div><div class="line">        lines=list(dataSet)</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">                line[x]=float(line[x])</div><div class="line">            <span class="keyword">if</span> random.random()&lt;split:</div><div class="line">                trainingSet.append(line)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                testSet.append(line)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">euclideanDistance</span><span class="params">(position1,position2,dim)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param position1: 起点坐标</div><div class="line">    :param position2: 终点坐标</div><div class="line">    :param dim: 维度</div><div class="line">    :return: 距离</div><div class="line">    '''</div><div class="line">    distance=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dim):</div><div class="line">        distance+=(position1[i]-position2[i])**<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> sqrt(distance)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNeighbors</span><span class="params">(trainSet,test,K)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param trainSet:训练集</div><div class="line">    :param test: 待测试的用例</div><div class="line">    :param K: 代表选择多少个最近的点</div><div class="line">    :return: K个最近的用例</div><div class="line">    '''</div><div class="line">    distances=[]<span class="comment">#tuple的list，保存test到每个train的distance</span></div><div class="line">    dim=len(test)<span class="number">-1</span><span class="comment">#不算lable</span></div><div class="line">    <span class="keyword">for</span> train <span class="keyword">in</span> trainSet:</div><div class="line">        distances.append((train,euclideanDistance(test,train,dim)))</div><div class="line">    distances.sort(key=itemgetter(<span class="number">1</span>))</div><div class="line">    neighbors=[]<span class="comment">#K个最近的train的列表</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(K):</div><div class="line">        neighbors.append(distances[i][<span class="number">0</span>])</div><div class="line">    <span class="keyword">return</span> neighbors</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(neighbors)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param neighbors:K个最近的点的列表</div><div class="line">    :return: 占多数的类别名，str类型</div><div class="line">    '''</div><div class="line">    Class=&#123;&#125;</div><div class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> neighbors:</div><div class="line">        lable=point[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> lable <span class="keyword">in</span> Class:</div><div class="line">            Class[lable]+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            Class[lable]=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> sorted(Class,key=itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>)[<span class="number">0</span>]<span class="comment">#对字典按键值排序，返回列表。dict也是iterable的</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAccuracy</span><span class="params">(testSet,correctSet)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    :param testSet: 测试集</div><div class="line">    :param correctSet: 正确的结果</div><div class="line">    :return: 测试集正确的比例</div><div class="line">    '''</div><div class="line">    correct_count=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(testSet)):</div><div class="line">        <span class="keyword">if</span> testSet[i][<span class="number">-1</span>]==correctSet[i]:</div><div class="line">            correct_count+=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> correct_count/len(testSet)*<span class="number">100.0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    trainSet=[]</div><div class="line">    testSet=[]</div><div class="line"></div><div class="line">    split=<span class="number">0.67</span></div><div class="line">    loadDataset(<span class="string">r'E:\pycharm\ML\KNN\iris.data.txt'</span>,split,trainSet,testSet)</div><div class="line">    print(<span class="string">'trainset个数:'</span>,len(trainSet))</div><div class="line">    print(<span class="string">'testset个数:'</span>,len(testSet))</div><div class="line"></div><div class="line">    correctSet=[]</div><div class="line">    K=<span class="number">3</span></div><div class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> testSet:</div><div class="line">        neighbors=getNeighbors(trainSet,test,K)</div><div class="line">        result=getResponse(neighbors)</div><div class="line">        correctSet.append(result)</div><div class="line">        print(<span class="string">'预测为:'</span>,result,<span class="string">'实际为:'</span>,test[<span class="number">-1</span>])</div><div class="line">    print(<span class="string">'精确度为:'</span>,getAccuracy(testSet,correctSet),<span class="string">'%'</span>)</div></pre></td></tr></table></figure>
<h2 id="支持向量机（上）"><a href="#支持向量机（上）" class="headerlink" title="支持向量机（上）"></a>支持向量机（上）</h2><p>​    在机器学习中，支持向量机（英语：Support Vector Machine，常简称为SVM，又名支持向量网络）是在分类与回归分析中分析数据的<strong>监督式学习模型</strong>与相关的学习算法。给定一组训练实例，每个训练实例被标记为属于两个类别中的一个或另一个，SVM训练算法创建一个将新的实例分配给两个类别之一的模型，使其成为非概率二元线性分类器。SVM模型是将<strong>实例表示为空间中的点</strong>，这样映射就使得单独类别的实例被尽可能宽的明显的间隔分开。然后，<u>将新的实例映射到同一空间，并基于它们落在间隔的哪一侧来预测所属类别。</u></p>
<p>​    对于支持向量机来说，<strong>数据点被视为p 维向量</strong>，而我们想知道是否可以<strong>用(p-1) 维超平面来分开这些点</strong>。这就是所谓的线性分类器。可能有许多超平面可以把数据分类。最佳超平面的一个<strong>合理选择是以最大间隔把两个类分开的超平面</strong>。因此，我们要选择能够让到每边最近的数据点的距离最大化的超平面。</p>
<p>这部分主要是<a href="https://en.wikipedia.org/wiki/Support_vector_machine#Linear_SVM" target="_blank" rel="noopener">线性SVM</a>，即线性可分的情况（用一条线可以分开）。</p>
<hr>
<p>显然，算法复杂度仅仅由支持向量的个数决定，而不是由数据的维度决定。另外，SVM训练出来的模型，完全依赖于支持向量，其余的点删除也不影响。如果支持向量比较少，则更容易被泛化。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> pl <span class="comment">#matplotlib的一个子模块，被单独拿了出来</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"></div><div class="line">np.random.seed(<span class="number">0</span>) <span class="comment">#固定随机化种子</span></div><div class="line"></div><div class="line"><span class="comment">#生成数据</span></div><div class="line">X=np.r_[np.random.randn(<span class="number">20</span>,<span class="number">2</span>)-[<span class="number">2</span>,<span class="number">2</span>],np.random.randn(<span class="number">20</span>,<span class="number">2</span>)+[<span class="number">2</span>,<span class="number">2</span>]]</div><div class="line"><span class="comment">#上面这句话的意思是先根据标准正态分布生成20*2的矩阵，然后对每一行减去[2,2]；然后把两个矩阵进行连接。实际上这样一减，点分别左右平移，这样方便分类。</span></div><div class="line">Y=[<span class="number">0</span>]*<span class="number">20</span>+[<span class="number">1</span>]*<span class="number">20</span></div><div class="line"></div><div class="line"><span class="comment">#拟合模型</span></div><div class="line">classifier=svm.SVC(kernel=<span class="string">'linear'</span>)</div><div class="line">classifier.fit(X,Y)<span class="comment">#进行模型拟合</span></div><div class="line"></div><div class="line"><span class="comment">#超平面</span></div><div class="line"><span class="comment">#w0x+w1y+w3=0转化为y=-w0/w1-w3/w1</span></div><div class="line">w=classifier.coef_[<span class="number">0</span>] <span class="comment">#系数w0 w1</span></div><div class="line">k=-w[<span class="number">0</span>]/w[<span class="number">1</span>] <span class="comment">#斜率</span></div><div class="line">xx=np.linspace(<span class="number">-5</span>,<span class="number">5</span>)</div><div class="line">yy=k*xx-(classifier.intercept_[<span class="number">0</span>]/w[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#上下两条平行线</span></div><div class="line">b=classifier.support_vectors_[<span class="number">0</span>]</div><div class="line">yy_down=k*xx+(b[<span class="number">1</span>]-k*b[<span class="number">0</span>])</div><div class="line"></div><div class="line">b=classifier.support_vectors_[<span class="number">-1</span>]</div><div class="line">yy_up=k*xx+(b[<span class="number">1</span>]-k*b[<span class="number">0</span>])</div><div class="line"></div><div class="line"><span class="comment">#画图</span></div><div class="line">pl.plot(xx,yy,<span class="string">'k-'</span>)<span class="comment">#实线</span></div><div class="line">pl.plot(xx,yy_down,<span class="string">'k--'</span>)</div><div class="line">pl.plot(xx,yy_up,<span class="string">'k--'</span>)<span class="comment">#虚线</span></div><div class="line"></div><div class="line">pl.scatter(classifier.support_vectors_[:,<span class="number">0</span>],classifier.support_vectors_[:,<span class="number">1</span>],s=<span class="number">80</span>,facecolors=<span class="string">'none'</span>)</div><div class="line">pl.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],c=Y,cmap=pl.cm.Paired)</div><div class="line"></div><div class="line">pl.axis(<span class="string">'tight'</span>)<span class="comment">#为了让所有数据都能在一张图展示</span></div><div class="line">pl.show()</div></pre></td></tr></table></figure>
<p>相关知识补充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.r_</div></pre></td></tr></table></figure>
<p>其是一个类的实例，实现了<code>__getitem__</code>方法，可用于连接矩阵。<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html?highlight=r_#numpy.r_" target="_blank" rel="noopener">详细文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.random.randn(d0, d1, ..., dn)</div></pre></td></tr></table></figure>
<p>根据标准正态分布（期望0，方差1）产生随机数，返回矩阵，参数指定维度。不传递参数时默认返回一个浮点数。</p>
<p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html" target="_blank" rel="noopener">SVC类</a></p>
<p>由于该部分是线性SVM，所以，构造分类器时只需要将<code>kernel</code>关键字置为<code>linear</code>即可。</p>
<p>其有以下属性：</p>
<blockquote>
<p>support_ : array-like, shape = [n_SV]<br>Indices of support vectors.</p>
<p>support<em>vectors</em> : array-like, shape = [n_SV, n_features]<br>Support vectors.</p>
<p>n<em>support</em> : array-like, dtype=int32, shape = [n_class]<br>Number of support vectors for each class.</p>
<p>coef_ : array, shape = [n_class-1, n_features]<br>Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.</p>
<p>intercept_ : array, shape = [n_class * (n_class-1) / 2]<br>Constants in decision function.</p>
</blockquote>
<p><a href="https://matplotlib.org/api/pyplot_api.html?highlight=scatter#matplotlib.pyplot.scatter" target="_blank" rel="noopener">散点图</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">matplotlib.pyplot.scatter(x, y, s=<span class="keyword">None</span>, c=<span class="keyword">None</span>, marker=<span class="keyword">None</span>, cmap=<span class="keyword">None</span>, norm=<span class="keyword">None</span>, vmin=<span class="keyword">None</span>, vmax=<span class="keyword">None</span>, alpha=<span class="keyword">None</span>, linewidths=<span class="keyword">None</span>, verts=<span class="keyword">None</span>, edgecolors=<span class="keyword">None</span>, hold=<span class="keyword">None</span>, data=<span class="keyword">None</span>, **kwargs)</div></pre></td></tr></table></figure>
<p>x,y均是序列，代表点的坐标。s是点的大小，c上面程序用的是Y，其可以是一个序列，这样点会根据Y中值映射到不同颜色（根据cmap参数）。</p>
<h2 id="支持向量机（下）"><a href="#支持向量机（下）" class="headerlink" title="支持向量机（下）"></a>支持向量机（下）</h2><p>下面讨论线性不可分的情况。为此，有人提出将原有限维空间映射到维数高得多的空间中，在该空间中进行分离可能会更容易。但是高维度计算时向量点积可能比较复杂，所以引入核函数，用来取代计算非线性映射函数的内积从而快速得到点积。</p>
<hr>
<p><strong>SVM可以扩展到多个类的情况</strong></p>
<p>对于每个类，有一个当前类和其它类的二类分类器（one vs rest）</p>
<hr>
<p><a href="http://scikit-learn.org/stable/auto_examples/applications/face_recognition.html#sphx-glr-auto-examples-applications-face-recognition-py" target="_blank" rel="noopener">人脸识别</a>的示例：</p>
<ol>
<li><p>相关库函数用法总结</p>
<ul>
<li><p>数据集获取</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lfw_people=fetch_lfw_people(min_faces_per_person=<span class="number">70</span>,resize=<span class="number">0.4</span>)</div></pre></td></tr></table></figure>
<p>min_faces_per_person : int, optional, default None<br>数据集只会保留至少拥有<code>min_faces_person</code>张照片的人。</p>
<p>resize : float, optional, default 0.5<br>用于调整每张图片大小的比例。</p>
<p>其返回一个字典类型的对象，有以下属性：</p>
<blockquote>
<p>dataset : dict-like object with the following attributes:<br>dataset.data : numpy array of shape (13233, 2914)  二维数组，第一维算是序号，每一行存储图片数据（62*47==2914）<br>Each row corresponds to a ravelled face image of original size 62 x 47 pixels. Changing the slice_ or resize parameters will change the shape of the output.</p>
<p>dataset.images : numpy array of shape (13233, 62, 47)  三维数组，第一维算是序号，后两维对应一张图片的长和高<br>Each row is a face image corresponding to one of the 5749 people in the dataset. Changing the slice_ or resize parameters will change the shape of the output.</p>
<p>dataset.target : numpy array of shape (13233,)  一维数组，下标是序号，对应的值是相应的label<br>Labels associated to each face image. Those labels range from 0-5748 and correspond to the person IDs.</p>
</blockquote>
</li>
<li><p>数据集分割成测试集和训练集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sklearn.model_selection.train_test_split(*arrays, **options)</div></pre></td></tr></table></figure>
<p>该函数把数组或矩阵随机分成测试子集和训练子集。</p>
<p>第一个参数是传入的序列，其有一个关键字参数下面会用到：</p>
<blockquote>
<p>test_size : float, int, or None (default is None)<br>If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is automatically set to the complement of the train size. If train size is also None, test size is set to 0.25.</p>
</blockquote>
<p>返回就是划分后的四个子集。</p>
</li>
<li><p>降维——Principal component analysis主要组件分析 (PCA)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">decomposition</span>.<span class="title">PCA</span><span class="params">(n_components=None, copy=True, whiten=False, svd_solver=<span class="string">'auto'</span>, tol=<span class="number">0.0</span>, iterated_power=<span class="string">'auto'</span>, random_state=None)</span></span></div></pre></td></tr></table></figure>
<p>该算法<strong>主要利用奇异值分解将数据投影到更低维的空间</strong>。</p>
<p>主要参数详解：</p>
<blockquote>
<p>n_components : int, float, None or string<br>Number of components to keep. if n_components is not set all components are kept: n_components == min(n_samples, n_features)</p>
<p>​</p>
<p>svd_solver : string {‘auto’, ‘full’, ‘arpack’, ‘randomized’}</p>
<p>randomized :run randomized SVD by the method of Halko et al.</p>
<p>​</p>
<p>whiten : bool, optional (default False)<br>When True (False by default) the components_ vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances.<br>Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions.</p>
</blockquote>
<p>主要属性如下：</p>
<blockquote>
<p>components_ : array, [n_components, n_features]<br>Principal axes in feature space, representing the directions of maximum variance in the data.</p>
</blockquote>
<p>其有几个方法下面会用到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fit(X, y=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>用X拟合</p>
<p>Parameters:<br>X: array-like, shape (n_samples, n_features) :<br>Training data, where n_samples in the number of samples and n_features is the number of features.<br>Returns:<br>self : object<br>Returns the instance itself.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform(X, y=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>对X进行降维：</p>
<blockquote>
<p>Parameters:<br>X : array-like, shape (n_samples, n_features)<br>New data, where n_samples is the number of samples and n_features is the number of features.<br>Returns:<br>X_new : array-like, shape (n_samples, n_components)</p>
</blockquote>
</li>
<li><p>分类器求解<a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">model_selection</span>.<span class="title">GridSearchCV</span><span class="params">(estimator, param_grid, scoring=None, fit_params=None, n_jobs=<span class="number">1</span>, iid=True, refit=True, cv=None, verbose=<span class="number">0</span>, pre_dispatch=<span class="string">'2*n_jobs'</span>, error_score=<span class="string">'raise'</span>,return_train_score=True)</span></span></div></pre></td></tr></table></figure>
<p>其是一个穷举式算法，</p>
<p>主要参数：</p>
<blockquote>
<p>estimator : estimator object.<br>This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a score function, or scoring must be passed.</p>
<p>param_grid : dict or list of dictionaries<br>Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.</p>
</blockquote>
<p>其属性<code>best_estimator_</code> 为Estimator that was chosen by the search</p>
<p>方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fit(X, y=<span class="keyword">None</span>, groups=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>X : array-like, shape = [n_samples, n_features]<br>Training vector, where n_samples is the number of samples and n_features is the number of features.</p>
<p>y : array-like, shape = [n_samples] or [n_samples, n_output], optional<br>Target relative to X for classification or regression; None for unsupervised learning.</p>
<p>groups : array-like, with shape (n_samples,), optional<br>Group labels for the samples used while splitting the dataset into train/test set.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">predict(*args, **kwargs)</div></pre></td></tr></table></figure>
<blockquote>
<p>Call predict on the estimator with the best found parameters.</p>
<p>Parameters:<br>X : indexable, length n_samples</p>
</blockquote>
</li>
<li><p>分析报告<a href="http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sklearn.metrics.classification_report(y_true, y_pred, labels=<span class="keyword">None</span>, target_names=<span class="keyword">None</span>, sample_weight=<span class="keyword">None</span>, digits=<span class="number">2</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Parameters:<br>y_true : 1d array-like, or label indicator array / sparse matrix<br>Ground truth (correct) target values.<br>y_pred : 1d array-like, or label indicator array / sparse matrix<br>Estimated targets as returned by a classifier.<br>labels : array, shape = [n_labels]<br>Optional list of label indices to include in the report.<br>target_names : list of strings<br>Optional display names matching the labels (same order).<br>sample_weight : array-like of shape = [n_samples], optional<br>Sample weights.<br>digits : int<br>Number of digits for formatting output floating point values</p>
<p>​</p>
<p>Returns:<br>report : string<br>Text summary of the precision, recall, F1 score for each class.</p>
</blockquote>
</li>
<li><p>混淆矩阵（confusion matrix）<a href="http://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html#sklearn.metrics.confusion_matrix" target="_blank" rel="noopener">文档</a></p>
<p>矩阵的每一列代表一个类的实例预测，而每一行表示一个实际的类的实例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sklearn.metrics.confusion_matrix(y_true, y_pred, labels=<span class="keyword">None</span>, sample_weight=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>Parameters:<br>y_true : array, shape = [n_samples]<br>Ground truth (correct) target values.<br>y_pred : array, shape = [n_samples]<br>Estimated targets as returned by a classifier.<br>labels : array, shape = [n_classes], optional<br>List of labels to index the matrix. This may be used to reorder or select a subset of labels. If none is given, those that appear at least once in y_true or y_pred are used in sorted order.</p>
<p>​</p>
<p>Returns:<br>C : array, shape = [n_classes, n_classes] 代表混淆矩阵</p>
</blockquote>
<p>比如下面的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y_true = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y_pred = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>confusion_matrix(y_true, y_pred)</div><div class="line">array([[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">       [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]])</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  0 1 2	</div><div class="line">0 2 0 0	</div><div class="line">1 0 0 1</div><div class="line">2 1 0 2</div></pre></td></tr></table></figure>
<p>把上述矩阵补全，这个矩阵中(0,0)的意思为实际为0预测为0的情况有几种，看上例显然有两种！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>y_true = [<span class="string">"cat"</span>, <span class="string">"ant"</span>, <span class="string">"cat"</span>, <span class="string">"cat"</span>, <span class="string">"ant"</span>, <span class="string">"bird"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y_pred = [<span class="string">"ant"</span>, <span class="string">"ant"</span>, <span class="string">"cat"</span>, <span class="string">"cat"</span>, <span class="string">"ant"</span>, <span class="string">"cat"</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>confusion_matrix(y_true, y_pred, labels=[<span class="string">"ant"</span>, <span class="string">"bird"</span>, <span class="string">"cat"</span>])</div><div class="line">array([[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">       [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]])</div></pre></td></tr></table></figure>
<p>这里补全矩阵的行列就不再是上面的0 1 2了，而是那三个字符串！</p>
</li>
</ul>
</li>
<li><p>实现代码</p>
</li>
</ol>
<h2 id="神经网络算法"><a href="#神经网络算法" class="headerlink" title="神经网络算法"></a>神经网络算法</h2><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><ol>
<li><p>神经元</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/97/Ncell.png" alt=""></p>
<ul>
<li>a1~an为输入向量的各个分量</li>
<li>w1~wn为神经元各个突触的权值</li>
<li>b为偏置</li>
<li>f为传递函数 activation function or transfer function，通常为非线性函数(sigmod函数)。</li>
<li>t为神经元输出</li>
</ul>
<p>所以有<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ee01fe927d862cbc18097ac30a320331e98f4173" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>其中，W’是W的转置。</p>
<p>可见，一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果。</p>
</li>
<li><p>常见结构</p>
<p>一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成：<br>输入层（Input layer），众多神经元（Neuron）接受大量非线形输入消息。输入的消息称为输入向量。<br>输出层（Output layer），消息在神经元链接中传输、分析、权衡，形成输出结果。输出的消息称为输出向量。（通常个数等于类别个数）<br>隐藏层（Hidden layer），简称“隐层”，是输入层和输出层之间众多神经元和链接组成的各个层面。隐层可以有多层，习惯上会用一层。隐层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性。）更显著。习惯上会选输入节点1.2至1.5倍的节点。</p>
</li>
<li><p>交叉验证之K-fold cross-validation</p>
<p>K次交叉验证，初始采样分割成K个子样本，一个单独的子样本被保留作为验证模型的数据，其他K-1个样本用来训练。交叉验证重复K次，每个子样本验证一次，平均K次的结果或者使用其它结合方式，最终得到一个单一估测。这个方法的优势在于，同时重复运用随机产生的子样本进行训练和验证，每次的结果验证一次，10次交叉验证是最常用的。</p>
</li>
<li><p>反向传播算法——Backpropagation</p>
<p>其本质上计算损失函数对权重w的偏导数或梯度。这里的损失函数（cost function or error function ）是一个函数，负责把一个或多个变量映射到实数域，代表与某事件有关的成本。在本算法中，主要负责计算输出和期待输出之间的差异。</p>
<p><strong>这个算法一开始对权值和偏置进行随机初始化，然后通过不断计算输出和期望输出之间的差异，根据这个差异来向前更新权值和偏置，最后训练完成后结束。</strong></p>
<p>其具体公式见<a href="https://en.wikipedia.org/wiki/Backpropagation#Assumptions_about_the_loss_function" target="_blank" rel="noopener">wiki</a></p>
</li>
<li><p>手动实现神经网络算法</p>
<ul>
<li><p>随机数生成</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.random.random(size=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>Return random floats in the half-open interval [0.0, 1.0)</p>
<blockquote>
<p>Parameters:    </p>
<p>size : int or tuple of ints, optional</p>
<p>Output shape. If the given shape is, e.g., (m, n, k), then m <em> n </em> k samples are drawn. Default is None, in which case a single value is returned.</p>
<p>​</p>
<p>Returns:    </p>
<p>out : float or ndarray of floats</p>
<p>Array of random floats of shape size (unless size=None, in which case a single float is returned). </p>
</blockquote>
<p>   它可以生成[a,b)区间内的随机数，利用<code>(b - a) * random() + a</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.random.randint(low, high=<span class="keyword">None</span>, size=<span class="keyword">None</span>, dtype=<span class="string">'l'</span>)</div></pre></td></tr></table></figure>
<p>Return random integers from low (inclusive) to high (exclusive).如果high未赋值，范围就是[0,low)</p>
<blockquote>
<p>Parameters:<br>low : int<br>Lowest (signed) integer to be drawn from the distribution (unless high=None, in which case this parameter is one above the highest such integer).<br>high : int, optional<br>If provided, one above the largest (signed) integer to be drawn from the distribution (see above for behavior if high=None).<br>size : int or tuple of ints, optional<br>Output shape. If the given shape is, e.g., (m, n, k), then m <em> n </em> k samples are drawn. Default is None, in which case a single value is returned.<br>dtype : dtype, optional<br>Desired dtype of the result. All dtypes are determined by their name, i.e., ‘int64’, ‘int’, etc, so byteorder is not available and a specific precision may have different C types depending on the platform. The default value is ‘np.int’.<br>​</p>
<p>Returns:<br>out : int or ndarray of ints<br>size-shaped array of random integers from the appropriate distribution, or a single such random int if size not provided.</p>
</blockquote>
</li>
<li><p>维度保证<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html?highlight=atleast_2d#numpy.atleast_2d" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.atleast_2d(*arys)</div></pre></td></tr></table></figure>
<blockquote>
<p>View inputs as arrays with at least two dimensions.</p>
<p>Parameters:    </p>
<p>arys1, arys2, … : array_like</p>
<p>One or more array-like sequences. Non-array inputs are converted to arrays. Arrays that already have two or more dimensions are preserved.</p>
<p>​</p>
<p>Returns:    </p>
<p>res, res2, … : ndarray</p>
<p>An array, or list of arrays, each with a.ndim &gt;= 2. Copies are avoided where possible, and views with two or more dimensions are returned</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol>
<li><p>测试神经网络</p>
<ul>
<li><p>引入测试数据集 <a href="http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sklearn.datasets.load_digits(n_class=<span class="number">10</span>, return_X_y=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>其有10个类，总共1797个用例，每个用例是一个8*8的图片。</p>
</li>
<li><p>标记分类 <a href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelBinarizer.html" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">preprocessing</span>.<span class="title">LabelBinarizer</span><span class="params">(neg_label=<span class="number">0</span>, pos_label=<span class="number">1</span>, sparse_output=False)</span></span></div></pre></td></tr></table></figure>
<p>简而言之，该方法把label分成两类，即进行二值化。</p>
<p>其有一个方法:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fit_transform(X, y=<span class="keyword">None</span>, **fit_params)</div></pre></td></tr></table></figure>
<blockquote>
<p>Parameters:<br>X : numpy array of shape [n_samples, n_features]<br>Training set.<br>y : numpy array of shape [n_samples]<br>Target values.</p>
<p>​</p>
<p>Returns:<br>X_new : numpy array of shape [n_samples, n_features_new]<br>Transformed array.</p>
</blockquote>
</li>
<li><p>获取某个维度的极值的索引</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.argmax(a, axis=<span class="keyword">None</span>, out=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>如果<code>axis</code>不给定，则把a视作扁平化数组即比较全部元素，返回最大值索引。</p>
<p>如果指定<code>axis</code>，则只对对应的轴进行操作。</p>
<p>关于<code>axis</code>困扰了很久，总结如下：</p>
<p><strong>axis=0代表跨行（down)，而axis=1代表跨列（across)！也就是说轴用来为超过一维的数组定义的属性，二维数据拥有两个轴：第0轴沿着行的垂直往下，第1轴沿着列的方向水平延伸。</strong></p>
</li>
<li><p>测试代码如下</p>
</li>
<li><p>运行结果</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-07-19_110229.png" alt=""></p>
<p>可以看到，第一个是混淆矩阵，其意义已经在前面说明。第二个就是图表化分析结果。第一列精度的意思是（都以第一行为例），预测为0的用用例中，真实值也为0的比例为1。第二列recall的意思相反，是真实为0的用例中，预测为0的比例。</p>
<p>可见，precison可以由上述混淆矩阵中，<strong>对角线元素/该列累计和</strong>得到。而recall可以由<strong>对角线元素/该行累计和</strong>得到。</p>
</li>
</ul>
</li>
</ol>
<h1 id="监督学习——回归"><a href="#监督学习——回归" class="headerlink" title="监督学习——回归"></a>监督学习——回归</h1><p>首先回顾一下，回归和分类的区别。</p>
<p>回归(regression) Y变量为<strong>连续数值型</strong>(continuous numerical variable)，如：房价，人数，降雨量</p>
<p>分类(Classification): Y变量为<strong>类别型</strong>(categorical variable)，如：颜色类别，电脑品牌，有无信誉</p>
<h2 id="简单线性回归-Simple-Linear-Regression"><a href="#简单线性回归-Simple-Linear-Regression" class="headerlink" title="简单线性回归(Simple Linear Regression)"></a>简单线性回归(Simple Linear Regression)</h2><p>很多做决定过过程通常是根据两个或者多个变量之间的关系，回归分析(regression analysis)用来建立方程模拟两个或者多个变量之间如何关联</p>
<ol>
<li><p>简单线性回归介绍</p>
<ul>
<li>简单线性回归包含一个自变量(x)和一个因变量(y) </li>
<li>以上两个变量的关系用一条直线来模拟</li>
<li>如果包含两个以上的自变量，则称作<u>多元回归分析(multiple regression)</u></li>
</ul>
</li>
<li><p>最小二乘法</p>
<p>计算简单线性回归方程时，只需要用到很熟悉的最小二乘法即可。$\hat y=b1*x+b0$</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/69853af4b84a7f3597a642a56b9ca9ab5a1c63d0" alt=""></p>
<p>求出b1之后根据$b0=\bar y-\overline x*b1$即可求出b0</p>
</li>
</ol>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>与简单线性回归相对比，有多个自变量。</p>
<p>$\hat y=b<em>{1}*x</em>{1}+b<em>{2}*x</em>{2}+…+b_{0}$</p>
<p><em>需要注意，如果如果自变量中有分类型变量(categorical data) ,比如车型信息，A、B、C，只需要新加入三个x分类，把这三种车型映射到对应的x分量。这样就变成了多了3个x分量的问题。</em></p>
<ol>
<li><p>机器学习库介绍</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">sklearn</span>.<span class="title">linear_model</span>.<span class="title">LinearRegression</span><span class="params">(fit_intercept=True, normalize=False, copy_X=True, n_jobs=<span class="number">1</span>)</span></span></div></pre></td></tr></table></figure>
<p>其是最小二乘法的封装。<a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.predict" target="_blank" rel="noopener">详细文档</a></p>
<p>这里用到了两个属性，<code>coef_</code>表示回归方程中系数的序列，<code>intercept_</code>是截距。</p>
</li>
<li><p>代码实现</p>
<p>​</p>
</li>
</ol>
<h2 id="非线性回归"><a href="#非线性回归" class="headerlink" title="非线性回归"></a>非线性回归</h2><h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><ol>
<li><p>梯度下降法基本概念</p>
<ul>
<li><p>步长（Learning rate）：步长决定了在梯度下降迭代的过程中，每一步沿梯度负方向前进的长度。用上面下山的例子，步长就是在当前这一步所在位置沿着最陡峭最易下山的位置走的那一步的长度。</p>
</li>
<li><p>特征（feature）：指的是样本中输入部分，比如样本（x0,y0）,（x1,y1）,则样本特征为x，样本输出为y。</p>
</li>
<li><p>假设函数（hypothesis function）：在监督学习中，为了拟合输入样本，而使用的假设函数，记为hθ(x)。比如对于样本（xi,yi）(i=1,2,…n),可以采用拟合函数如下： hθ(x) = θ0+θ1x。</p>
</li>
<li><p>损失函数（loss function）：为了评估模型拟合的好坏，通常用损失函数来度量拟合的程度。损失函数极小化，意味着拟合程度最好，对应的模型参数即为最优参数。在线性回归中，损失函数通常为样本输出和假设函数的差取平方。比如对于样本（xi,yi）(i=1,2,…n),采用线性回归，损失函数为：</p>
<p>$J(\theta_0, \theta<em>1) = \sum\limits</em>{i=1}^{m}(h_\theta(x_i) - y_i)^2$</p>
<p>其中$x_i$表示样本特征x的第i个元素，$y<em>i$表示样本输出y的第i个元素，$h</em>\theta(x_i)$为假设函数。</p>
</li>
</ul>
</li>
<li><p>批量梯度下降法（Batch Gradient Descent）</p>
<p> $\theta_i = \theta<em>i - \alpha\sum\limits</em>{j=0}^{m}(h_\theta(x_0^{j}, x_1^{j}, …x_n^{j}) - y_j)x_i^{j}$</p>
<p>由于我们有m个样本，这里求梯度的时候就用了所有m个样本的梯度数据。</p>
</li>
<li><p>随机梯度下降法（Stochastic Gradient Descent）</p>
<p>其实和批量梯度下降法原理类似，区别在与求梯度时没有用所有的m个样本的数据，而是仅仅选取一个样本j来求梯度。<br>$$<br>\theta_i = \theta<em>i - \alpha (h</em>\theta(x_0^{j}, x_1^{j}, …x_n^{j}) - y_j)x_i^{j}<br>$$</p>
</li>
<li><p>二者之间对比总结</p>
<p>批量梯度下降：最小化所有训练样本的损失函数，使得最终求解的是全局的最优解，即求解的参数是使得风险函数最小，但是对于大规模样本问题效率低下。</p>
<p>随机梯度下降：最小化每条样本的损失函数，虽然不是每次迭代得到的损失函数都向着全局最优方向， 但是大的整体的方向是向全局最优解的，最终的结果往往是在全局最优解附近，适用于大规模训练样本情况。</p>
<p><strong>两者的关系可以这样理解：随机梯度下降方法以损失很小的一部分精确度和增加一定数量的迭代次数为代价，换取了总体的优化效率的提升。增加的迭代次数远远小于样本的数量。</strong></p>
</li>
<li><p>梯度下降法的向量描述<br>$$<br>J(θ)=\frac {1}{2}(X<em>θ−Y)^T(X</em>θ−Y)<br>$$</p>
<p>$$<br>\frac {\partial J(θ)}{\partial \theta}=X^T(X_θ−Y)<br>$$</p>
<p>$$<br>θ=θ−αX^T(X_θ−Y)<br>$$</p>
</li>
<li><p>矩阵求导知识补充</p>
<p><img src="http://images.cnitblog.com/blog/487468/201402/261219153897663.gif" alt=""></p>
<p>​</p>
<p><img src="http://images.cnitblog.com/blog/487468/201402/261219289804718.gif" alt=""></p>
<p><img src="http://images.cnitblog.com/blog/487468/201402/261219434733214.gif" alt=""></p>
</li>
</ol>
<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><ol>
<li><p>基本原理</p>
<p>Logistic Regression和Linear Regression的原理是相似的，可以简单的描述为这样的过程：</p>
<ul>
<li>找一个合适的预测函数（Andrew Ng的公开课中称为hypothesis），一般表示为h函数，该函数就是我们需要找的分类函数，它用来预测输入数据的判断结果。这个过程时非常关键的，需要对数据有一定的了解或分析，知道或者猜测预测函数的“大概”形式，比如是线性函数还是非线性函数。</li>
<li>构造一个Cost函数（损失函数），该函数表示预测的输出（h）与训练数据类别（y）之间的偏差，可以是二者之间的差（h-y）或者是其他的形式。综合考虑所有训练数据的“损失”，将Cost求和或者求平均，记为J(θ)函数，表示所有训练数据预测值与实际类别的偏差。</li>
<li>显然，J(θ)函数的值越小表示预测函数越准确（即h函数越准确），所以这一步需要做的是找到J(θ)函数的最小值。找函数的最小值有不同的方法，Logistic Regression实现时有的是梯度下降法（Gradient Descent）。</li>
</ul>
</li>
</ol>
<h3 id="回归中的相关性"><a href="#回归中的相关性" class="headerlink" title="回归中的相关性"></a>回归中的相关性</h3><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><ol>
<li><p>协方差（covariance）</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7331bb9b6e36128d1d9cb735b11b65427929105d" alt=""></p>
<p>​</p>
<p>协方差是一个反映两个随机变量相关程度的指标，如果一个变量跟随着另一个变量同时变大或者变小，那么这两个变量的协方差就是正值，反之相反。</p>
<p>而 <strong>Pearson correlation coefficient</strong>是衡量两个变量的线性相关程度，值取[-1,1]。+1表示完全正相关，0表示不是线性相关，-1表示完全负相关。</p>
<p>其定义为协方差除以它们标准差之积。</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f76ccfa7c2ed7f5b085115086107bbe25d329cec" alt=""></p>
<p>​</p>
</li>
<li><p>决定系数</p>
<p>决定系数（英语：coefficient of determination，记为R2或r2）在统计学中用于度量因变量的变异中可由自变量解释部分所占的比例，以此来判断统计模型的解释力。</p>
<p>比如，R平方为0.8，则表示回归关系可以解释因变量80%的变异。换句话说，如果我们能控制自变量不变，则因变量的变异程度会减少80%。</p>
<p>对于简单线性回归而言，<strong>决定系数为样本相关系数的平方</strong>。当加入其他回归自变量后，决定系数相应地变为多重相关系数的平方。</p>
<p>​</p>
<p>假设一数据集包括y1,…,yn共n个观察值，相对应的模型预测值分别为f1,…,fn。定义残差$e_i = y_i − f<em>i$，平均观察值为：$\bar y=\frac 1 n\sum </em>{i=1}^ny_i$</p>
<p>于是得到总平方和（total sum of squares）$SS<em>{tot}=\sum </em>{i=1} ^n(y<em>i-\bar y)^2$，所以回归平方和（regression sum of squares）为$SS</em>{reg}=\sum _{i=1}^n(f_i-\bar y)^2$。</p>
<p>另外，残差平方和（sum of squares of residuals）为$SS<em>{res}=\sum </em>{i=1} ^n(y_i-f<em>i)^2=\sum </em>{i=1}^ne_i^2$</p>
<p>所以，决定系数为：</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fed29779d54adeccdec58f0894870c680f3d6b5b" alt=""></p>
<p>由于$R^2$会随着自变量个数增加而虚假的增加，所以修正的$R^2$为：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f6e88c86fcecf4cfb5418760909bbe2d499bd1aa" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>调整后的$R^2$值可以为负，其始终小于等于$R^2$。其中，n是样本数目，p是自变量个数。</p>
</li>
</ol>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ol>
<li><p>用到的函数库总结</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numpy.polyfit(x, y, deg, rcond=<span class="keyword">None</span>, full=<span class="keyword">False</span>, w=<span class="keyword">None</span>, cov=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>最小二乘法多项式拟合。拟合形式为<code>p(x) = p[0] * x**deg + ... + p[deg]</code>，返回最后p的向量形式。</p>
<p>这里只用到了<code>deg</code>代表最高次数。其余见<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.polyfit.html?highlight=numpy%20polyfit#numpy.polyfit" target="_blank" rel="noopener">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">numpy</span>.<span class="title">poly1d</span><span class="params">(c_or_r, r=False, variable=None)</span></span></div></pre></td></tr></table></figure>
<p>一个很方便的类，它对一维多项式进行了封装，第一个参数代表了多项式系数。<code>poly1d([1, 2, 3])</code>代表$x^2+2x+3$，如果<code>r=True</code>，则代表$(x-1)(x-2)(x-3)$。<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.poly1d.html?highlight=poly1d#numpy.poly1d" target="_blank" rel="noopener">文档</a></p>
</li>
<li><p>实现代码</p>
<p>​</p>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（八）]]></title>
      <url>https://www.prime666.com/2017/07/02/pat%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>PAT甲级1071——1080</p>
<a id="more"></a>
<h1 id="1071——1080"><a href="#1071——1080" class="headerlink" title="1071——1080"></a>1071——1080</h1><h2 id="1071-散列表"><a href="#1071-散列表" class="headerlink" title="1071[散列表]"></a>1071[散列表]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1071" target="_blank" rel="noopener">Speech Patterns</a></p>
<p>思路：<strong>建立字典查询即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> input,tmp;</div><div class="line">    getline(<span class="built_in">cin</span>,input);</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; dict;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;input.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">isalnum</span>(input[i]))</div><div class="line">        &#123;</div><div class="line">            input[i]=<span class="built_in">tolower</span>(input[i]);</div><div class="line">            tmp+=input[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(tmp.size()&gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                dict[tmp]++;</div><div class="line">            &#125;</div><div class="line">            tmp=<span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(tmp.size()&gt;<span class="number">0</span>)<span class="comment">//注意最后一次要判断一下，不然最后的单词加不进去了。</span></div><div class="line">        dict[tmp]++;</div><div class="line">    <span class="keyword">int</span> maxn=<span class="number">-1</span>;</div><div class="line">    <span class="built_in">string</span> res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; d:dict)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(d.second&gt;maxn)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            res=d.first;</div><div class="line">            maxn=d.second;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="string">" "</span>&lt;&lt;dict[res];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1072-多重Dijkstra"><a href="#1072-多重Dijkstra" class="headerlink" title="1072[多重Dijkstra]"></a>1072[多重Dijkstra]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1072" target="_blank" rel="noopener">Gas Station</a></p>
<p>思路：<strong>把所有居民楼和加油站都作为结点，其中加油站编号N+1开始。然后对每个加油站，运用Dijkstra求其到所有居民楼的距离，然后找到一个离所有居民楼最短距离中最远的那一个即可。顺便计算平均距离。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> G[<span class="number">1020</span>][<span class="number">1020</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">1020</span>];</div><div class="line"><span class="keyword">int</span> dis[<span class="number">1020</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,K,Ds;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;N,&amp;M,&amp;K,&amp;Ds);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+<span class="number">1020</span>*<span class="number">1020</span>,inf);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;<span class="comment">//加油站编号为[N+1,</span></div><div class="line">        <span class="keyword">int</span> u,v,d;</div><div class="line">        <span class="built_in">string</span> tmp_u,tmp_v;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;tmp_u&gt;&gt;tmp_v&gt;&gt;d;</div><div class="line">        <span class="keyword">if</span>(tmp_u[<span class="number">0</span>]==<span class="string">'G'</span>)</div><div class="line">        &#123;</div><div class="line">            u=stoi(tmp_u.substr(<span class="number">1</span>))+N;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            u=stoi(tmp_u);</div><div class="line">        <span class="keyword">if</span>(tmp_v[<span class="number">0</span>]==<span class="string">'G'</span>)</div><div class="line">            v=stoi(tmp_v.substr(<span class="number">1</span>))+N;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            v=stoi(tmp_v);</div><div class="line">        G[u][v]=d;</div><div class="line">        G[v][u]=d;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res_id=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">double</span> res_dis=inf,min_dis=<span class="number">-1</span>;<span class="comment">//平均距离,离居民的最近距离</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index=N+<span class="number">1</span>;index&lt;=N+M;++index)</div><div class="line">    &#123;<span class="comment">//对每个加油站求其到任意居民楼的最短距离</span></div><div class="line">        fill(visited,visited+<span class="number">1020</span>, <span class="literal">false</span>);</div><div class="line">        fill(dis,dis+<span class="number">1020</span>,inf);</div><div class="line">        dis[index]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N+M;++i)</div><div class="line">        &#123;<span class="comment">//松弛N+M轮</span></div><div class="line">            <span class="keyword">int</span> u=<span class="number">-1</span>,min_d=inf;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N+M;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dis[j]&lt;min_d&amp;&amp;!visited[j])</div><div class="line">                &#123;</div><div class="line">                    u=j;</div><div class="line">                    min_d=dis[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            visited[u]=<span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=N+M;v++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(!visited[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(G[u][v]+dis[u]&lt;dis[v])</div><div class="line">                        dis[v]=G[u][v]+dis[u];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> tmp_dis=<span class="number">0</span>,tmp_min=inf;<span class="comment">//到所有居民的平均距离,最近距离</span></div><div class="line">        <span class="keyword">bool</span> valid=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">        &#123;</div><div class="line">            tmp_dis+=dis[i];</div><div class="line">            <span class="keyword">if</span>(dis[i]&gt;Ds)</div><div class="line">            &#123;</div><div class="line">                valid=<span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dis[i]&lt;tmp_min)</div><div class="line">            &#123;</div><div class="line">                tmp_min=dis[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(valid)</div><div class="line">        &#123;<span class="comment">//这个加油站位置距离可以服务全部居民</span></div><div class="line">            tmp_dis/=N;</div><div class="line">            <span class="keyword">if</span>(tmp_min&gt;min_dis)<span class="comment">//优先找离居民的最短距离最大的</span></div><div class="line">            &#123;</div><div class="line">                res_dis=tmp_dis;</div><div class="line">                res_id=index-N;</div><div class="line">                min_dis=tmp_min;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp_min==min_dis&amp;&amp;tmp_dis&lt;res_dis)<span class="comment">//次之找平均距离最短的</span></div><div class="line">            &#123;</div><div class="line">                res_id=index-N;</div><div class="line">                res_dis=tmp_dis;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(res_id==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"G%d\n"</span>,res_id);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.1lf %.1lf"</span>,min_dis,res_dis);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1073-科学计数法"><a href="#1073-科学计数法" class="headerlink" title="1073[科学计数法]"></a>1073[科学计数法]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1073" target="_blank" rel="noopener">Scientific Notation</a></p>
<p>思路：<strong>和以前的科学计数法思路相近，先求指数，然后看情况补0，最后插入小数点。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/2.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> sign;</div><div class="line">    <span class="built_in">string</span> in,res;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;in;</div><div class="line">    sign= (in[<span class="number">0</span>]==<span class="string">'+'</span>);</div><div class="line">    <span class="keyword">int</span> exponent=<span class="number">0</span>;<span class="comment">//题目说了指数不超过9999</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;in.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(in[i]==<span class="string">'E'</span>)</div><div class="line">        &#123;</div><div class="line">            exponent=stoi(in.substr(i+<span class="number">1</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(in[i]!=<span class="string">'.'</span>)</div><div class="line">            res+=in[i];</div><div class="line">    &#125;<span class="comment">//res保存系数部分，不保存小数点。</span></div><div class="line">    <span class="keyword">if</span>(exponent&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(exponent&gt;res.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            res.insert(res.size(),exponent-(res.size()<span class="number">-1</span>),<span class="string">'0'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exponent&lt;res.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            res.insert(<span class="number">1</span>+exponent,<span class="number">1</span>,<span class="string">'.'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exponent&lt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        exponent=-exponent;</div><div class="line">        res.insert(<span class="number">0</span>,exponent,<span class="string">'0'</span>);</div><div class="line">        res.insert(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'.'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        res.insert(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'.'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!sign)</div><div class="line">        res=<span class="string">'-'</span>+res;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;res;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1074-翻转链表-reverse函数的使用"><a href="#1074-翻转链表-reverse函数的使用" class="headerlink" title="1074[翻转链表/reverse函数的使用]"></a>1074[翻转链表/reverse函数的使用]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1074" target="_blank" rel="noopener">Reversing Linked List</a></p>
<p>思路：<strong>目前遇到的所有链表题都一个共性，每个结点地址和值是一一对应的，其它的可变，所以，完全可以用数组模拟，标准库reverse函数一上，秒杀。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/2.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> address;<span class="comment">//5位</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> start,N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;start,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; in(<span class="number">100000</span>),res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,addr;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;addr);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;in[addr].val,&amp;in[addr].next);</div><div class="line">        in[addr].address=addr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> begin=start;begin!=<span class="number">-1</span>;begin=in[begin].next)</div><div class="line">        res.push_back(in[begin]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it=res.begin();it&lt;res.end();it+=K)</div><div class="line">        <span class="keyword">if</span>(it+K&lt;=res.end())</div><div class="line">            reverse(it,it+K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==res.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>,res[i].address,res[i].val);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,res[i].address,res[i].val,res[i+<span class="number">1</span>].address);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1075-多阶段排序"><a href="#1075-多阶段排序" class="headerlink" title="1075[多阶段排序]"></a>1075[多阶段排序]</h2><p>思路：<strong>还是老生常谈的排序，注意这个题几个点：未提交任何题目，或者提交的都没通过编译的不输出！否则就算0分也要输出。我这里用了个标志位valid，所以排序时要先按valid排序再根据id排，不然可能提前遇到了valid为false的，但是后面还有valid为true的呢！另外，第一个元素不用，排序的时候不要再排它了！！！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/2.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> People</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> score[<span class="number">6</span>];<span class="comment">//5道题得分情况</span></div><div class="line">    <span class="keyword">int</span> total_score;</div><div class="line">    <span class="keyword">int</span> perfect_num;<span class="comment">//完美通过的题目数量;</span></div><div class="line">    <span class="keyword">int</span> rank;<span class="comment">//最后的排名</span></div><div class="line">    <span class="keyword">bool</span> valid;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> People&amp;o1,<span class="keyword">const</span> People&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.total_score!=o2.total_score)</div><div class="line">        <span class="keyword">return</span> o1.total_score&gt;o2.total_score;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(o1.perfect_num!=o2.perfect_num)</div><div class="line">        <span class="keyword">return</span> o1.perfect_num&gt;o2.perfect_num;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(o1.valid!=o2.valid)<span class="comment">//必须加上这个，不然最后一个过不去</span></div><div class="line">        <span class="keyword">return</span> o1.valid&gt;o2.valid;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> o1.id&lt;o2.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;K,&amp;M);</div><div class="line">    <span class="keyword">int</span> p[<span class="number">10</span>];<span class="comment">//五道题的分值</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</div><div class="line">    <span class="built_in">vector</span>&lt;People&gt; in(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        fill(in[i].score,in[i].score+<span class="number">6</span>,<span class="number">-2</span>);<span class="comment">//一开始得分全部是-2</span></div><div class="line">        <span class="comment">/*in[i].total_score=0;</span></div><div class="line">        in[i].valid=false;</div><div class="line">        in[i].perfect_num=0;*/</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id,problem_id,score;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;id,&amp;problem_id,&amp;score);</div><div class="line">        <span class="keyword">if</span>(in[id].score[problem_id]&gt;=score)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            in[id].id=id;</div><div class="line">            <span class="keyword">if</span>(score&gt;=<span class="number">0</span>)</div><div class="line">            &#123;<span class="comment">//这次成绩有效</span></div><div class="line">                in[id].valid=<span class="literal">true</span>;<span class="comment">//有一个得分为正表示有效</span></div><div class="line">                <span class="keyword">if</span>(in[id].score[problem_id]&gt;<span class="number">0</span>)</div><div class="line">                    in[id].total_score+=score-in[id].score[problem_id];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    in[id].total_score+=score;</div><div class="line">            &#125;</div><div class="line">            in[id].score[problem_id]=score;</div><div class="line">            <span class="keyword">if</span>(score==p[problem_id])</div><div class="line">            &#123;</div><div class="line">                in[id].perfect_num++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(in.begin()+<span class="number">1</span>,in.end(),cmp);</div><div class="line">    in[<span class="number">1</span>].rank=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;in.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!in[i].valid)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(in[i].total_score==in[i<span class="number">-1</span>].total_score)</div><div class="line">            in[i].rank=in[i<span class="number">-1</span>].rank;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            in[i].rank=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;in.size();++k)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!in[k].valid)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %05d %d "</span>,in[k].rank,in[k].id,in[k].total_score);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(in[k].score[i]&gt;=<span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,in[k].score[i]);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(in[k].score[i]==<span class="number">-1</span>)<span class="comment">//-1表示没有通过编译</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">else</span><span class="comment">//等于-2表示从来没提交过</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">            <span class="keyword">if</span>(i!=K)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1076-限制最大深度的BFS"><a href="#1076-限制最大深度的BFS" class="headerlink" title="1076[限制最大深度的BFS]"></a>1076[限制最大深度的BFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1076" target="_blank" rel="noopener">Forwards on Weibo</a></p>
<p>和1004的背景相似。</p>
<p>思路：<strong>一开始输入只给出了每个人关注的用户，只需要转换一下思路就可以变成每个人的follower。运用BFS对有向图进行广度优先遍历即可，注意需要判断深度。另外，一开始的起点深度为0，且起点发的文章不计入统计。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,L;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">1005</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> layer;<span class="comment">//第几层</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;<span class="comment">//返回总共转发的次数</span></div><div class="line">    fill(visited,visited+<span class="number">1005</span>, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    <span class="comment">//头结点入队列</span></div><div class="line">    Node top;</div><div class="line">    top.id=u;</div><div class="line">    top.layer=<span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>.push_back(top);</div><div class="line">    visited[u]=<span class="literal">true</span>;<span class="comment">//visited保证每个元素只进一次队列</span></div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())</div><div class="line">    &#123;</div><div class="line">        top=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[top.id].size();i++)</div><div class="line">        &#123;</div><div class="line">            Node next;</div><div class="line">            <span class="keyword">if</span>(!visited[G[top.id][i]]&amp;&amp;top.layer&lt;L)</div><div class="line">            &#123;</div><div class="line">                next.id=G[top.id][i];</div><div class="line">                next.layer=top.layer+<span class="number">1</span>;</div><div class="line">                <span class="built_in">queue</span>.push_back(next);</div><div class="line">                visited[G[top.id][i]]=<span class="literal">true</span>;</div><div class="line">                res++;<span class="comment">//不能再pop的时候统计，因为这样起点也算进来了，起点不算的。</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;L);</div><div class="line">    G.resize(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> id;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">            G[id].push_back(i);</div><div class="line">            <span class="comment">/*注意不是G[i].push_back(id)，只有这样得到的G[id]才是每个id的follower*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> query;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;query);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,BFS(query));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1077-最长字符串后缀"><a href="#1077-最长字符串后缀" class="headerlink" title="1077[最长字符串后缀]"></a>1077[最长字符串后缀]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1077" target="_blank" rel="noopener">Kuchiguse</a></p>
<p>思路：<strong>后缀比对起来比较麻烦，在输入一个字符串后顺便反转它就好了。然后比对前缀，一开始res等于s[0]，然后比对s[1]到s[N]，不相等就截取一段。最后看res是否是空串，不是就倒序输出。</strong></p>
<p>一开始直接用后缀比较了，结果最后一个用例过不去，，不知道为什么。。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    getchar();<span class="comment">//吃掉换行符</span></div><div class="line">    <span class="built_in">string</span> s[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        getline(<span class="built_in">cin</span>,s[i]);</div><div class="line">        reverse(s[i].begin(),s[i].end());</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> res=s[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> end=min((<span class="keyword">int</span>)res.size(),(<span class="keyword">int</span>)s[i].size());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;end;k++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(res[k]!=s[i][k])</div><div class="line">            &#123;</div><div class="line">                res=res.substr(<span class="number">0</span>,k);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(res.size()==<span class="number">0</span>)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"nai"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it=res.rbegin();it!=res.rend();it++)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;*it;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1078-散列表二次探测"><a href="#1078-散列表二次探测" class="headerlink" title="1078[散列表二次探测]"></a>1078[散列表二次探测]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1078" target="_blank" rel="noopener">Hashing</a></p>
<p>思路：<strong>如果知道Quadratic probing是二次探测就没问题了，此处只要求递增的二次探测。</strong></p>
<p><strong>记住，这种题没必要真的插入数字，只有记录有没有即可，所以果断用bool</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> M)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(M&lt;=<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(M);i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(M%i==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> M,N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N);</div><div class="line">    <span class="keyword">while</span>(!isprime(M))</div><div class="line">    &#123;</div><div class="line">        M++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span> &gt; a(M, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num,pos;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        pos=num%M;</div><div class="line">        <span class="keyword">if</span>(!a[pos])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,pos);</div><div class="line">            a[pos]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">bool</span> flag=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> step=<span class="number">1</span>;step&lt;M;step++)</div><div class="line">            &#123;</div><div class="line">                pos=(num+step*step)%M;</div><div class="line">                <span class="keyword">if</span>(!a[pos])</div><div class="line">                &#123;</div><div class="line">                    flag=<span class="literal">true</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d"</span>,pos);</div><div class="line">                    a[pos]=<span class="literal">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!flag)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i!=N<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1079-树的DFS"><a href="#1079-树的DFS" class="headerlink" title="1079[树的DFS]"></a>1079[树的DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1079" target="_blank" rel="noopener">Total Sales of Supply Chain</a></p>
<p>思路：<strong>经典题目，树的DFS遍历。用product数组保存零售商的货品数量。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> total_sale=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> R;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100000</span>];</div><div class="line"><span class="keyword">int</span> product[<span class="number">100000</span>];<span class="comment">//记录零售商i的商品数量</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">double</span> price)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(tree[u].size()==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        total_sale+=product[u]*price;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();++i)</div><div class="line">            DFS(tree[u][i],(<span class="number">1</span>+R)*price);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="keyword">double</span> P;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lf %lf"</span>,&amp;N,&amp;P,&amp;R);</div><div class="line">    R/=<span class="number">100</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;product[i]);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> id;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">            tree[i].push_back(id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>,P);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.1lf"</span>,total_sale);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1080-复杂排序"><a href="#1080-复杂排序" class="headerlink" title="1080[复杂排序]"></a>1080[复杂排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1080" target="_blank" rel="noopener">Graduate Admission</a></p>
<p>思路：<strong>还是经典的排序，我一开始的思路是用rank和target记录上一个人的排名和选的学校，然后看下一个人是不是一样，一样就录取（用于学校名额满的情况），但是这种有问题，虽然ac了，但是确实不符合题意，比如如下用例</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">0</span></div><div class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">1</span></div><div class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<p>按理说，0号和2号都应该进入学校0才对，但是如果用这样2号就会进不去！</p>
<p><strong>所以，更健全的思路是用一个结构体保存一个一个学校的最后一名，这样就没问题了。所以，这种可能会”交叉”的情况，还是应该仔细考虑是用一个变量保存还是用一组变量保存。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> Ge,Gi;</div><div class="line">    <span class="keyword">int</span> choice[<span class="number">5</span>];</div><div class="line">    <span class="keyword">int</span> rank;</div><div class="line">    <span class="keyword">int</span> total;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> School</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> last_rank;<span class="comment">//招收的最后一个的学生的排名</span></div><div class="line">    <span class="keyword">int</span> num;<span class="comment">//收多少人</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; receive;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp; o1,<span class="keyword">const</span> Student&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.total!=o2.total)</div><div class="line">        <span class="keyword">return</span> o1.total&gt;o2.total;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(o1.Ge!=o2.Ge)</div><div class="line">        <span class="keyword">return</span> o1.Ge&gt;o2.Ge;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> o1.id&lt;o2.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;M,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;School&gt; sch(M);</div><div class="line">    <span class="built_in">vector</span>&lt;Student&gt; stu(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sch[i].num);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;stu[i].Ge,&amp;stu[i].Gi);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].choice[j]);</div><div class="line">        stu[i].total=(stu[i].Ge+stu[i].Gi)/<span class="number">2</span>;</div><div class="line">        stu[i].id=i;</div><div class="line">    &#125;</div><div class="line">    sort(stu.begin(),stu.end(),cmp);</div><div class="line">    stu[<span class="number">0</span>].rank=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(stu[i].total==stu[i<span class="number">-1</span>].total&amp;&amp;stu[i].Ge==stu[i<span class="number">-1</span>].Ge)</div><div class="line">        &#123;</div><div class="line">            stu[i].rank=stu[i<span class="number">-1</span>].rank;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            stu[i].rank=i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> prefer;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;++j)</div><div class="line">        &#123;</div><div class="line">            prefer=stu[i].choice[j];</div><div class="line">            <span class="keyword">if</span>(sch[prefer].num&gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                sch[prefer].num--;</div><div class="line">                sch[prefer].receive.push_back(stu[i].id);</div><div class="line">                sch[prefer].last_rank=stu[i].rank;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sch[prefer].last_rank==stu[i].rank)</div><div class="line">            &#123;</div><div class="line">                sch[prefer].receive.push_back(stu[i].id);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(sch[i].receive.size()==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            sort(sch[i].receive.begin(),sch[i].receive.end());</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sch[i].receive.size();++j)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,sch[i].receive[j]);</div><div class="line">                <span class="keyword">if</span>(j!=sch[i].receive.size()<span class="number">-1</span>)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后把虽然ac但是不对的代码也附上吧</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> Ge,Gi;</div><div class="line">    <span class="keyword">int</span> choice[<span class="number">5</span>];</div><div class="line">    <span class="keyword">int</span> rank;</div><div class="line">    <span class="keyword">int</span> total;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp; o1,<span class="keyword">const</span> Student&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.total!=o2.total)</div><div class="line">        <span class="keyword">return</span> o1.total&gt;o2.total;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> o1.Ge&gt;o2.Ge;<span class="comment">//把这个换成下面注释掉的也一样！！！</span></div><div class="line">    <span class="comment">/*else if(o1.Ge!=o2.Ge)</span></div><div class="line">        return o1.Ge&gt;o2.Ge;</div><div class="line">    else return o1.id&lt;o2.id;*/</div><div class="line">&#125; <span class="comment">/*如果一个元素既不大于又不小于另一个元素，它们就相等*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;M,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; quota(M);<span class="comment">//各个学校名额</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res[M];</div><div class="line">    <span class="built_in">vector</span>&lt;Student&gt; stu(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;quota[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;stu[i].Ge,&amp;stu[i].Gi);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;stu[i].choice[j]);</div><div class="line">        stu[i].total=(stu[i].Ge+stu[i].Gi)/<span class="number">2</span>;</div><div class="line">        stu[i].id=i;</div><div class="line">    &#125;</div><div class="line">    sort(stu.begin(),stu.end(),cmp);</div><div class="line">    stu[<span class="number">0</span>].rank=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(stu[i].total==stu[i<span class="number">-1</span>].total&amp;&amp;stu[i].Ge==stu[i<span class="number">-1</span>].Ge)</div><div class="line">        &#123;</div><div class="line">            stu[i].rank=stu[i<span class="number">-1</span>].rank;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            stu[i].rank=i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> rank=<span class="number">-1</span>,target=<span class="number">-1</span>;<span class="comment">//记录上一个人的排名和他选的学校</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> prefer=stu[i].choice[j];</div><div class="line">            <span class="keyword">if</span>(quota[prefer]&gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                rank=stu[i].rank;</div><div class="line">                target=prefer;</div><div class="line">                quota[prefer]--;</div><div class="line">                res[prefer].push_back(stu[i].id);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].rank==rank&amp;&amp;prefer==target)</div><div class="line">            &#123;</div><div class="line">                res[prefer].push_back(stu[i].id);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(res[i].size()==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            sort(res[i].begin(),res[i].end());</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;res[i].size();++j)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i][j]);</div><div class="line">                <span class="keyword">if</span>(j!=res[i].size()<span class="number">-1</span>)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（七）]]></title>
      <url>https://www.prime666.com/2017/06/30/pat%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>1061——1070</p>
<a id="more"></a>
<h1 id="1061——1070"><a href="#1061——1070" class="headerlink" title="1061——1070"></a>1061——1070</h1><h2 id="1061-公共字符"><a href="#1061-公共字符" class="headerlink" title="1061[公共字符]"></a>1061[公共字符]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1061" target="_blank" rel="noopener">Dating</a></p>
<p>思路：<strong>这个题目中的公共字符相对简单的，它们的下标是一致的，所以直接同步遍历即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> a,b,c,d;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</div><div class="line">    <span class="keyword">auto</span> len1=min(a.size(),b.size());</div><div class="line">    <span class="keyword">auto</span> len2=min(c.size(),d.size());</div><div class="line">    <span class="keyword">int</span> res[<span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==b[i]&amp;&amp;a[i]&gt;=<span class="string">'A'</span>&amp;&amp;a[i]&lt;=<span class="string">'G'</span>)</div><div class="line">        &#123;</div><div class="line">            res[<span class="number">0</span>]=a[i]-<span class="string">'A'</span>;<span class="comment">//一周内的第几天(0~6)</span></div><div class="line">            next=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=next+<span class="number">1</span>;i&lt;len1;i++)</div><div class="line">        <span class="keyword">if</span>(a[i]==b[i]&amp;&amp;(a[i]&gt;=<span class="string">'0'</span>&amp;&amp;a[i]&lt;=<span class="string">'9'</span>||a[i]&gt;=<span class="string">'A'</span>&amp;&amp;a[i]&lt;=<span class="string">'N'</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&gt;=<span class="string">'0'</span>&amp;&amp;a[i]&lt;=<span class="string">'9'</span>)</div><div class="line">                res[<span class="number">1</span>]=a[i]-<span class="string">'0'</span>;<span class="comment">//几点</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">                res[<span class="number">1</span>]=a[i]-<span class="string">'A'</span>+<span class="number">10</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(c[i]==d[i]&amp;&amp;(c[i]&gt;=<span class="string">'A'</span>&amp;&amp;c[i]&lt;=<span class="string">'Z'</span>||c[i]&gt;=<span class="string">'a'</span>&amp;&amp;c[i]&lt;=<span class="string">'z'</span>))</div><div class="line">        &#123;</div><div class="line">            res[<span class="number">2</span>]=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> week[]=&#123;<span class="string">"MON"</span>,<span class="string">"TUE"</span>,<span class="string">"WED"</span>,<span class="string">"THU"</span>,<span class="string">"FRI"</span>,<span class="string">"SAT"</span>,<span class="string">"SUN"</span>&#125;;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;week[res[<span class="number">0</span>]]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d"</span>,res[<span class="number">1</span>],res[<span class="number">2</span>]);<span class="comment">//日期格式，各占2位</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1062-多阶段排序"><a href="#1062-多阶段排序" class="headerlink" title="1062[多阶段排序]"></a>1062[多阶段排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1062" target="_blank" rel="noopener">Talent and Virtue</a></p>
<p>思路：<strong>经典套路，一遍过，不多说了。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> People</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> talent,virtue;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> People&amp;o1,<span class="keyword">const</span> People&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>((o1.virtue+o1.talent)!=(o2.virtue+o2.talent))</div><div class="line">        <span class="keyword">return</span> (o1.virtue+o1.talent)&gt;(o2.virtue+o2.talent);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(o1.virtue!=o2.virtue)</div><div class="line">            <span class="keyword">return</span> o1.virtue&gt;o2.virtue;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> o1.id&lt;o2.id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,L,H;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;L,&amp;H);</div><div class="line">    <span class="built_in">vector</span>&lt;People&gt; sage,nobleman,foolman,smallman;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        People tmp;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;tmp.id,&amp;tmp.virtue,&amp;tmp.talent);</div><div class="line">        <span class="keyword">if</span>(tmp.talent&lt;L||tmp.virtue&lt;L)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp.virtue&gt;=H&amp;&amp;tmp.talent&gt;=H)</div><div class="line">            sage.push_back(tmp);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp.virtue&gt;=H&amp;&amp;tmp.talent&lt;H)</div><div class="line">            nobleman.push_back(tmp);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp.virtue&gt;=tmp.talent)</div><div class="line">            foolman.push_back(tmp);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp.talent&gt;tmp.virtue)</div><div class="line">            smallman.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    sort(sage.begin(),sage.end(),cmp);</div><div class="line">    sort(nobleman.begin(),nobleman.end(),cmp);</div><div class="line">    sort(foolman.begin(),foolman.end(),cmp);</div><div class="line">    sort(smallman.begin(),smallman.end(),cmp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sage.size()+nobleman.size()+foolman.size()+smallman.size());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:sage)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%08d %d %d\n"</span>,e.id,e.virtue,e.talent);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:nobleman)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%08d %d %d\n"</span>,e.id,e.virtue,e.talent);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:foolman)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%08d %d %d\n"</span>,e.id,e.virtue,e.talent);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:smallman)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%08d %d %d\n"</span>,e.id,e.virtue,e.talent);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1063-交集和并集-STL"><a href="#1063-交集和并集-STL" class="headerlink" title="1063[交集和并集/STL]"></a>1063[交集和并集/STL]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1063" target="_blank" rel="noopener">Set Similarity</a></p>
<p>思路：<strong>直接把两个序列都放入集合中，题目中序列可能有重复，这就不用管了。然后遍历其中一个集合，不在另一个集合中的元素就nt++，否则nc++，这里nt就是并集，nc就是交集，所以一开始nc为0，nt为另一个集合大小。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;&gt; arr;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> M;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>,tmp;j&lt;M;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</div><div class="line">            s.insert(tmp);</div><div class="line">        &#125;</div><div class="line">        arr.push_back(s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a,b;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">        <span class="keyword">int</span> nc=<span class="number">0</span>,nt=arr[b<span class="number">-1</span>].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:arr[a<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(arr[b<span class="number">-1</span>].find(e)==arr[b<span class="number">-1</span>].end())</div><div class="line">                nt++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                nc++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%0.1f%\n"</span>,(<span class="number">100.0</span>*nc)/nt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1064-完全BST树"><a href="#1064-完全BST树" class="headerlink" title="1064[完全BST树]"></a>1064[完全BST树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1064" target="_blank" rel="noopener">Complete Binary Search Tree</a></p>
<p><em>给你一个序列，构造一个完全BST树，输出其层序遍历的结果。</em></p>
<p>思路：<strong>和<a href="http://www.prime666.com/2017/06/11/pat%EF%BC%88%E4%BA%8C%EF%BC%89/">1020</a>思路相近，这里给出了一个序列，那么只要把它们从小到大排序即是中序序列了。这道题就变成了给出中序序列求出其层序序列。补充一下，n个结点的二叉树高度是$log_2^n+1$</strong></p>
<p><strong>算法完全可以沿用1020的，只不过需要单独确定根节点的位置。也就是说，要计算左子树总共有几个结点，然后用start+结点数就是根节点的位置。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/30.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tree[<span class="number">20000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_traversal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; in_order,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;<span class="comment">//index和以前一样，start是中序起点，end是中序的终点。</span></div><div class="line">    <span class="keyword">if</span>(start&gt;end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> n = end - start + <span class="number">1</span>;<span class="comment">//这棵子树一共n个结点</span></div><div class="line">    <span class="keyword">int</span> L=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>);<span class="comment">//除去叶子层，一共有几层</span></div><div class="line">    <span class="keyword">int</span> num=n-(<span class="built_in">pow</span>(<span class="number">2</span>,L)<span class="number">-1</span>);<span class="comment">//叶子结点个数</span></div><div class="line">    <span class="keyword">int</span> root=start+(<span class="built_in">pow</span>(<span class="number">2</span>,L<span class="number">-1</span>)<span class="number">-1</span>)+min((<span class="keyword">double</span>)num,<span class="built_in">pow</span>(<span class="number">2</span>,L<span class="number">-1</span>));<span class="comment">//根的左子树的最后一层可能满了也可能没满，所以需要用min确定到底有几个结点</span></div><div class="line">    tree[index]=in_order[root];</div><div class="line">    pre_traversal(in_order,start,root<span class="number">-1</span>,<span class="number">2</span>*index);</div><div class="line">    pre_traversal(in_order,root+<span class="number">1</span>,end,<span class="number">2</span>*index+<span class="number">1</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    fill(tree,tree+<span class="number">20000</span>,<span class="number">-1</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in_order(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in_order[i]);</div><div class="line">    sort(in_order.begin(),in_order.end());</div><div class="line">    pre_traversal(in_order,<span class="number">0</span>,N<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:tree)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e!=<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(count==N<span class="number">-1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,e);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,e);</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(count==N)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1065-大整数相加"><a href="#1065-大整数相加" class="headerlink" title="1065[大整数相加]"></a>1065[大整数相加]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1065" target="_blank" rel="noopener">A+B and C (64bit)</a></p>
<p><em>给定abc判断是否a+b&gt;c</em></p>
<p>思路：<strong>题目中说了abc本身不会溢出，但是相加可能会，所以不要用字符串存储它们了，直接根据溢出判断，比如a&gt;0 b&gt;0，a+b&lt;=0了，毫无疑问，溢出了，a+b肯定比c大了。。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/30.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b,c,sum;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a,&amp;b,&amp;c);</div><div class="line">        sum=a+b;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,i+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;b&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sum&gt;<span class="number">0</span>&amp;&amp;sum&lt;=c)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"true\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sum&lt;<span class="number">0</span>&amp;&amp;sum&gt;c)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"true\n"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(sum&lt;=c)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"false\n"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"true\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1066-AVL树"><a href="#1066-AVL树" class="headerlink" title="1066[AVL树]"></a>1066[AVL树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1066" target="_blank" rel="noopener">Root of AVL Tree</a></p>
<p><em>非常经典的AVL树的题目，多看看！</em></p>
<p>思路：<strong>下面一张图就是思路，Wikipedia太好了，可以彻底放弃百度了。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/Tree_Rebalancing.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/30.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    Node *left,*right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Right_Rotation</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    Node*pivot=root-&gt;left;</div><div class="line">    root-&gt;left=pivot-&gt;right;</div><div class="line">    pivot-&gt;right=root;</div><div class="line">    <span class="keyword">return</span> pivot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Left_Rotation</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    Node*pivot=root-&gt;right;</div><div class="line">    root-&gt;right=pivot-&gt;left;</div><div class="line">    pivot-&gt;left=root;</div><div class="line">    <span class="keyword">return</span> pivot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Left_Right_Rotation</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    root-&gt;left=Left_Rotation(root-&gt;left);</div><div class="line">    <span class="keyword">return</span> Right_Rotation(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">Right_Left_Rotation</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    root-&gt;right=Right_Rotation(root-&gt;right);</div><div class="line">    <span class="keyword">return</span> Left_Rotation(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> max(getHeight(root-&gt;left),getHeight(root-&gt;right))+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">insert</span><span class="params">(Node*root,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        root=<span class="keyword">new</span> Node;</div><div class="line">        root-&gt;val=val;</div><div class="line">        root-&gt;left=root-&gt;right= <span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(val&lt;root-&gt;val)</div><div class="line">    &#123;<span class="comment">//插入左子树</span></div><div class="line">        root-&gt;left=insert(root-&gt;left,val);</div><div class="line">        <span class="keyword">if</span>(getHeight(root-&gt;left)-getHeight(root-&gt;right)==<span class="number">2</span>)</div><div class="line">            root=val&lt;root-&gt;left-&gt;val?Right_Rotation(root):Left_Right_Rotation(root);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;<span class="comment">//插入右子树</span></div><div class="line">        root-&gt;right=insert(root-&gt;right,val);</div><div class="line">        <span class="keyword">if</span>(getHeight(root-&gt;left)-getHeight(root-&gt;right)==<span class="number">-2</span>)</div><div class="line">            root=val&lt;root-&gt;right-&gt;val?Right_Left_Rotation(root):Left_Rotation(root);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;<span class="comment">//debug用的，可以删除</span></div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,root-&gt;val);</div><div class="line">        pre_order(root-&gt;left);</div><div class="line">        pre_order(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    Node* root= <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</div><div class="line">        root=insert(root,val);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//pre_order(root);</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,root-&gt;val);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1067-贪心"><a href="#1067-贪心" class="headerlink" title="1067[贪心]"></a>1067[贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1067" target="_blank" rel="noopener">Sort with Swap(0,*)</a></p>
<p><em>每次只能用0与其它数交换，最少几次让其有序？（从小到大）</em></p>
<p>思路：<strong>输入的数都在[0,n-1]之间，每次用0交换时分两种情况：0的下标就是0，此时0和第一个不在其位的数交换；否则 ，0和0所在位置的数交换位置。因为需要频繁查询位置，所以对输入的数建立一个数——&gt;下标的映射关系，交换也是对它进行。其中，index指向第一个不在其位置上的数的下标，每次0在其位时，就和index交换，index是递增的，每次都能把index归位，利用index可以不用每次都遍历查找了。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos(N);</div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;<span class="comment">//统计除了0有多少个数不在其位</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,a;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">        pos[a]=i;</div><div class="line">        <span class="keyword">if</span>(a!=i&amp;&amp;a!=<span class="number">0</span>)</div><div class="line">            total++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> index=<span class="number">1</span>;<span class="comment">//第一个不在原本位置上的数的下标</span></div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//需要交换的总次数</span></div><div class="line">    <span class="keyword">while</span>(total!=<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(pos[<span class="number">0</span>]!=<span class="number">0</span>)</div><div class="line">        &#123;<span class="comment">//0在i位上，就把0和i的位置对换，这样i归位</span></div><div class="line">            swap(pos[<span class="number">0</span>],pos[pos[<span class="number">0</span>]]);</div><div class="line">            res++;</div><div class="line">            total--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (;index&lt;N;++index)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(pos[index]!=index)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            swap(pos[index],pos[<span class="number">0</span>]);</div><div class="line">            res++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1068-子集求和-0-1背包"><a href="#1068-子集求和-0-1背包" class="headerlink" title="1068[子集求和/0-1背包]"></a>1068[子集求和/0-1背包]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1068" target="_blank" rel="noopener">Find More Coins</a></p>
<p>思路：<strong>“见规死”的神话能不能破。。/(ㄒoㄒ)/~~。表面上子集求和，挺难得，不会。但是转换思路，可以把总金额变成背包容量，货币面值变成物品，其价值和重量相等。那么，就转换成0-1背包问题了。</strong></p>
<p><strong>由于需要打印具体货币，所以用了个二维数组保存过程。先把货币从大到小排序，这样最后构造解的时候才符合题意。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</div><div class="line">    <span class="keyword">int</span> dp[N+<span class="number">1</span>][M+<span class="number">1</span>];<span class="comment">//dp[i][j]从前i个商品中总重量不超过j的最大价值</span></div><div class="line">    <span class="keyword">bool</span> choice[N+<span class="number">1</span>][M+<span class="number">1</span>];<span class="comment">//记录选择</span></div><div class="line">    fill(choice[<span class="number">0</span>],choice[<span class="number">0</span>]+(N+<span class="number">1</span>)*(M+<span class="number">1</span>),<span class="literal">false</span>);</div><div class="line">    fill(dp[<span class="number">0</span>],dp[<span class="number">0</span>]+M+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    sort(w.begin(),w.end(),greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=M;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(j&lt;w[i])</div><div class="line">                dp[i+<span class="number">1</span>][j]=dp[i][j];</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dp[i][j]&gt;dp[i][j-w[i]]+w[i])</div><div class="line">                &#123;</div><div class="line">                    dp[i+<span class="number">1</span>][j]=dp[i][j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    dp[i+<span class="number">1</span>][j]=dp[i][j-w[i]]+w[i];</div><div class="line">                    choice[i][j]=<span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span>(dp[N][M]!=M)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">int</span> total=M,index=N;</div><div class="line">        <span class="keyword">while</span>(total!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(choice[index][total])</div><div class="line">            &#123;</div><div class="line">                res.push_back(w[index]);</div><div class="line">                total-=w[index];</div><div class="line">            &#125;</div><div class="line">            index--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">            <span class="keyword">if</span>(i!=res.size()<span class="number">-1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1069-string的使用"><a href="#1069-string的使用" class="headerlink" title="1069[string的使用]"></a>1069[string的使用]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1069" target="_blank" rel="noopener">The Black Hole of Numbers</a></p>
<p>需要注意输入可能为6174，此时也要按过程走一波。所以得用do-while</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="built_in">string</span> num)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> a,b;</div><div class="line">    <span class="keyword">int</span> ia,ib;</div><div class="line">    num.insert(<span class="number">0</span>,<span class="number">4</span>-num.size(),<span class="string">'0'</span>);</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        sort(num.begin(),num.end(),greater&lt;<span class="keyword">char</span>&gt;());</div><div class="line">        a=num;</div><div class="line">        sort(num.begin(),num.end(),less&lt;<span class="keyword">char</span>&gt;());</div><div class="line">        b=num;</div><div class="line">        <span class="keyword">if</span>(a==b)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="string">" - "</span>&lt;&lt;num&lt;&lt;<span class="string">" = 0000"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ia=stoi(a);</div><div class="line">        ib=stoi(b);</div><div class="line">        num=to_string(ia-ib);</div><div class="line">        num.insert(<span class="number">0</span>,<span class="number">4</span>-num.size(),<span class="string">'0'</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" - "</span>&lt;&lt;b&lt;&lt;<span class="string">" = "</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;<span class="keyword">while</span>(num!=<span class="string">"6174"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> num,a,b;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;num;</div><div class="line">    process(num);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1070-最大利润-贪心"><a href="#1070-最大利润-贪心" class="headerlink" title="1070[最大利润/贪心]"></a>1070[最大利润/贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1070" target="_blank" rel="noopener">Mooncake</a></p>
<p>思路：<strong>按最高利润排序即可，优先卖高利润的月饼，没毛病。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/7/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Mooncake</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> inventory;</div><div class="line">    <span class="keyword">double</span> price;</div><div class="line">    <span class="keyword">double</span> rate;<span class="comment">//性价比</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Mooncake&amp;o1,<span class="keyword">const</span> Mooncake&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.rate&gt;o2.rate;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,D;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;D);</div><div class="line">    <span class="built_in">vector</span>&lt;Mooncake&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;s[i].inventory);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;s[i].price);</div><div class="line">        s[i].rate=s[i].price/s[i].inventory;</div><div class="line">    &#125;</div><div class="line">    sort(s.begin(),s.end(),cmp);</div><div class="line">    <span class="keyword">double</span> total_profit=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(s[i].inventory&gt;D)</div><div class="line">        &#123;</div><div class="line">            total_profit+=D*s[i].rate;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            D-=s[i].inventory;</div><div class="line">            total_profit+=s[i].price;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,total_profit);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux技巧]]></title>
      <url>https://www.prime666.com/2017/06/29/Linux%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>记录linux学习过程中效率工具，持续更新~</p>
<a id="more"></a>
<h1 id="linux效率工具"><a href="#linux效率工具" class="headerlink" title="linux效率工具"></a>linux效率工具</h1><h2 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h2><p>默认情况下man可以查询各种函数，但是内核态函数不行，以下方法可以让其查询内核函数。其过程本质上是自己做了一个手册！</p>
<ol>
<li>下载需求版本的源码，可以用<code>apt-get install linux-source</code>。其在<code>/usr/src</code>下有一个源码压缩包，解压它。</li>
<li>然后进入源码根目录，执行<code>make mandocs</code>创建man手册，可能比较慢，我的i7都用了半小时。。</li>
<li>然后执行<code>sudo make installmandocs</code>安装即可。由此man手册更新完毕。</li>
</ol>
<p>网上提到：如果 make mandocs 命令执行失败，可能是没有安装 xmlto 导致的，可以使用命令<code>sudo apt-get install xmlto</code>进行安装。我没有试就直接安装了。</p>
<p>可以将创建好的 Man手册文档 复制到别的设备上进行安装，从而避免了非常费时的创建过程。</p>
<p>引用另一篇博客教程如下：</p>
<blockquote>
<p>创建好的 Man手册 存放于 /源码/Documentation/Docbook/man/ 目录下，将该目录中各子目录及其包含的 *.9.gz 文件复制到需要安装手册的设备的相同目录下（如果没有就创建一个）。</p>
<p>然后以 root权限运行以下命令进行手册的安装：<br>mkdir -p /usr/local/man/man9<br>install Docbook/man/*.9.gz /usr/local/man/man9<br>命令执行成功后就可以在目标设备上同样使用 Man命令 查看内核函数的帮助文档了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[嵌入式review]]></title>
      <url>https://www.prime666.com/2017/06/29/%E5%B5%8C%E5%85%A5%E5%BC%8Freview/</url>
      <content type="html"><![CDATA[<p>嵌入式常用知识总结。</p>
<a id="more"></a>
<h1 id="嵌入式总结"><a href="#嵌入式总结" class="headerlink" title="嵌入式总结"></a>嵌入式总结</h1><p>谨以此文献给我那sb室友，俗称“咸鱼王”。</p>
<h2 id="嵌入式系统设计概述"><a href="#嵌入式系统设计概述" class="headerlink" title="嵌入式系统设计概述"></a>嵌入式系统设计概述</h2><p>嵌入式系统组成如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-06-29_084323.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-03_084459.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<font color="C0FF3E"><br><br>存储器：存储器按存储信息的功能可分为只读存储器ROM（Read Only Memory）和随机存储器RAM（Random Access Memory） 。<br><br>处理器：中央处理器是嵌入式系统的核心，负责控制整个系统的执行。包括微处理器、微控制器、DSP处理器、专用处理器、SOC(System on Chip) 。<br><br>输入设备：嵌入式系统中的输入形式一般包括触摸屏、语音输入、按键和虚拟键盘等 。<br><br>输出设备：输出设备则主要有LCD 显示和语音输出 。<br><br>外围接口：外围接口主要有GPIO、串口、I2C总线、USB总线和IEEE 1394总线等等 。<br><br></font>

<p>架构如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/%E5%9B%BE%E7%89%872.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>嵌入式系统设计步骤：</p>
<ul>
<li>详细分析嵌入式系统的需求</li>
<li>从需求引出系统设计思路</li>
<li>给出硬件设计和软件设计方法<br>结构设计、接口设计、程序设计（驱动设计、软件设计等）</li>
</ul>
<h2 id="嵌入式处理器结构及技术"><a href="#嵌入式处理器结构及技术" class="headerlink" title="嵌入式处理器结构及技术"></a>嵌入式处理器结构及技术</h2><h3 id="微处理器集成度"><a href="#微处理器集成度" class="headerlink" title="微处理器集成度"></a>微处理器集成度</h3><ul>
<li>用于桌面和服务器的微处理器的芯片内部通常只包括<strong>CPU核心、Cache、MMU、总线接口</strong>等部分，其他附加的功能如外部接口、系统总线、外部总线和外部设备独立在其他芯片和电路内。 </li>
<li>嵌入式微处理器<strong>除了集成CPU核心、Cache、MMU、总线</strong>等部分外，还集成了各种外部接口和设备，如<strong>中断控制器、DMA、定时器、UART</strong>等。(符合嵌入式系统的低成本和低功耗需求，一块单一的集成了大多数需要的功能块的芯片价格更低，功耗更少)</li>
</ul>
<p>也就是说，嵌入式微处理器是<strong>面向应用的，其片内所包含的组件的数目和种类是由它的市场定位决定的</strong>。</p>
<h3 id="外围设备"><a href="#外围设备" class="headerlink" title="外围设备"></a>外围设备</h3><p>嵌入式外围设备：在嵌入式系统硬件构成中，除核心控制部件以外的各种存储器、输入/输出接口、作为人机接口的显示器/键盘、串行通信接口等。</p>
<h3 id="冯诺依曼"><a href="#冯诺依曼" class="headerlink" title="冯诺依曼"></a>冯诺依曼</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-06-29_090457.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>缺点：<strong>取指令和存取数据要从同一个存储空间存取，经由同一总线传输，因而它们无法重叠执行</strong></p>
<h3 id="哈佛结构"><a href="#哈佛结构" class="headerlink" title="哈佛结构"></a>哈佛结构</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-06-29_090516.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>哈佛体系结构的特点：</p>
<ul>
<li><strong>程序与数据在不同存储空间</strong>；每个存储器独立编址、独立访问</li>
<li>使用程序和数据总线，使数据吞吐率提高一倍</li>
<li>适合于数字信号处理</li>
</ul>
<p>大多数DSP都是哈佛结构，ARM9、ARM10和ARM11是哈佛结构。</p>
<p>优点：由于取指令和存取数据分别经由不同的存储空间和不同的总线，使得各条指令可以重叠执行，这样，也就克服了数据流传输的瓶颈，提高了运算速度。</p>
<p>缺点：总线资源占用过多 。</p>
<hr>
<ol>
<li>哈佛结构中数据存储器与程序存储器分开，需要<strong>CPU提供大量的数据总线</strong>，因而很少使用哈佛结构作为CPU外部构架。</li>
<li>对于CPU内部，通过使用不同的数据和指令Cache，可以有效的提高指令执行的效率。</li>
<li>因而目前大部分计算机体系都是在CPU内部的使用哈佛结构，在CPU外部使用冯·诺依曼结构。</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/407610-20151014095555022-881385577.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="复杂指令集（Complex-Instruction-Set-Computer）"><a href="#复杂指令集（Complex-Instruction-Set-Computer）" class="headerlink" title="复杂指令集（Complex Instruction Set Computer）"></a>复杂指令集（Complex Instruction Set Computer）</h3><p>指令系统丰富，有专用指令来完成特定功能，处理特殊任务效率高。<br>8/2原则：80%的程序只使用20%的指令，大多数程序只使用少量的指令就能够运行。</p>
<h3 id="精简指令集（Reduced-Instruction-Set-Computer"><a href="#精简指令集（Reduced-Instruction-Set-Computer" class="headerlink" title="精简指令集（Reduced Instruction Set Computer)"></a>精简指令集（Reduced Instruction Set Computer)</h3><p>由常用指令组成，使其简单高效。对不常用功能采用组合指令来实现。实现特殊功能采用流水线和超标量技术来弥补效率的劣势。</p>
<p>体现为以下几点：</p>
<ol>
<li>指令规整、对称、简单，指令小于100条，基本寻址方式只有2～3种</li>
<li>单周期指令，便于流水操作</li>
<li>大量的寄存器（不少于32个）</li>
</ol>
<hr>
<p>尽管RISC架构有不少优点，但决不能认为RISC架构就可以取代CISC架构，事实上，RISC和CISC各有优势，而且界限并不那么明显。<br>现代的CPU往往采用CISC的外围，内部加入了RISC的特性。</p>
<h3 id="流水线技术"><a href="#流水线技术" class="headerlink" title="流水线技术"></a>流水线技术</h3><p>几个指令可以并行执行（使指令的执行速度或数据的处理速度更快，克服早期计算机指令执行和数据处理串行进行产生的处理器闲置时间的弊端）。</p>
<p>流水线：在CPU中把一条指令分解成多个可单独处理的操作，使每个操作在一个专门的硬件站（stage）上执行，这样一条指令需要顺序地经过流水线中多个站的处理才能完成，但是前后相连的几条指令可以依次流入流水线中，在多个站间重叠执行，因此可以实现指令的并行处理。</p>
<hr>
<p>流水线能够正常工作的条件：任意时刻，每一级所使用的硬件必须能独立操作，不能多级同时占用同一硬件资源。</p>
<h3 id="超标量"><a href="#超标量" class="headerlink" title="超标量"></a>超标量</h3><p>配置多个执行部件和指令译码电路，能同时执行多条指令。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-06-29_093232.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><font color="C0FF3E">设计思想：把在一段时间内、一定地址范围中被频繁访问的信息集合，成批地从主存中读到一个能高速存取的小容量存储器中存放起来,供程序在这段时间内随时使用，从而减少或不再去访问速度较慢的主存，以加快程序的运行速度。</font>

<p>依据：程序和数据访问的局部性原理。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-06-29_094117.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>针对cache不一致问题：在CPU访问异步事件控制的数据前一定要强行刷新Cache中的内容；反之，从内存到外部设备搬移数据前一定要回写内存。</p>
<p>（以CPU为核心看，将CPU直接参与的事件称为同步事件，CPU未直接参与的称为异步事件，比如DMA）。</p>
<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>总线是CPU与存储器和设备通信的机制，是计算机各部件之间传送数据、地址和控制信息的公共通道。总线的特点在于其<strong>公用性</strong>(即它可以同时挂接多个模块或设备，作为所有挂接模块或设备公用的信号载体)。总线<strong>在同一时刻，只能允许一对模块或设备进行信息交换</strong>。当有多个模块或设备需要同时使用总线进行信息传输时，只能<strong>采用分时方式，并且要对总线使用的优先权进行仲裁管理</strong>。<br>总线结构包括：传输信息的传输线路和总线控制逻辑。</p>
<p>三大参数：</p>
<ol>
<li>总线位宽：又称总线位宽，指的是总线能同时传送数据的位数。</li>
<li>总线频率：总线工作速度的一个重要参数，工作频率越高，速度越快。通常用MHz表示。</li>
<li>总线带宽：又称总线的数据传送率，是指在一定时间内总线上可传送的数据总量，用每秒最大传送数据量来衡量。</li>
</ol>
<p><strong>总线带宽(单位:MB/s)  =（总线宽度/8）× 总线频率</strong></p>
<h2 id="嵌入式系统设备驱动"><a href="#嵌入式系统设备驱动" class="headerlink" title="嵌入式系统设备驱动"></a>嵌入式系统设备驱动</h2><p>见<a href="http://www.prime666.com/2017/06/08/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E9%A9%B1%E5%8A%A8/">简单字符设备驱动</a>以及<a href="http://www.prime666.com/2017/06/01/proc%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/">proc文件系统</a></p>
<h2 id="嵌入式中断驱动程序"><a href="#嵌入式中断驱动程序" class="headerlink" title="嵌入式中断驱动程序"></a>嵌入式中断驱动程序</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ul>
<li><font color="BF3EFF">中断处理函数是一个普通的函数，没有什么特别的地方。但由于是在中断期间运行，不与任何进程上下文相关，因而受到一些限制：<br><br><em> <strong>不能向用户空间发送和接收数据</strong>
</em> <strong>不能做任何可能发生睡眠的操作</strong>等<br><br>为了实时性考虑，不能在中断中处理过多任务，耗时不能太长。</font>


</li>
</ul>
<ul>
<li>负责对硬件做出迅速响应并完成时间要求很严格的操作<ul>
<li>异步方式执行，可能会打断其他重要代码的执行</li>
<li>中断处理程序<strong>不在进程上下文中运行</strong>，<strong>不能被阻塞</strong></li>
<li>中断处理程序执行过程中<ul>
<li>最好情形下，同级中断被屏蔽</li>
<li>最坏情形下，当前处理器上所有其他中断都会被屏蔽</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>中断处理流程</p>
<ul>
<li><p><strong>上半部</strong>：中断处理程序</p>
<p>简单快速，执行时禁止部分或全部中断</p>
</li>
<li><p><strong>下半部：</strong><br>执行与中断处理密切相关但中断处理程序本身不执行的工作，执行期间可以响应中断</p>
</li>
</ul>
<hr>
<p>​</p>
<ul>
<li>没有严格的划分规则<ul>
<li>如果任务对时间非常敏感，放在中断处理程序中执行</li>
<li>如果任务与硬件相关，放在中断处理程序中执行</li>
<li>如果任务需确保不被其他中断（同级中断）打断，放在中断处理程序中执行</li>
<li>其他任务，考虑放置在下半部执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="下半部"><a href="#下半部" class="headerlink" title="下半部"></a>下半部</h3><p>见<a href="http://www.prime666.com/2017/06/03/%E5%AE%9A%E6%97%B6%E5%99%A8/">tasklet和工作队列</a></p>
<h2 id="并发与竞争"><a href="#并发与竞争" class="headerlink" title="并发与竞争"></a>并发与竞争</h2><p>Linux设备驱动中可采用的互斥途径：</p>
<ul>
<li>中断屏蔽</li>
<li>原子操作</li>
<li>自旋锁</li>
<li>信号量</li>
<li>completion </li>
</ul>
<h3 id="中断屏蔽"><a href="#中断屏蔽" class="headerlink" title="中断屏蔽"></a>中断屏蔽</h3><p>可解决中断与进程之间的并发；也可解决内核抢占进程之间的并发。</p>
<p><strong>不要长时间屏蔽中断</strong>，由于Linux系统的异步I/O、进程调度等很多重要操作都依赖于中断，在屏蔽中断期间所有的中断都无法得到处理，因此长时间屏蔽中断是很危险的，有可能造成数据丢失甚至系统崩溃。</p>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>信号量本质上是一个整数值，一对操作函数通常称为P和V。</p>
<ul>
<li>进入临界区<ul>
<li>相关信号量上调用P；</li>
<li>如果信号量&gt;零，则该值会减小1，而进程可以继续。</li>
<li>如果信号量的值=零(或更小)，进程必须等待直到其他人释放该信号量。</li>
</ul>
</li>
<li>退出临界区<ul>
<li>信号量的解锁通过调用V完成；</li>
<li>该函数增加信号量的值，</li>
<li>并在必要时唤醒在这个信号量等待的其它进程。</li>
</ul>
</li>
</ul>
<p>当信号量仅仅用于互斥时（避免多个进程同时在一个临界区中运行）， 信号量的值应初始化为1。</p>
<ul>
<li>只能由单个进程或线程拥有。</li>
<li>一个信号量有时也称为一个“互斥体(mutex)”，它是互斥(mutual exclusion)的简称。</li>
<li>Linux内核中<strong>几乎所有的信号量均用于互斥</strong>。</li>
</ul>
<h3 id="completion"><a href="#completion" class="headerlink" title="completion"></a>completion</h3><p>一种轻量级的机制，它允许一个线程告诉另一线程某个工作已经完成。 </p>
<h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>一个自旋锁是一个互斥设备，只有两个值：“锁定”和“解锁”。即：</p>
<ul>
<li>实现为某个整数值中的单个位。希望获得某特定锁的代码测试相关的位。</li>
<li>锁可用，则“锁定”位被设置，而代码继续进入临界区</li>
<li>如果锁被其他人获得，则代码进入<strong>循环并重复检查这个锁，直到该锁可用为止。这个循环就是自旋锁的“自旋”</strong></li>
</ul>
<h3 id="自旋锁和信号量对比"><a href="#自旋锁和信号量对比" class="headerlink" title="自旋锁和信号量对比"></a>自旋锁和信号量对比</h3><h4 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h4><ul>
<li>使用信号量的开销是进程上下文切换时间</li>
<li>自旋锁的开销是忙等待获取自旋锁</li>
</ul>
<h4 id="等待机制不同"><a href="#等待机制不同" class="headerlink" title="等待机制不同"></a>等待机制不同</h4><ul>
<li>信号量可能导致阻塞，所以在不允许阻塞的代码中不能用可能引起阻塞的信号量处理方式，比如，中断处理程序</li>
<li>自旋锁是忙等待</li>
</ul>
<h3 id="避免自旋锁死锁的方法"><a href="#避免自旋锁死锁的方法" class="headerlink" title="避免自旋锁死锁的方法"></a>避免自旋锁死锁的方法</h3><ol>
<li>自旋锁的使用规则<ul>
<li>任何拥有自旋锁的代码都必须是原子的； </li>
<li>如果中断处理函数中也要获得自选锁，那么驱动程序需要在拥有自旋锁时禁止中断；</li>
<li>自旋锁必须在可能的最短时间内拥有；</li>
<li>避免某个获得锁的函数调用其他同样试图获取这个锁的函数，否则代码就会死锁；</li>
<li>不论是信号量还是自旋锁，都不允许锁拥有者第二次获得这个锁，如果试图这么做，系统将挂起；</li>
</ul>
</li>
<li>锁的顺序规则 <ul>
<li>按同样的顺序获得锁</li>
<li>如果必须获得一个局部锁和一个属于内核更中心位置的锁，则应该首先获取自己的局部锁 </li>
<li>如果<strong>我们拥有信号量和自旋锁的组合，则必须首先获得信号量；在拥有自旋锁时调用down(可导致休眠)是个严重的错误 。</strong></li>
</ul>
</li>
</ol>
<h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>顾名思义不多说。</p>
<h2 id="内存分配与映射"><a href="#内存分配与映射" class="headerlink" title="内存分配与映射"></a>内存分配与映射</h2><p>见<a href="http://www.prime666.com/2017/06/15/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E6%98%A0%E5%B0%84/">内存分配与映射</a>一文。</p>
<h2 id="DMA-Direct-Memory-Access"><a href="#DMA-Direct-Memory-Access" class="headerlink" title="DMA(Direct Memory Access)"></a>DMA(Direct Memory Access)</h2><ol>
<li><p>为何使用DMA？</p>
<ul>
<li><p>轮训方式</p>
<p>CPU必须在传输下一个字节之前，反复检测外部设备的状态，直到外部设备完成操作(由“忙”态转为“闲”态)，才能传输下一个数据。因此CPU在大量时间处于检查和等待状态，整个计算机系统的效率十分低下。</p>
</li>
<li><p>中断方式</p>
<p>仍然占用了CPU相当多的时问。这里因为I/O设备每传输一个数据字节都要向CPU发出一次中断请求，也就要中断一次CPU的当前工作。而且CPU在每次响应中断之后还要作保护现场操作(把当前各个寄存器中的内容送入内存保存起来)，再调用中断处理程序，执行完毕中断处理程序之后，还要恢复现场(把刚才送入内存保存的内容再重新装入各个寄存器中)，以便继续执行中断之前的工作。这样，在连续传输一个数据块的过程中，CPU要反复多次被中断，并且花费很多时间去处理中断，使得CPU的效率仍然不能得到很好地发挥。整个系统效率的提高仍然受到限制。所以，在传输的数据量很大时，中断方式也不能满足要求。</p>
</li>
<li><p>DMA方式</p>
<p>DMA是Direct Memory Access的缩写。其意思是“存储器直接访问”。它是指一种高速的数据传输操作，允许在外部设备和存储器之间直接读写数据，即不通过CPU，也不需要CPU干预。整个数据传输操作在一个称为“DMA控制器”的控制下进行的。CPU除了在数据传输开始和结束时作一点处理外，在传输过程中CPU可以进行其它的工作。这样，在大部分时间里，CPU和输入输出都处在并行操作。因此，使整个计算机系统的效率大大提高。</p>
</li>
</ul>
</li>
<li><p>三种结构</p>
<ul>
<li><p>单总线、I/O分离的DMA结构</p>
<p>存储器和I/O模块之间经过DMA数据交换的路径是：MEMORY (I/O MODULE) —- SYSTEM BUS —-DMA —-SYSTEMBUS —-I/O(MEMORY)</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-03_093437.png" alt=""></p>
</li>
<li><p>单总线、I/O集成的DMA结构</p>
<p>DMA逻辑集成为I/O模块的一部分，存储器和I/O模块之间经DMA数据交换路径简化为，MEMORY(I/O)—-SYSTEMBUS —I/O(MEMORY) </p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-03_093455.png" alt=""></p>
</li>
<li><p>I/O总线的DMA结构</p>
<p>这种结构将单总线、I/O集成的DMA结构中的I/O模块和DMA模<br>块的连接改为I/O总线，使集成DMA逻辑的概念向前迈进了一步。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-03_093506.png" alt=""></p>
<p>​</p>
</li>
</ul>
</li>
<li><p>三种传输方式</p>
<ul>
<li><p>周期挪用方式</p>
<p>指DMA每传输完一个单位的数据后，将撤销总线申请，一个周期后再提出总线申请；DMA控制器周而复始地进行“总线请求——总线应答——总线传输——总线释放”的循环。由于周期挪用方式在相邻总线申请之间只传输一个字的数据，故也称为单字传输方式。</p>
</li>
<li><p>请求方式</p>
<p>请求传输方式指在DMA传输过程中(非意外情况下总线仲裁逻辑将不会收回总线控制权)，如果外部请求有效DMA将保持总线申请，数据得以连续传输；如果外部请求无效DMA将撤销总线申请，交还总线控制。</p>
</li>
<li><p>块传输方式</p>
<p>块传输方式与请求传输方式不同之处在于DMA在数据传输过程中，将<strong>不理会外部请求是否有效而保持总线申请</strong>，直到数据传送完毕才撤销总线申请，交还总线控制权。请求对象发出一次有效的DMA请求以后，在DMA传输过程中不必再保持请求有效，因此请求对象无法中断DMA传输过程。在块传输方式下不能轻易地中断DMA传输过程。在块传输方式下，值得注意的是总线仲裁器必须防止一路DMA长期占用总线导致其它DMA任务阻塞的问题。</p>
</li>
</ul>
</li>
<li><p>DMAC结构</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_093618.png" alt=""></p>
<p>DMA控制器可以像CPU那样获得总线的控制权，完成外设与存储器之间的数据高速交换。<strong>DMA控制器不但要与外设连接，以接受外设发出的DMA操作请求和在DMA期间对外设进行控制，还要与CPU连接，以请求总线的控制权</strong>；同时，它还需要与三大总线连接，以便进行总线的控制。</p>
<ul>
<li><strong>地址寄存器：包括源地址和目的地址寄存器。</strong><ul>
<li>在进行DMA操作之前，在CPU控制下将源地址和目的地址分别装入DMAC的源地址和目的地址寄存器；</li>
<li>在进入DMA操作后，由这些地址寄存器提供出源地址和目的地址，并在传送数据的同时，由硬件以加1或减1来修改地址寄存器的值。</li>
</ul>
</li>
<li><strong>控制/状态寄存器:控制寄存器用于选择DMAC的操作类型、工作方式、传送方向和有关参数。</strong><ul>
<li>这种选择是通过CPU在DMA操作之前向控制寄存器写入相应的控制字来实现的。</li>
<li>状态寄存器用于寄存DMA传送前后的状态。</li>
<li>DMA传送结束后，CPU通过对该寄存器执行输入指令即可读入状态字，了解所需的状态和结果</li>
</ul>
</li>
<li><strong>字节计数器:用于控制传送数据块的长度。</strong><ul>
<li>在进入DMA操作之前，CPU将数据块长度(字节数)装入字节计数器中。</li>
<li>进入DMA操作后，每传送一个字节数据，由硬件自动修改计数器的值(减)；当计数器溢出时，便使DMA方式的数据传送结束。</li>
</ul>
</li>
<li><strong>总线接口和总线控制逻辑</strong><ul>
<li>这部分电路主要用于在DMA传送之前接受来自CPU的控制字和根据外部/内部DMA请求向CPU转发总线请求；</li>
<li>DMA操作期间进行定时和发出读写控制信号；DMA操作结束后向CPU发出中断申请和状态信息。</li>
</ul>
</li>
</ul>
<p>DMA的基本操作流程如下：</p>
<ol>
<li>接收到相应外设发出的就绪态信号后，向CPU发出DMA请求；</li>
<li>CPU响应请求，将总线控制权移交DMAC；</li>
<li>DMAC对内存寻址，执行数据传送；</li>
<li>能发出读/写控制信号；</li>
<li>能决定传送的字节数，判断DMA传送是否结束；</li>
<li>发DMA操作结束信号给CPU，释放总线，使CPU重新获得总线控制权；</li>
</ol>
</li>
</ol>
<h2 id="嵌入式文件系统"><a href="#嵌入式文件系统" class="headerlink" title="嵌入式文件系统"></a>嵌入式文件系统</h2><ol>
<li>文件系统简介</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_095049.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>为了对各类文件系统进行统一管理，Linux引入了虚拟文件系统VFS(Virtual File System)，为各类文件系统提供一个统一的操作界面和应用编程接口。例如用户可以在不同的文件系统上创建文件，但所使用的函数或命令都是相同的（有点oop的味道）。 </p>
<p>在嵌入式Linux应用中，主要的存储设备为RAM(通常是SDRAM——Synchronous dynamic random-access memory)和ROM(常采用FLASH存储器)，常用的基于存储设备的文件系统类型包括：jffs2, yaffs, cramfs, romfs, ramdisk, ramfs/tmpfs等。 </p>
<ol>
<li>Linux根文件系统</li>
</ol>
<p>Linux根文件系统包括<strong>Linux启动时所必须的目录和关键性的文件</strong>，例如Linux启动时都需要有init目录下的相关文件，在Linux挂载分区时Linux一定会找/etc/fstab这个挂载文件等，根文件系统中还包括了许多的应用程序bin目录等，任何包括这些Linux系统启动所必须的文件都可以成为根文件系统。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_095448.png" alt=""></p>
<ol>
<li><p>嵌入式文件系统</p>
<ul>
<li><p>基于FLASH的文件系统 </p>
<ul>
<li><p>Jffs2 </p>
<p>Jffs2: 日志闪存文件系统版本2，主要用于<strong>NOR型闪存</strong>，基于<strong>MTD</strong>（Memory Technology Device，一种设备文件，与flash内存交互，提供了一层抽象在硬件专用驱动和更高层的应用之间）驱动层。</p>
</li>
<li><p>Yaffs/Yaffs2 </p>
<p>yaffs/yaffs2是专为嵌入式系统使用<strong>NAND型闪存</strong>而设计的一种日志型文件系统。与jffs2相比，它减少了一些功能(例如不支持数据压缩)，所以速度更快，挂载时间很短，对内存的占用较小。另外，它还是跨平台的文件系统。</p>
</li>
<li><p>Cramfs </p>
<p>Cramfs，<strong>只读的</strong>压缩文件系统。它也<strong>基于MTD驱动程序</strong></p>
</li>
<li><p>Romfs </p>
<p>简单的、紧凑的、只读的文件系统，不支持动态擦写保存，按顺序存放数据</p>
</li>
</ul>
</li>
<li><p>基于RAM的文件系统 </p>
<ul>
<li><p>Ramdisk </p>
<p>Ramdisk是将一部分<strong>固定大小的内存当作分区来使用</strong>。它并非一个实际的文件系统，而是一种将实际的文件系统装入内存的机制，并且可以作为根文件系统。将一些经常被访问而又不会更改的文件(如只读的根文件系统)通过Ramdisk放在内存中，可以明显地提高系统的性能。</p>
</li>
<li><p>ramfs/tmpfs  </p>
<p>基于<strong>内存</strong>的文件系统，工作于<strong>虚拟文件系统(VFS)层</strong>，不能格式化，可以创建多个，在创建时可以指定其最大能使用的内存大小。 相对于传统的Ramdisk的不同之处主要在于：不能格式化，文件系统大小可随所含文件内容大小变化。Tmpfs的一个缺点是当系统重新引导时会丢失所有数据。</p>
</li>
</ul>
</li>
<li><p>NFS</p>
<p>网络文件系统（Network File System, NFS）采用<strong>客户/服务器工作模式</strong>。NFS协议本身并没有网络传输功能，而是基于<strong>远程过程调用</strong>（Remote Procedure Call，RPC）协议实现的；RPC提供了一个面向过程的远程服务的接口。RPC可以通过网络从远程主机程序上请求服务，而不需要了解底层网络技术的协议。RPC工作在OSI模型的会话层，它可以为遵从RPC协议应用层协议提供端口注册功能。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_101451.png" alt=""></p>
</li>
</ul>
<p>​</p>
</li>
<li><p>FLASH存储</p>
<p>(ppt资料不全，建议读读<a href="https://en.wikipedia.org/wiki/Flash_memory#NOR_memories" target="_blank" rel="noopener">wiki</a>，总结一下就是nor就像RAM一样，可以随机访问，也正因为这个，可以 execute in place。而nand更像一个硬盘，相对于前者，牺牲了 random-access和execute-in-place，但是它定位就是大容量存储，所以擦除、顺序读写都很快。)</p>
<p>Flash属于<strong>EEPROM（电可擦除可编程只读存储器）</strong>，是一种<strong>非易失存储器</strong>，Flash可以在<strong>断电的情况下长期保存信息</strong>，因此被广泛的应用在PC机的BIOS和嵌入式系统的存储设备。根据结构的不同可以将其分成<strong>NOR Flash和NAND Flash两种</strong>。</p>
<p>NOR Flash把整个存储区分成若干个扇区（Sector），而NAND Flash把整个存储区分成若干个块（Block），可以对以块或扇区为单位的内存单元进行擦写和再编程。</p>
<p>在NOR Flash上运行代码不需要任何的软件支持。在<strong>NAND Flash上进行同样操作</strong>时，通常<strong>需要</strong>驱动程序，也就是内存技术驱动程序<strong>（MTD ）</strong>。NAND Flash和NOR Flash在进行写入和擦除操作时都需要MTD。</p>
<p>PS：</p>
<p>NAND Flash的<strong>读、写操作以页为单位</strong>，而擦除操作则是以<strong>块为单位</strong>进行；NAND Flash只能从1写为0,不能从0写为1（意思是说只能写一次，然后擦了才能重新写）;</p>
<p>Nor Flash的擦除也是以块为单位，也是只能写一次，擦了才能写。</p>
</li>
<li><p>MTD</p>
<p>MTD 的主要目的是为了使新的Memory 设备的驱动更加简单，为此它在硬件和上层之间提供了一个抽象的接口。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_102332.png" alt=""></p>
<p>​</p>
</li>
</ol>
<h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><ol>
<li><p>低端嵌入式GUI：</p>
<p> μC/GUI、RT-Thread/GUI</p>
<pre><code>适用平台：
 单片机、ARM7、ARM Cortex-M
开发语言：
 C语言
操作系统：
  μC/OS、RT-Thread
</code></pre></li>
<li><p>中端嵌入式GUI：</p>
<p> miniGUI、OpenGUI、 Microwindows</p>
<pre><code>适用平台：
  ARM7、ARM9、ARM11、 ARM Cortex-R
开发语言：
 C语言
操作系统：
 嵌入式Linux、μC/Linux
</code></pre></li>
<li><p>高端嵌入式GUI：</p>
<p> Qt/Embedded( Qtopia )、Android、MFC</p>
<pre><code>适用平台：
 ARM9、ARM11、ARM Cortex-A
开发语言：
 C++语言、JAVA语言
操作系统：
 嵌入式Linux、Win CE/Win Phone
</code></pre></li>
</ol>
<p>也就一个信号与槽机制，不过很好理解。</p>
<p>在Qt程序中，利用信号（signal）和插槽（slot）机制进行对象间的通信</p>
<ul>
<li>事件处理的方式也是回调</li>
<li>当对象状态发生改变的时候，发出signal通知所有的slot接收signal，尽管它并不知道哪些函数定义了slot，而slot也同样不知道要接收怎样的signal</li>
</ul>
<h2 id="IPC问题"><a href="#IPC问题" class="headerlink" title="IPC问题"></a>IPC问题</h2><h3 id="休眠与唤醒"><a href="#休眠与唤醒" class="headerlink" title="休眠与唤醒"></a>休眠与唤醒</h3><p>安全休眠：</p>
<ol>
<li>不能在原子上下文进行休眠:</li>
<li>休眠时对外界一无所知，进程必须重新检测等待条件</li>
<li>进程只有确保会被其他进程唤醒，才能进入休眠</li>
</ol>
<h3 id="poll和select"><a href="#poll和select" class="headerlink" title="poll和select"></a>poll和select</h3><p>Poll、select都允许进程决定是否可以对一个或多个打开的文件做非阻塞的读取或写入；这些调用也会阻塞进程，直到给定的文件描述符集合中的任何一个可读取或写入；常常<strong>用于那些要使用多个输入或输出流而又不会阻塞于其中任何一个流的应用程序中</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</div></pre></td></tr></table></figure>
<p>和<code>select</code>一样，等待文件描述符集合中有一个就绪，不然一直阻塞。</p>
<p>第一个参数就是给定的“集合”了，其是一个结构体数组;第二个参数就是数组大小了；第三个参数是等待时间，单位ms</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> pollfd &#123;</div><div class="line">  <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></div><div class="line">  <span class="keyword">short</span> events;     <span class="comment">/* requested events */</span></div><div class="line">  <span class="keyword">short</span> revents;    <span class="comment">/* returned events */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>成功时，返回整数，表示结构的个数；返回0表示超时了，且没有描述符就绪；返回-1表示出错。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span></span>;</div></pre></td></tr></table></figure>
<p><code>nfds</code>是其它三个文件描述符集合中最大个数+1。</p>
<p>成功返回正数，表示文件描述符个数；超时返回0；错误返回-1</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timeval &#123;</div><div class="line">  <span class="keyword">long</span>    tv_sec;         <span class="comment">/* seconds */</span></div><div class="line">  <span class="keyword">long</span>    tv_usec;        <span class="comment">/* microseconds */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其它的见<a href="http://www.prime666.com/2017/06/20/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/">我</a></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>具体过程</p>
<ol>
<li><p><strong>编译预处理</strong></p>
<p>在预处理阶段，输入的是C语言的源文件，主要处理源文件中的#ifdef、#include和#define等命令，生成中间文件*.i。</p>
</li>
<li><p><strong>编译</strong><br>在编译阶段，输入的是中间文件.i，编译后生成汇编语言文件.s。</p>
</li>
<li><p><strong>汇编</strong><br>在汇编阶段，将输入的汇编文件.s转换成机器语言.o。</p>
</li>
<li><p><strong>链接</strong><br>在链接阶段，将.o文件及其它库文件汇集成一个可执行的二进制文件。</p>
</li>
</ol>
<p>目标文件中的内容至少有<strong>编译后的机器指令代码、数据</strong>。还包括了<strong>链接时所须要的一些信息</strong>，比如<strong>符号表、调试信息、字符串</strong>等。</p>
<p>ELF（Executable and Linking Format，执行时链接文件格式，属于目标文件的一种）文件的三种类型：</p>
<ul>
<li><p><strong>重定位</strong></p>
<p>编译器和汇编器创建<br>运行前需要被链接器处理</p>
</li>
<li><p><strong>可执行</strong></p>
<p>完成了所有重定位工作和符号解析<br>除了运行时解析的共享库符号</p>
</li>
<li><p><strong>共享库</strong></p>
<p>链接器需要的符号信息<br>运行时可以直接执行的代码</p>
</li>
</ul>
<p>main函数是第一个执行的吗？</p>
<ol>
<li>操作系统在创建进程后，把控制权交到了程序的入口，这个入口往往是运行库中的某个入口函数。</li>
<li>入口函数对运行库和程序运行环境进行初始化，包括堆、I/O、线程、全局变量构造，等等。</li>
<li>入口函数在完成初始化之后，调用main函数，正式开始执行程序主体部分。</li>
<li>main函数执行完毕之后，返回到入口函数，入口函数进行清理工作，包括全局变量析构、堆销毁、关闭I/O等，然后进行系统调用结束进程。</li>
</ol>
<p>ELF文件的加载与执行</p>
<ol>
<li>首先，shell进程通过fork系统调用，创建出一个新进程用来执行这个程序。</li>
<li>接着，新进程通过execve系统调用来加载可执行文件。execve进行一系列操作后结束，此时，新进程的上下文及内存已经初始化完毕，当CPU从该系统调用返回到用户空间时，就开始运行可执行文件中的代码。<ol>
<li>最终，用户程序执行完毕，shell进程被切换上台。</li>
</ol>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E4%B8%89%E4%B8%8Blinux%E9%A9%B1%E5%8A%A8/2017-07-02_145123.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树状数组]]></title>
      <url>https://www.prime666.com/2017/06/27/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>数据结构之二进制索引树。</p>
<a id="more"></a>
<h1 id="Binary-Indexed-Trees"><a href="#Binary-Indexed-Trees" class="headerlink" title="Binary Indexed Trees"></a>Binary Indexed Trees</h1><p>本文翻译自来自<a href="https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/" target="_blank" rel="noopener">topcoder</a>，膜大佬们。</p>
<p>这个算法最初用于数据压缩，现在多用于存储并累计频率操作。</p>
<p>定义问题如下：我们有n个盒子，可能的操作为：</p>
<ol>
<li>往第i个盒子增加石子(对应下文的update函数)</li>
<li>计算第k个盒子到第l个盒子的石子数量(包含第k个和第l个)</li>
</ol>
<p>针对这种问题情境，树状数组是一个比较好的解决方案。</p>
<h2 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h2><ul>
<li>BIT: 树状数组</li>
<li>MaxVal: 具有非0频率值的数组最大索引，其实就是问题规模或数组大小n</li>
<li>f[i]: 索引为i的频率值，即原始数组中第i个值。i=1…MaxVal</li>
<li>c[i]: 索引为i的累积频率值，c[i]=f[1]+f[2]+…+f[i]</li>
<li>tree[i]: 索引为i的BIT值(下文会介绍它的定义)，这里的i就是下文的idx</li>
<li>num^- : 整数num的补，即在num的二进制表示中，0换为1，1换成0。如：num=10101，则 num^- =01010</li>
</ul>
<p><strong>注意</strong>: 一般情况下，我们令f[0]=c[0]=tree[0]=0，所以各数组的索引都从１开始。 这样会给编程带来许多方便。</p>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>每个整数都能表示为2的幂次的和，累积频率也是类似，可以表示为子频率集合的总和。 本文假定每个子集合包含一些连续的频率值，各子集合间交集为空。</p>
<p><strong>idx</strong>记为<strong>BIT</strong>的索引，<strong>r</strong>记为<strong>idx</strong>的二进制表示中最右边的1后面0的个数， 比如<strong>idx</strong>=1100(即十进制的12)，那么<strong>r</strong>=2。<strong>tree[idx]</strong>记为f数组中， 索引从(idx-2^r +1)到idx的所有数的和，包含f[idx-2^r +1]和f[idx]。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>2</td>
<td>5</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>2</td>
</tr>
<tr>
<td>c</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>8</td>
<td>8</td>
<td>12</td>
<td>14</td>
<td>19</td>
<td>21</td>
<td>23</td>
<td>26</td>
<td>27</td>
<td>27</td>
<td>29</td>
</tr>
<tr>
<td>tree</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>4</td>
<td>1</td>
<td>4</td>
<td>0</td>
<td>12</td>
<td>2</td>
<td>7</td>
<td>2</td>
<td>11</td>
<td>3</td>
<td>4</td>
<td>0</td>
<td>29</td>
</tr>
</tbody>
</table>
<p>看如上列表就很清楚了~</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
</tr>
</thead>
<tbody>
<tr>
<td>tree</td>
<td>1</td>
<td>1..2</td>
<td>3</td>
<td>1..4</td>
<td>5</td>
<td>5..6</td>
<td>7</td>
<td>1..8</td>
<td>9</td>
<td>9..10</td>
<td>11</td>
<td>9..12</td>
<td>13</td>
<td>13..14</td>
<td>15</td>
<td>1..16</td>
</tr>
</tbody>
</table>
<p>把tree数组专门抽出来，这里的值表示f数组的的下标。于是有了下面这种图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//pat/2017-06-27_223313.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里阴影表示tree数组的值，白色柱形图表示f数组，也就是说，阴影就是频率累加的结果。</p>
<p>这个图肯定画的有点不好，实际上把右面的向左压平，其实它们是等长的。（不知道这么说好理解吗。）</p>
<hr>
<p>假设我们要得到索引为13的累积频率(即c[13])，在二进制表示中，13=1101。因此， 我们可以这样计算：c[1101]=tree[1101]+tree[1100]+tree[1000]，后面将详细讲解。</p>
<h2 id="分离出最后的1"><a href="#分离出最后的1" class="headerlink" title="分离出最后的1"></a>分离出最后的1</h2><p>最后的1表示一个整数的二进制表示中，从左向右数最后的那个1。</p>
<p>显然，需要极快的求出来，分析一下直接用位预算与即可！<strong>即把这个数和其相反数与。</strong></p>
<h2 id="求给定索引idx的累计频率"><a href="#求给定索引idx的累计频率" class="headerlink" title="求给定索引idx的累计频率"></a>求给定索引idx的累计频率</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (idx &gt; <span class="number">0</span>)&#123;</div><div class="line">        sum += tree[idx];</div><div class="line">        idx -= (idx &amp; -idx);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码如上。</p>
<p>Example for <strong>idx</strong> = 13; <strong>sum</strong> = 0:</p>
<table>
<thead>
<tr>
<th>iteration</th>
<th>idx</th>
<th>position of the last digit</th>
<th>idx &amp; -idx</th>
<th>sum</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>13 = 1101</td>
<td>0</td>
<td>1 (2 ^0)</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>12 = 1100</td>
<td>2</td>
<td>4 (2 ^2)</td>
<td>14</td>
</tr>
<tr>
<td>3</td>
<td>8 = 1000</td>
<td>3</td>
<td>8 (2 ^3)</td>
<td>26</td>
</tr>
<tr>
<td>4</td>
<td>0 = 0</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//pat/2017-06-27_224155.png" alt="arrows show path from index to zero which we use to get sum" title="">
                </div>
                <div class="image-caption">arrows show path from index to zero which we use to get sum</div>
            </figure>
<p>箭头表示了求解的路径。</p>
<p><strong>read</strong>函数迭代的次数<strong>是idx二进制表示中位的个数</strong>，其最大值为log(MaxVal)。 在本文中MaxVal=16。</p>
<h2 id="改变f数组中某一个值"><a href="#改变f数组中某一个值" class="headerlink" title="改变f数组中某一个值"></a>改变f数组中某一个值</h2><p>当我们改变f数组中的某个值，比如f[idx]，那么tree数组中哪些元素需要改变呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> idx ,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (idx &lt;= MaxVal)&#123;</div><div class="line">        tree[idx] += val;</div><div class="line">        idx += (idx &amp; -idx);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Let’s show example for <strong>idx</strong> = 5:</p>
<table>
<thead>
<tr>
<th>iteration</th>
<th>idx</th>
<th>position of the last digit</th>
<th>idx &amp; -idx</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>5 = 101</td>
<td>0</td>
<td>1 (2 ^0)</td>
</tr>
<tr>
<td>2</td>
<td>6 = 110</td>
<td>1</td>
<td>2 (2 ^1)</td>
</tr>
<tr>
<td>3</td>
<td>8 = 1000</td>
<td>3</td>
<td>8 (2 ^3)</td>
</tr>
<tr>
<td>4</td>
<td>16 = 10000</td>
<td>4</td>
<td>16 (2 ^4)</td>
</tr>
<tr>
<td>5</td>
<td>32 = 100000</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://community.topcoder.com/i/education/binaryIndexedTrees/bitupdate.gif" alt="updating tree; picture shows each step; (in brackets are tree frequencies before updating)" title="">
                </div>
                <div class="image-caption">updating tree; picture shows each step; (in brackets are tree frequencies before updating)</div>
            </figure>
<p>图中，括号内的数表示更新前的频率，箭头同样表示路径，从idx到maxval。</p>
<p>使用如上算法，就可以对BIT进行更新。</p>
<h2 id="读取f数组中的某一个值"><a href="#读取f数组中的某一个值" class="headerlink" title="读取f数组中的某一个值"></a>读取f数组中的某一个值</h2><p><strong>这里说明一点，实际使用中，f数组和c数组都是不存在的，使用时只有tree数组！现在的c和f只是为了说明。</strong></p>
<p>下面讨论如何根据tree数组求f数组。</p>
<p>其实，如果想简单点，直接用<code>read(idx) – read(idx – 1)</code>即可求出来。这种方法的时间复杂度是2*O(log n)。下面我们将重新写一个函数， 来得到一个稍快一点的版本，但其本质思想其实和<code>read[idx]-read[idx-1]</code>是一样的。</p>
<p>假如我们要求f[12]，很明显它等于c[12]-c[11]。根据上文讨论的规律，有如下的等式: (为了方便理解，数字写成二进制的表示)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">c[<span class="number">12</span>]=c[<span class="number">1100</span>]=tree[<span class="number">1100</span>]+tree[<span class="number">1000</span>]</div><div class="line">c[<span class="number">11</span>]=c[<span class="number">1011</span>]=tree[<span class="number">1011</span>]+tree[<span class="number">1010</span>]+tree[<span class="number">1000</span>]</div><div class="line">f[<span class="number">12</span>]=c[<span class="number">12</span>]-c[<span class="number">11</span>]=tree[<span class="number">1100</span>]-tree[<span class="number">1011</span>]-tree[<span class="number">1010</span>]</div></pre></td></tr></table></figure>
<p>从上面可以看到，c[12]和c[11]中包含公共部分，而这个公共部分 在实际计算中是可以不计算进来的。</p>
<p>让我们来考察相邻的两个索引值idx和idx-1。我们记idx-1的二进制表示为a0b(b全为1)， 那么idx即a0b+1=a1b^- .(b^- 全为0)。使用上文中读取累积频率的算法(即read函数) 来计算c[idx]，当sum加上tree[idx]后(sum初始为0)，idx减去最后的1得a0b^- , 我们将它记为z。</p>
<p>用同样的方法去计算c[idx-1]，因为idx-1的二进制表示是a0b(b全为1)，那么经过一定数量 的循环后，其值一定会变为a0b^- ,(不断减去最后的1)，而这个值正是上面标记的z。那么， 到这里已经很明显了，z往后的tree值是c[idx]和c[idx-1]都共有的， 相减只是将它们相互抵消，所以没有必要往下再计算了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">readSingle</span><span class="params">(<span class="keyword">int</span> idx)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> sum = tree[idx]; <span class="comment">// sum will be decreased</span></div><div class="line"><span class="keyword">if</span> (idx &gt; <span class="number">0</span>)&#123; <span class="comment">// special case</span></div><div class="line">    <span class="keyword">int</span> z = idx - (idx &amp; -idx); <span class="comment">// make z first</span></div><div class="line">    idx--; <span class="comment">// idx is no important any more, so instead y, you can use idx</span></div><div class="line">    <span class="keyword">while</span> (idx != z)</div><div class="line">    &#123; <span class="comment">// at some iteration idx (y) will become z</span></div><div class="line">        sum -= tree[idx]; <span class="comment">// substruct tree frequency which is between y and "the same path"</span></div><div class="line">        idx -= (idx &amp; -idx);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here’s an example for getting the actual frequency for index 12:</p>
<p>First, we will calculate <strong>z = 12 – (12 &amp; -12) = 8</strong>, <strong>sum = 11</strong></p>
<table>
<thead>
<tr>
<th>iteration</th>
<th>y</th>
<th>position of the last digit</th>
<th>y &amp; -y</th>
<th>sum</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>11 = 1011</td>
<td>0</td>
<td>1 (2 ^0)</td>
<td>9</td>
</tr>
<tr>
<td>2</td>
<td>10 = 1010</td>
<td>1</td>
<td>2 (2 ^1)</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>8 = 1000</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
</tbody>
</table>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://community.topcoder.com/i/education/binaryIndexedTrees/reada.gif" alt="read actual frequency at some index in BIT" title="">
                </div>
                <div class="image-caption">read actual frequency at some index in BIT</div>
            </figure>
<h2 id="缩放f数组"><a href="#缩放f数组" class="headerlink" title="缩放f数组"></a>缩放f数组</h2><p>有时候我们需要缩放整个f数组，然后更新tree数组。<strong>如果我们用一个因子去缩放f数组，我们就可以用该因子去 直接缩放tree数组。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scale</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= MaxVal ; i++)</div><div class="line">        tree[i] = tree[i] / c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回指定累计频率的索引"><a href="#返回指定累计频率的索引" class="headerlink" title="返回指定累计频率的索引"></a>返回指定累计频率的索引</h2><p>问题可描述为：给你一个累积频率值cumFre，如果存在c[idx]=cumFre，则返回idx； 否则返回-1。该问题最朴素及最简单的解决方法是依次求出c[1]到c[MaxVal]， 然后与给出的cumFre对比，如果存在c[idx]=cumFre，则返回idx;否则返回-1。 如果f数组中存在负数，那么该方法就是唯一的解决方案。但如果f数组是非负的， 那么c数组一定是非降的。即如果i&gt;=j，则c[i]&gt;=c[j]。这种情况下，利用二分查找的思想， 我们可以写出时间复杂度为O(log n)的算法。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if in tree exists more than one index with a same</span></div><div class="line"><span class="comment">// cumulative frequency, this procedure will return </span></div><div class="line"><span class="comment">// some of them (we do not know which one)</span></div><div class="line"></div><div class="line"><span class="comment">// bitMask - initialy, it is the greatest bit of MaxVal</span></div><div class="line"><span class="comment">// bitMask store interval which should be searched</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> cumFre)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>; <span class="comment">// this var is result of function</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> ((bitMask != <span class="number">0</span>) &amp;&amp; (idx &lt; MaxVal))&#123; <span class="comment">// nobody likes overflow :)</span></div><div class="line">        <span class="keyword">int</span> tIdx = idx + bitMask; <span class="comment">// we make midpoint of interval</span></div><div class="line">        <span class="keyword">if</span> (cumFre == tree[tIdx]) <span class="comment">// if it is equal, we just return idx</span></div><div class="line">            <span class="keyword">return</span> tIdx;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cumFre &gt; tree[tIdx])&#123; </div><div class="line">                <span class="comment">// if tree frequency "can fit" into cumFre,</span></div><div class="line">                <span class="comment">// then include it</span></div><div class="line">            idx = tIdx; <span class="comment">// update index </span></div><div class="line">            cumFre -= tree[tIdx]; <span class="comment">// set frequency for next loop </span></div><div class="line">        &#125;</div><div class="line">        bitMask &gt;&gt;= <span class="number">1</span>; <span class="comment">// half current interval</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cumFre != <span class="number">0</span>) <span class="comment">// maybe given cumulative frequency doesn't exist</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> idx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// if in tree exists more than one index with a same</span></div><div class="line"><span class="comment">// cumulative frequency, this procedure will return </span></div><div class="line"><span class="comment">// the greatest one</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findG</span><span class="params">(<span class="keyword">int</span> cumFre)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> ((bitMask != <span class="number">0</span>) &amp;&amp; (idx &lt; MaxVal))&#123;</div><div class="line">        <span class="keyword">int</span> tIdx = idx + bitMask;</div><div class="line">        <span class="keyword">if</span> (cumFre &gt;= tree[tIdx])&#123; </div><div class="line">                <span class="comment">// if current cumulative frequency is equal to cumFre, </span></div><div class="line">                <span class="comment">// we are still looking for higher index (if exists)</span></div><div class="line">            idx = tIdx;</div><div class="line">            cumFre -= tree[tIdx];</div><div class="line">        &#125;</div><div class="line">        bitMask &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cumFre != <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> idx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>First iteration</th>
<th>tIdx is 16; tree[16] is greater than 21; half bitMask and continue</th>
</tr>
</thead>
<tbody>
<tr>
<td>Second iteration</td>
<td>tIdx is 8; tree[8] is less than 21, so we should include first 8 indexes in result, remember idx because we surely know it is part of result; subtract tree[8] of cumFre (we do not want to look for the same cumulative frequency again – we are looking for another cumulative frequency in the rest/another part of tree); half bitMask and contiue</td>
</tr>
<tr>
<td>Third iteration</td>
<td>tIdx is 12; tree[12] is greater than 9 (there is no way to overlap interval 1-8, in this example, with some further intervals, because only interval 1-16 can overlap); half bitMask and continue</td>
</tr>
<tr>
<td>Forth iteration</td>
<td>tIdx is 10; tree[10] is less than 9, so we should update values; half bitMask and continue</td>
</tr>
<tr>
<td>Fifth iteration</td>
<td>tIdx is 11; tree[11] is equal to 2; return index (tIdx)</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GFS]]></title>
      <url>https://www.prime666.com/2017/06/27/GFS/</url>
      <content type="html"><![CDATA[<p>读GFS论文，笔记</p>
<a id="more"></a>
<h1 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h1><p>本文翻译自<a href="http://www.cse.buffalo.edu/faculty/tkosar/cse710_spring14/papers/gpfs.pdf" target="_blank" rel="noopener">谷歌学术的一篇文章</a>，未逐字逐句翻译，很多细节忽略了，只是把大体框架记录了下来，如果对某一点实现细节感兴趣，请读原文。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>组件失效是常态而不是异常。</li>
<li>和传统标准比文件都很大，多个GB的文件很常见。</li>
<li>大多数文件更新的操作都是追加数据而不是覆盖已有的数据。随机读写几乎不存在，一旦写入一般只是读且常常是顺序读。追加数据需要考量性能优化和原子性。</li>
<li>应用程序和文件系统 API  的协同设计提高了整个系统的灵活性。比如，放松了一致性模型的要求，引入原子追加操作而不需要额外的同步。</li>
</ul>
<h2 id="设计概述"><a href="#设计概述" class="headerlink" title="设计概述"></a>设计概述</h2><h3 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h3><ul>
<li>组件都是廉价的，必须持续监测并修复错误。</li>
<li>系统会存储一定数量的大文件。针对大文件必须有效的管理，小文件就不用了。</li>
<li>工作负载主要是大规模的流式读取和小规模的随机读取。性能要求高的应用可以把小的随机读取排序，这样可以减少指针前后移动。</li>
<li>工作负载还包括大规模的顺序追加式写文件，一旦写入很少修改。对于小规模随机写也是支持的，但是性能不高。</li>
<li>系统必须高效的、行为定义明确的实现多客户端并行追加数据到同一个文件里的语意。文件常采用“生产者——消费者”队列或多路文件合并操作。通常有数百个生产者，分别运行在每一台机器上，同时对一个文件进行追加操作。<strong>具有最小同步开销的原子性至关重要。</strong>文件可能被稍后读也可能被消费者同时读。</li>
<li>高度稳定的带宽比低延迟更重要。我们的目标程序绝大部分要求能够高速率的、大批量的处理数据，极少有程序对单一的读写操作有严格的响应时间要求。</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>尽管GFS没有实现POSIX的标准，但是提供了相似的接口。除了常见的操作外，额外提供了<strong>快照和记录追加</strong>操作。“快照”以低代价创建一个文件或者一个目录树的副本，而“记录追加”可以允许多个客户端并发追加一个文件，同时保证每个客户端的追加操作都是原子性的。</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E6%95%B0%E6%8D%AE/2017-06-27_102307.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>一个GFS集群包括一个master结点和多个chunkserver结点，它被多个client访问。所有的这些都是商业的linux系统，运行着用户级的服务进程。文件被分为固定的块(chunk)，当每个块被创建时，master分配一个不可变的、全局唯一的64位块句柄（chunk handle）。chunkserver以linux文件的形式在本地存储这些chunk，通过chunk handle和byte range来读写它们。为了可靠性，默认每个chunk被备份在了多个chunkserver上，通常是3份。不过用户也可以自己制定备份 的级别。</p>
<p>Master 节点管理所有的文件系统元数据。这些元数据包括名字空间、访问控制信息、文件和 Chunk 的映射信息、以及当前 Chunk 的位置信息。Master 节点还管理着系统范围内的活动，比如，Chunk 租用管理 4 、孤儿 Chunk 5 的回收、以及 Chunk 在 Chunk 服务器之间的迁移。Master 节点使用心跳信息（HeartBeat）周期地和每个 Chunk服务器通讯，发送指令到各个 Chunk 服务器并接收 Chunk 服务器的状态信息。</p>
<p>客户端从master那里获取元数据，真正的数据是直接去和chunkserver交互的。无论是client还是chunkserver都不进行缓存，对于前者一般要么以流的形式读取一个大文件，要么工作集太大不能被缓存（不过缓存了元数据）；后者不需要是因为linux文件系统会负责缓存经常访问的文件的。</p>
<h3 id="单一主结点"><a href="#单一主结点" class="headerlink" title="单一主结点"></a>单一主结点</h3><p>我们必须减少对 Master 节点的读写，避免 Master 节点成为系统的瓶颈。客户端并不通过 Master 节点读写文件数据。反之，客户端向 Master 节点询问它应该联系的 Chunk 服务器。客户端将这些元数据信息缓存一段时间，后续的操作将直接和 Chunk 服务器进行数据读写操作。</p>
<p>首先，客户端把文件名和程序指定的字节偏移，根据固定的 Chunk 大小，转换成文件的 Chunk 索引。然后，它把文件名和 Chunk 索引发送给 Master 节点。Master 节点将相应的 Chunk 标识和副本的位置信息发还给客户端。客户端用文件名和 Chunk 索引作为 key 缓存这些信息。<br>之后客户端发送请求到其中的一个副本处，一般会选择最近的。请求信息包含了 Chunk 的标识和字节范围。在对这个 Chunk 的后续读取操作中，客户端不必再和 Master 节点通讯了，除非缓存的元数据信息过期或者文件被重新打开。实际上，客户端通常会在一次请求中查询多个 Chunk 信息，Master 节点的回应也可能包<br>含了紧跟着这些被请求的 Chunk 后面的 Chunk 的信息。在实际应用中，这些额外的信息在没有任何代价的情况下，避免了客户端和 Master 节点未来可能会发生的几次通讯。</p>
<h3 id="块大小"><a href="#块大小" class="headerlink" title="块大小"></a>块大小</h3><p>块大小的选择是一个关键，我们选择64MB。</p>
<ul>
<li><p>优点</p>
<ul>
<li>减少了client和master通信的次数。</li>
<li>采取较大的块，client可以对该块进行多次操作。这样就可以通过与 Chunk 服务器保持较长时间的 TCP 连接来减少网络负载。</li>
<li>减少了master结点需要保存的元数据的数量。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>一个小文件可能占据了一个chunk</p>
</li>
<li><p>热点文件所在chunk可能会被多次访问，这个chunkserver会成为“热点 ”。但是一般应用程序顺序读取占据多个chunk的大文件，所以这不是主要问题。</p>
<p>解决方法：增加chunk的备份，错开对该文件有需求的服务的启动时间。更长远的是让一个client从别的client获得该文件。</p>
</li>
</ul>
</li>
</ul>
<h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>master主要存储以下三类元数据：</p>
<ol>
<li>文件和chunk的命名空间</li>
<li>文件和chunk的映射关系</li>
<li>chunk的备份的位置</li>
</ol>
<p>以上三种数据都保存在master的内存中，但是前两种也被以记录变更日志的方式保存在master的本地磁盘和远程机器上，最后一个没有被永久保存，因为master在它启动时或者任何chunkserver加入这个cluster时向chunkserver轮询其chunk信息。</p>
<p>因为元数据保存在内存中，所以 Master 服务器的操作速度非常快。并且，Master 服务器可以在后台简单而高效的周期性扫描自己保存的全部状态信息。这种周期性的状态扫描也用于实现 Chunk 垃圾收集、在 Chunk服务器失效的时重新复制数据、通过 Chunk 的迁移实现跨 Chunk 服务器的负载均衡以及磁盘使用状况统计等功能。</p>
<p>操作日志包含了关键的元数据变更历史记录。这对 GFS 非常重要。这不仅仅是因为操作日志是元数据<strong>唯一的持久化存储记录</strong>，它也作为判断同步操作顺序的逻辑时间基线。文件和 Chunk，连同它们的版本，都由它们创建的逻辑时间唯一的、永久的标识。正是由于日志如此重要，我们会把日志复制到多台远程机器，并且只有把相应的日志记录写入到本地以及远程机器的硬盘后，才会响应客户端的操作请求。Master 服务器在灾难恢复时，通过重演操作日志把文件系统恢复到最近的状态。为了加速恢复的过程，通常在日志增长到一定程度后就对系统做一次checkpoint，将所有的状态数据写入一个 Checkpoint 文件。</p>
<h3 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h3><p>GFS 支持一个宽松的一致性模型，这个模型能够很好的支撑我们的高度分布的应用，同时还保持了相对简单且容易实现的优点。</p>
<h2 id="系统交互"><a href="#系统交互" class="headerlink" title="系统交互"></a>系统交互</h2><h3 id="租约Leases机制"><a href="#租约Leases机制" class="headerlink" title="租约Leases机制"></a>租约Leases机制</h3><p>使用租约（lease）机制来保持多个副本间变更顺序的一致性，Master 节点为 Chunk的一个副本建立一个租约，我们把这个副本叫做主 Chunk。设计租约机制的目的是为了最小化 Master 节点的管理负担。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//%E5%A4%A7%E6%95%B0%E6%8D%AE/2017-06-28_211939.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由上图可知，租约机制实现了数据流和控制流的解耦（decouple）。副本在主chunk的控制下，保证和主chunk操作顺序一致。</p>
<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><p>为了提高网络效率，我们采取了把数据流和控制流分开的措施。为了尽可能的避免出现网络瓶颈和高延迟的链接，每台机器都尽量的在网络拓扑中选择一台还没有接收到数据的、离自己最近的机器作为目标推送数据。（如上图粗线所示，数据流动不是client直接发给主chunk，而是按距离排序，为了最大化利用网络 ，数据被放入缓存区中，然后client发送命令再写入。）</p>
<h3 id="原子的记录追加"><a href="#原子的记录追加" class="headerlink" title="原子的记录追加"></a>原子的记录追加</h3><p>GFS 提供了一种原子的数据追加操作–记录追加（record append），传统的写是指定偏移量写入数据，但是如果并发写的话，会产生来自多个客户端的数据片段，它们不是顺序的。而追加操作不需要客户端提供偏移量，只要数据给我，GFS会给出偏移量，这类似于在 Unix 操作系统编程环境中，对以 O_APPEND 模式打开的文件。</p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>快照操作几乎可以瞬间完成对一个文件或者目录树做一个拷贝，并且几乎不会对正在进行的其它操作造成任何干扰。</p>
<h2 id="master结点的操作"><a href="#master结点的操作" class="headerlink" title="master结点的操作"></a>master结点的操作</h2><p>Master 节点执行所有的名称空间操作。此外，它还管理着整个系统里所有 Chunk 的副本：它决定 Chunk的存储位置，创建新 Chunk 和它的副本，协调各种各样的系统活动以保证 Chunk 被完全复制，在所有的 Chunk服务器之间的进行负载均衡，回收不再使用的存储空间。</p>
<h3 id="名称空间管理和锁"><a href="#名称空间管理和锁" class="headerlink" title="名称空间管理和锁"></a>名称空间管理和锁</h3><p>在逻辑上，GFS 的名称空间就是一个全路径和元数据映射关系的查找表。利用前缀压缩，这个表可以高效的存储在内存中。在存储名称空间的树型结构上，每个节点（绝对路径的文件名或绝对路径的目录名）都有一个关联的读写锁。通过这些读写锁，可以保证名称空间操作的正确性。</p>
<h3 id="副本的位置"><a href="#副本的位置" class="headerlink" title="副本的位置"></a>副本的位置</h3><p>Chunk 副本位置选择的策略服务两大目标：最大化数据可靠性和可用性，最大化网络带宽利用率。于是，不仅要在多个机器上存储，还应该在多个机架上进行存储。</p>
<h3 id="创建、复制、负载均衡"><a href="#创建、复制、负载均衡" class="headerlink" title="创建、复制、负载均衡"></a>创建、复制、负载均衡</h3><p>当 Chunk 的有效副本数量少于用户指定的复制因数的时候，Master 节点会重新复制它。Master 节点选择优先级最高的 Chunk，然后命令某个 Chunk 服务器直接从可用的副本”克隆”一个副本。最后，Master 服务器周期性地对副本进行重新负载均衡：它检查当前的副本分布情况，然后移动副本以便更好的利用硬盘空间、更有效的进行负载均衡。<br>创建一个chunk时master考虑因素如下:</p>
<ul>
<li>我们希望在低于平均硬盘使用率的 Chunk 服务器上存储新的副本。这样的做法最终能够平衡 Chunk服务器之间的硬盘使用率。</li>
<li>我们希望限制在每个 Chunk 服务器上“最近”的 Chunk 创建操作的次数。虽然创建操作本身是廉价的，但是创建操作也意味着随之会有大量的写入数据的操作。</li>
<li>我们希望把 Chunk 的副本分布在多个机架之间。</li>
</ul>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>当一个文件被应用程序删除时，Master 节点象对待其它修改操作一样，立刻把删除操作以日志的方式记录下来。但是不立即删除，而是把文件名改为一个包含删除时间戳的、隐藏的名字。Master 节点对文件系统命名空间做常规扫描的时候，它会删除所有三天前的隐藏文件（这个时间间隔是可以设置的）。直到文件被真正删除，它们仍旧可以用新的特殊的名字读取，也可以通过把隐藏文件改名为正常显示的文件名的方式“反删除”。</p>
<h3 id="版本检测"><a href="#版本检测" class="headerlink" title="版本检测"></a>版本检测</h3><p>无论何时，只要 Master 节点和 Chunk 签订一个新的租约，它就增加 Chunk 的版本号，然后通知最新的副本。Master 节点和这些副本都把新的版本号记录在它们持久化存储的状态信息中。Master 节点在例行的垃圾回收过程中移除所有的过期失效副本。</p>
<h2 id="容错和诊断"><a href="#容错和诊断" class="headerlink" title="容错和诊断"></a>容错和诊断</h2><h3 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h3><p>我们使用两条简单但是有效的策略保证整个系统的高可用性：快速恢复和复制。具体体现为不管 Master 服务器和 Chunk 服务器是如何关闭的，它们都被设计为可以在数秒钟内恢复它们的状态并重新启动；每个 Chunk 都被复制到不同机架上的不同的 Chunk 服务器上；为了保证 Master 服务器的可靠性，Master 服务器的状态也要复制。Master 服务器所有的操作日志和checkpoint 文件都被复制到多台机器上。</p>
<h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>每个 Chunk 服务器都使用 Checksum 来检查保存的数据是否损坏。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据我们的设计思路，我们认为组件失效是常态而不是异常，针对采用追加方式（有可能是并发追加）写入、然后再读取（通常序列化读取）的大文<br>件进行优化，以及扩展标准文件系统接口、放松接口限制来改进整个系统。</p>
<p>我们系统通过持续监控，复制关键数据，快速和自动恢复提供灾难冗余。Chunk 复制使得我们可以对Chunk 服务器的失效进行容错。高频率的组件失效要求系统具备在线修复机制，能够周期性的、透明的修复损坏的数据，也能够第一时间重新建立丢失的副本。此外，我们使用 Checksum 在磁盘或者 IDE 子系统级别检测数据损坏，在这样磁盘数量惊人的大系统中，损坏率是相当高的。</p>
<p>我们的设计保证了在有大量的并发读写操作时能够提供很高的合计吞吐量。我们通过分离控制流和数据流来实现这个目标，控制流在 Master 服务器处理，而数据流在 Chunk 服务器和客户端处理。当一般的操作涉及到 Master 服务器时，由于 GFS 选择的 Chunk 尺寸较大(alex 注：从而减小了元数据的大小)，以及通过 Chunk Lease 将控制权限移交给主副本，这些措施将 Master 服务器的负担降到最低。这使得一个简单、中心的 Master不会成为成为瓶颈。我们相信我们对网络协议栈的优化可以提升当前对于每客户端的写入吞吐量限制。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（六）]]></title>
      <url>https://www.prime666.com/2017/06/26/pat%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级1051——1060</p>
<a id="more"></a>
<h1 id="1051——1060"><a href="#1051——1060" class="headerlink" title="1051——1060"></a>1051——1060</h1><h2 id="1051-栈"><a href="#1051-栈" class="headerlink" title="1051[栈]"></a>1051[栈]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1051" target="_blank" rel="noopener">Pop Sequence</a></p>
<p><em>经典题目，给定入栈顺序，判断一个序列是不是出栈序列。</em></p>
<p>思路：</p>
<p>​    <strong>主循环是入栈的顺序，每次入栈一个，current指向下一个待判定的元素，如果current指向元素和栈顶元素相等即匹配成功，则弹栈。如果栈溢出，则返回false；否则看最后current是否等于N。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> M,N,K;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="comment">// bool flag=true;</span></div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">int</span> current=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)<span class="comment">//将1~N序列依次进栈</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">stack</span>.push_back(i);</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>.size()&gt;M)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty()&amp;&amp;<span class="built_in">stack</span>.back()==s[current])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">stack</span>.pop_back();</div><div class="line">            current++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current==N;<span class="comment">//等于N说明都匹配了，否则说明未匹配完全且栈未溢出</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;M,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[j]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(check(a))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1052-链表排序"><a href="#1052-链表排序" class="headerlink" title="1052[链表排序]"></a>1052[链表排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1052" target="_blank" rel="noopener">Linked List Sorting</a></p>
<p>思路：</p>
<p>​    <strong>可以发现，每个结点的值和地址是固定的，变得只是next指针，所以只需要把链表按照key排序，然后输出即可（next就是下一个的起始地址）。</strong></p>
<p><strong>这道题卡输入，输入的结点可能有的不在链表中，所以要剔除。而且，没有结点时候也要特别输出。另外，这里排序完不要再求next了，直接用下一个元素的地址即可，能少写就少写！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> addr;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Node&amp;o1,<span class="keyword">const</span> Node&amp; o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.val&lt;o2.val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,start;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;start);</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; s(<span class="number">100001</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> addr;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;addr);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;s[addr].val,&amp;s[addr].next);</div><div class="line">        s[addr].addr=addr;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Node&gt; res;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> point=start;point!=<span class="number">-1</span>;point=s[point].next)</div><div class="line">    &#123;</div><div class="line">        res.push_back(s[point]);</div><div class="line">    &#125;</div><div class="line">    sort(res.begin(),res.end(),cmp);</div><div class="line">    <span class="keyword">if</span>(res.size()&gt;<span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %05d\n"</span>,res.size(),res[<span class="number">0</span>].addr);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0 -1\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==res.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d %d"</span>,res[i].addr,res[i].val,<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,res[i].addr,res[i].val,res[i+<span class="number">1</span>].addr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1053-DFS"><a href="#1053-DFS" class="headerlink" title="1053[DFS]"></a>1053[DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1053" target="_blank" rel="noopener">Path of Equal Weight</a></p>
<p><em>在一棵树中从根开始遍历，找到叶子结点且路径权和等于给定的值。</em></p>
<p>思路：</p>
<p>​    <strong>从根开始DFS即可，和以前的图论Dijkstra后的DFS很像，不过为了提高效率，增加剪枝条件。题目要求路径非递减排序，这里可以先求出路径后排序；也可以直接在输入时，按权值从大到小排序，这样DFS后的顺序就满足题意了。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">101</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; weight;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp_path;</div><div class="line"><span class="keyword">int</span> N,M,S;</div><div class="line"><span class="keyword">int</span> total_weight=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">/*bool cmp(const vector&lt;int&gt; &amp;o1,const vector&lt;int&gt; &amp;o2)</span></div><div class="line">&#123;</div><div class="line">    auto end=min(o1.size(),o2.size());</div><div class="line">    for (int i=0;i&lt;end;++i)</div><div class="line">    &#123;</div><div class="line">        if(o1[i]&gt;o2[i])</div><div class="line">            return true;</div><div class="line">        else if(o1[i]&lt;o2[i])</div><div class="line">            return false;</div><div class="line">        else</div><div class="line">            continue;</div><div class="line">    &#125;</div><div class="line">    return false;//不知道为什么，不加这个就过不去最后一个用例,如果全部相等，true意味着翻转，false意味着和插入一样的顺序。</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> root)</span></span></div><div class="line">&#123;</div><div class="line">    tmp_path.push_back(weight[root]);</div><div class="line">    total_weight+=weight[root];</div><div class="line">    <span class="keyword">if</span>(total_weight&gt;S)<span class="comment">//提前剪枝，也可以不加这个，然后在下面的到达根节点语句块中手动求和。</span></div><div class="line">        <span class="keyword">goto</span> next;</div><div class="line">    <span class="keyword">if</span>(tree[root].empty())</div><div class="line">    &#123;<span class="comment">//已到达根节点</span></div><div class="line">        <span class="keyword">if</span>(total_weight==S)</div><div class="line">            res.push_back(tmp_path);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e:tree[root])</div><div class="line">            DFS(e);</div><div class="line">    &#125;</div><div class="line">    next:</div><div class="line">    tmp_path.pop_back();</div><div class="line">    total_weight-=weight[root];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;o1,<span class="keyword">const</span> <span class="keyword">int</span> &amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> weight[o1]&gt;weight[o2];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;M,&amp;S);</div><div class="line">    weight.resize(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;weight[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id,k,child;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child);</div><div class="line">            tree[id].push_back(child);</div><div class="line">        &#125;</div><div class="line">        sort(tree[id].begin(),tree[id].end(),cmp);</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>);</div><div class="line">    <span class="comment">//sort(res.begin(),res.end(),cmp);</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; arr:res)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.size();++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i!=arr.size()<span class="number">-1</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,arr[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1054-散列表"><a href="#1054-散列表" class="headerlink" title="1054[散列表]"></a>1054[散列表]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1054" target="_blank" rel="noopener">The Dominant Color</a></p>
<p><em>求出出现次数最多的数。</em></p>
<p>思路：</p>
<p>​    <strong>用hashtable统计每个数字出现次数然后找到最多的即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/26.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> M,N;</div><div class="line">    <span class="keyword">int</span> color;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dict;</div><div class="line">    <span class="keyword">int</span> max_p=<span class="number">-1</span>,point=<span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;color);</div><div class="line">            <span class="keyword">if</span>(dict.find(color)==dict.end())</div><div class="line">            &#123;</div><div class="line">                dict[color]=<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                dict[color]++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dict[color]&gt;M*N/<span class="number">2</span>&amp;&amp;dict[color]&gt;max_p)</div><div class="line">            &#123;</div><div class="line">                max_p=dict[color];</div><div class="line">                point=color;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,point);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1055-排序"><a href="#1055-排序" class="headerlink" title="1055[排序]"></a>1055[排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1055" target="_blank" rel="noopener">The World’s Richest</a></p>
<p>思路：<strong>多阶段排序的问题已经遇到很多了，不再赘述。这里搜索用了最朴素的算法，还好过了~</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> People</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">9</span>];</div><div class="line">    <span class="keyword">int</span> age,worth;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;People&gt; &amp;p,<span class="keyword">int</span> age_i,<span class="keyword">int</span> age_j,<span class="keyword">int</span> times)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e:p)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(count==times)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(e.age&gt;=age_i&amp;&amp;e.age&lt;=age_j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>,e.name,e.age,e.worth);</div><div class="line">            count++;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"None\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> People&amp;o1,<span class="keyword">const</span> People&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(o1.worth!=o2.worth)</div><div class="line">        <span class="keyword">return</span> o1.worth&gt;o2.worth;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(o1.age!=o2.age)</div><div class="line">        <span class="keyword">return</span> o1.age&lt;o2.age;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">strcmp</span>(o1.name,o2.name)&lt;<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;People&gt; p(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>,p[i].name,&amp;p[i].age,&amp;p[i].worth);</div><div class="line">    &#125;</div><div class="line">    sort(p.begin(),p.end(),cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> times,age_i,age_j;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;times,&amp;age_i,&amp;age_j);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,i+<span class="number">1</span>);</div><div class="line">        my_search(p,age_i,age_j,times);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1056-队列"><a href="#1056-队列" class="headerlink" title="1056[队列]"></a>1056[队列]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1056" target="_blank" rel="noopener">Mice and Rice</a></p>
<p><em>分组比赛选第一，也是经典题目</em></p>
<p>思路：<strong>用个队列，把所有元素按比赛顺序进队列即可，然后每一组第一名在出队列后在重新进队列。这里假设一个组group个人，那么除了第一之外其它人都是第group+1名。一开始题目输入理解错了，第二行是每个参赛者重量，第三行的序号排列顺序就是比赛顺序，而号码代表第二行第几个老鼠。mmp</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Mouse</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> input_order;</div><div class="line">    <span class="keyword">int</span> index;<span class="comment">//参赛顺序</span></div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">    <span class="keyword">int</span> rank;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Mouse&amp;o1,<span class="keyword">const</span> Mouse&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.input_order&lt;o2.input_order;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> Np,Ng;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;Np,&amp;Ng);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; we(Np);</div><div class="line">    <span class="built_in">vector</span>&lt;Mouse&gt; m(Np);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Np;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;we[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,num;i&lt;Np;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        m[i].weight=we[num];</div><div class="line">        m[i].input_order=num;</div><div class="line">        m[i].index=i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">deque</span>&lt;Mouse&gt; q;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Np;++i)</div><div class="line">        q.push_back(m[i]);</div><div class="line">    <span class="keyword">while</span>(!q.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> len=q.size();</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            m[q[<span class="number">0</span>].index].rank=<span class="number">1</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> group=len/Ng;</div><div class="line">        <span class="keyword">if</span>(len%Ng!=<span class="number">0</span>)</div><div class="line">            group++;<span class="comment">//一共需要分成几组</span></div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//每一小组人的计数</span></div><div class="line">        <span class="keyword">int</span> max_weight=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> point=<span class="number">-1</span>;<span class="comment">//指向每个小组最重的那个</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</div><div class="line">        &#123;</div><div class="line">            Mouse tmp=q[<span class="number">0</span>];</div><div class="line">            m[tmp.index].rank=group+<span class="number">1</span>;</div><div class="line">            q.pop_front();</div><div class="line">            count++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(tmp.weight&gt;max_weight)</div><div class="line">            &#123;</div><div class="line">                max_weight=tmp.weight;</div><div class="line">                point=tmp.index;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(count==Ng||i==len<span class="number">-1</span>)</div><div class="line">            &#123;<span class="comment">//小组进行完或者最后一个小组进行完</span></div><div class="line">                q.push_back(m[point]);</div><div class="line">                count=<span class="number">0</span>;</div><div class="line">                max_weight=<span class="number">-1</span>;</div><div class="line">                point=<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(m.begin(),m.end(),cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i!=m.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,m[i].rank);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,m[i].rank);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1057-二进制索引树-树状数组"><a href="#1057-二进制索引树-树状数组" class="headerlink" title="1057[二进制索引树/树状数组]"></a>1057[二进制索引树/树状数组]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1057" target="_blank" rel="noopener">Stack</a></p>
<p><em>此题主要求在一个栈中的中位数！要求必须用比较快的算法！</em></p>
<p>思路：<strong>一开始，我想着用map记录每个元素出现的次数，然后求中位数时从最小的开始累加出现次数，大于等于(size+1)/2为止。思路是对的，但是效率不够，超时了。于是需要一个更高级的数据结构——二进制索引树。这个数据结构详情见另一篇博客。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/27.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100002</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> tree[maxn];</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> v&amp;(-v);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> idx)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (idx&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        sum+=tree[idx];</div><div class="line">        idx-=lowbit(idx);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(idx&lt;=maxn<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        tree[idx]+=val;</div><div class="line">        idx+=lowbit(idx);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PeekMedian</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> left=<span class="number">1</span>,right=maxn<span class="number">-1</span>,mid,k=(<span class="built_in">stack</span>.size()+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">    <span class="keyword">while</span>(left &lt; right) &#123;<span class="comment">//注意这里二分法的变形，大于或等于都满足题意退出循环。</span></div><div class="line">        mid = (left + right) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(read(mid) &gt;= k)</div><div class="line">            right = mid;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            left = mid + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, left);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="keyword">char</span> op[<span class="number">12</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);</div><div class="line">        <span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">'o'</span>)</div><div class="line">        &#123;<span class="comment">//pop</span></div><div class="line">            <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">stack</span>.back());</div><div class="line">                update(<span class="built_in">stack</span>.back(),<span class="number">-1</span>);</div><div class="line">                <span class="built_in">stack</span>.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">'u'</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">            <span class="built_in">stack</span>.push_back(v);</div><div class="line">            update(v,<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">                PeekMedian();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1058-进制转换"><a href="#1058-进制转换" class="headerlink" title="1058[进制转换]"></a>1058[进制转换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1058" target="_blank" rel="noopener">A+B in Hogwarts</a></p>
<p>思路：<strong>非常简单的进制转换。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/28.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> G1,S1,K1,G2,S2,K2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>,&amp;G1,&amp;S1,&amp;K1);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d"</span>,&amp;G2,&amp;S2,&amp;K2);</div><div class="line">    G1+=G2;S1+=S2;K1+=K2;</div><div class="line">    S1+=K1/<span class="number">29</span>;K1%=<span class="number">29</span>;</div><div class="line">    G1+=S1/<span class="number">17</span>;S1%=<span class="number">17</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d.%d.%d"</span>,G1,S1,K1);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1059-素数分解"><a href="#1059-素数分解" class="headerlink" title="1059[素数分解]"></a>1059[素数分解]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1059" target="_blank" rel="noopener">Prime Factors</a></p>
<p>思路：<strong>先筛选出素数表，然后从小到大一个一个判断即可。建立素数表的过程可以记下来</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/28.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; table(<span class="number">500000</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;<span class="number">500000</span>;i++)<span class="comment">//埃氏筛选法——简化版</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;i*j&lt;<span class="number">500000</span>;j++)</div><div class="line">            table[i*j]= <span class="literal">false</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">int</span> a;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld="</span>,a);</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> first=<span class="literal">true</span>,valid;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;a&gt;=<span class="number">2</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> exponent=<span class="number">0</span>;valid= <span class="literal">false</span>;</div><div class="line">        <span class="keyword">while</span>(table[i]&amp;&amp;a%i==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            exponent++;</div><div class="line">            a/=i;</div><div class="line">            valid=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*if(first)</span></div><div class="line">        &#123;</div><div class="line">            if(exponent==1)</div><div class="line">            &#123;</div><div class="line">                printf("%d",i);</div><div class="line">                first= false;//注意，这里first不能放在外边，不然第一个如果不满足题意，first也被重置了！！！坑苦了我</div><div class="line">            &#125;</div><div class="line">            else if(exponent&gt;=2)</div><div class="line">            &#123;</div><div class="line">                printf("%d^%d",i,exponent);</div><div class="line">                first= false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            if(exponent==1)</div><div class="line">            &#123;</div><div class="line">                printf("*%d",i);</div><div class="line">            &#125;</div><div class="line">            else if(exponent&gt;=2)</div><div class="line">            &#123;</div><div class="line">                printf("*%d^%d",i,exponent);</div><div class="line">            &#125;</div><div class="line">        &#125;*/</div><div class="line">        <span class="keyword">if</span>(valid)<span class="comment">//表示i是其中一项</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(first)<span class="comment">//第一项特殊处理</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</div><div class="line">                first= <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"*%d"</span>,i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(exponent&gt;=<span class="number">2</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"^%d"</span>,exponent);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1060-科学计数法"><a href="#1060-科学计数法" class="headerlink" title="1060[科学计数法]"></a>1060[科学计数法]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1060" target="_blank" rel="noopener">Are They Equal</a></p>
<p>思路：<strong>令人绝望的字符串操作，本题会有输入前面有0，以及输入为0的情况，都需要特别处理，还有虽然题目说有效位不超过100位，但tm有0就得把数组开大点，反正不要钱，，，这道题值得复习时好好看看！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/28.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="keyword">char</span> a[<span class="number">10000</span>],b[<span class="number">10000</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,a,b);</div><div class="line">    <span class="keyword">int</span> dig_a=<span class="built_in">strlen</span>(a),dig_b=<span class="built_in">strlen</span>(b);<span class="comment">//a和b小数点的位置</span></div><div class="line">    <span class="keyword">int</span> start_a=<span class="number">0</span>,start_b=<span class="number">0</span>;<span class="comment">//a和b中第一个非0数字所在位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)</div><div class="line">        &#123;</div><div class="line">            dig_a=i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(b);j++)</div><div class="line">        <span class="keyword">if</span>(b[j]==<span class="string">'.'</span>)</div><div class="line">        &#123;</div><div class="line">            dig_b=j;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">while</span>(a[start_a]==<span class="string">'0'</span>||a[start_a]==<span class="string">'.'</span>) start_a++;</div><div class="line">    <span class="keyword">while</span>(b[start_b]==<span class="string">'0'</span>||b[start_b]==<span class="string">'.'</span>) start_b++;</div><div class="line">    <span class="keyword">int</span> exponent_a,exponent_b;</div><div class="line">    <span class="keyword">if</span>(start_a==<span class="built_in">strlen</span>(a))</div><div class="line">        exponent_a=<span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(dig_a&gt;=start_a)</div><div class="line">            exponent_a=dig_a-start_a;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            exponent_a=dig_a-start_a+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(start_b==<span class="built_in">strlen</span>(b))</div><div class="line">        exponent_b=<span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(dig_b&gt;=start_b)</div><div class="line">            exponent_b=dig_b-start_b;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            exponent_b=dig_b-start_b+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> res_a[<span class="number">101</span>],res_b[<span class="number">101</span>];</div><div class="line">    <span class="keyword">int</span> count_a=<span class="number">0</span>,count_b=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(count_a&lt;N)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(start_a&lt;<span class="built_in">strlen</span>(a)&amp;&amp;a[start_a]!=<span class="string">'.'</span>)</div><div class="line">            res_a[count_a++]=a[start_a];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(start_a&gt;=<span class="built_in">strlen</span>(a))</div><div class="line">            res_a[count_a++]=<span class="string">'0'</span>;</div><div class="line">        start_a++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(count_b&lt;N)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(start_b&lt;<span class="built_in">strlen</span>(b)&amp;&amp;b[start_b]!=<span class="string">'.'</span>)</div><div class="line">            res_b[count_b++]=b[start_b];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(start_b&gt;=<span class="built_in">strlen</span>(b))</div><div class="line">            res_b[count_b++]=<span class="string">'0'</span>;</div><div class="line">        start_b++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(res_a,res_b)==<span class="number">0</span>&amp;&amp;exponent_a==exponent_b)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"YES 0.%s*10^%d"</span>,res_a,exponent_a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NO 0.%s*10^%d 0.%s*10^%d"</span>,res_a,exponent_a,res_b,exponent_b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    </p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（五）]]></title>
      <url>https://www.prime666.com/2017/06/23/pat%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级1041——1050，唉，马上就没学上了:sad:</p>
<a id="more"></a>
<h1 id="1041——1050"><a href="#1041——1050" class="headerlink" title="1041——1050"></a>1041——1050</h1><h2 id="1041-查找"><a href="#1041-查找" class="headerlink" title="1041[查找]"></a>1041[查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1041" target="_blank" rel="noopener">Be Unique</a></p>
<p>思路：</p>
<p>​    <strong>建立字典，统计每个数字出现次数，第一个次数为1的数字即为结果。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in(N);</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dict;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</div><div class="line">        <span class="keyword">if</span>(dict.find(in[i])==dict.end())</div><div class="line">            dict[in[i]]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            dict[in[i]]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(dict[in[i]]==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,in[i]);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"None"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1042-模拟"><a href="#1042-模拟" class="headerlink" title="1042[模拟]"></a>1042[模拟]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1042" target="_blank" rel="noopener">Shuffling Machine</a></p>
<p>思路：</p>
<p>​    <strong>纯手工模拟，比谁细心！这个最后的输出方式很值得学习，不要自己慢慢码字符了！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;K);</div><div class="line">    <span class="keyword">int</span> shuffle[<span class="number">55</span>];<span class="comment">//第一个不用</span></div><div class="line">    <span class="keyword">int</span> start[<span class="number">55</span>],end[<span class="number">55</span>];<span class="comment">//先用1~52编号代表扑克牌，对应初始序。</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">54</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;shuffle[i]);</div><div class="line">        end[i]=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">54</span>;++j)<span class="comment">//拷贝</span></div><div class="line">            start[j]=end[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">54</span>;++j)</div><div class="line">        &#123;</div><div class="line">            end[shuffle[j]]=start[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> sign[<span class="number">6</span>]=&#123;<span class="string">"SHCDJ"</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">54</span>;++i)</div><div class="line">    &#123;</div><div class="line">        end[i]-=<span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c%d"</span>,sign[end[i]/<span class="number">13</span>],end[i]%<span class="number">13</span>+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(i!=<span class="number">54</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1043-BST树-后序遍历-镜像BST树"><a href="#1043-BST树-后序遍历-镜像BST树" class="headerlink" title="1043[BST树+后序遍历+镜像BST树]"></a>1043[BST树+后序遍历+镜像BST树]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1043" target="_blank" rel="noopener">Is It a Binary Search Tree</a></p>
<p><em>给出一个序列判断是不是BST或镜像BST的先序序列，是就输出对应的后序序列。</em></p>
<p>思路：</p>
<p>​    <strong>显然，不能建立二叉树判断，太繁琐。假定输入序列是先序，那么根据二叉树的性质，把它变成后序之后序列长度应该一样。于是，只需要写一个转换函数即可。注意，在这个函数中，应该分镜像和非镜像两种情况进行讨论。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; post;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> ismirror=<span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_post</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> tail)</span></span></div><div class="line">&#123;<span class="comment">//root和tail都是针对先序序列，root是先序第一个结点，tail是最后一个结点</span></div><div class="line">    <span class="keyword">if</span>(root&gt;tail)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> i=root+<span class="number">1</span>,j=tail;<span class="comment">//i，j用于确定左右子树。[root+1,i-1]是左子树，[j+1,tail]是右子树</span></div><div class="line">    <span class="keyword">if</span>(!ismirror)</div><div class="line">    &#123;<span class="comment">//BST树</span></div><div class="line">        <span class="keyword">for</span> (;i&lt;=tail&amp;&amp;pre[i]&lt;pre[root];i++);</div><div class="line">        <span class="keyword">for</span> (;j&gt;root&amp;&amp;pre[j]&gt;=pre[root];j--);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;<span class="comment">//镜像BST树</span></div><div class="line">        <span class="keyword">for</span> (;i&lt;=tail&amp;&amp;pre[i]&gt;=pre[root];++i);</div><div class="line">        <span class="keyword">for</span> (;j&gt;root&amp;&amp;pre[j]&lt;pre[root];--j);</div><div class="line">    &#125;</div><div class="line">   <span class="comment">/* if(i==j)//没有交叉表明到了树的最底层</span></div><div class="line">        return;*/</div><div class="line">    get_post(root+<span class="number">1</span>,i<span class="number">-1</span>);</div><div class="line">    get_post(j+<span class="number">1</span>,tail);</div><div class="line">    post.push_back(pre[root]);<span class="comment">//左右根的顺序加入结果中</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    pre.resize(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;pre[i]);</div><div class="line">    get_post(<span class="number">0</span>,N<span class="number">-1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(post.size()!=N)</div><div class="line">    &#123;</div><div class="line">        post.clear();</div><div class="line">        ismirror= <span class="literal">true</span>;</div><div class="line">        get_post(<span class="number">0</span>,N<span class="number">-1</span>);</div><div class="line">        <span class="keyword">if</span>(post.size()!=N)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,post[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,post[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1044-二分查找"><a href="#1044-二分查找" class="headerlink" title="1044[二分查找]"></a>1044[二分查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1044" target="_blank" rel="noopener">Shopping in Mars</a></p>
<p><em>经典问题：求出一个序列中的所有连续和要求等于给定的数，如果没有就尽量输出所有最小的连续和</em></p>
<p>思路：</p>
<p>​    <strong>输入的时候顺便求出连续和，然后二分查找。主循环i表示起点，终点pos，表示这次查找中最符合要求的连续子串为[i,pos]。另外，该函数返回这个子串的和。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> &amp;pos,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; sum)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> end=N,begin=i,mid;</div><div class="line">    <span class="keyword">int</span> res=INT32_MAX;</div><div class="line">    <span class="comment">//注意，题目中M最大一亿，所以，一开始我设置99999999就错误了。这里因为只是用于比较，不会相加，所以直接弄到最大。毕竟不会溢出</span></div><div class="line">    <span class="comment">//其实这里设置成10000 0001也可以通过</span></div><div class="line">    <span class="keyword">while</span> (begin&lt;=end)</div><div class="line">    &#123;</div><div class="line">        mid=(begin+end)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(sum[mid]-sum[i<span class="number">-1</span>]==M)</div><div class="line">        &#123;</div><div class="line">            pos=mid;</div><div class="line">            res=M;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum[mid]-sum[i<span class="number">-1</span>]&gt;M)</div><div class="line">        &#123;</div><div class="line">            end=mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">if</span>(sum[mid]-sum[i<span class="number">-1</span>]&lt;res)</div><div class="line">            &#123;</div><div class="line">                res=sum[mid]-sum[i<span class="number">-1</span>];</div><div class="line">                pos=mid;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            begin=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;<span class="comment">//res记录从起点i开始，满足要求的连续子串和</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sum(N+<span class="number">1</span>);</div><div class="line">    sum[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sum[i]);</div><div class="line">        sum[i]+=sum[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> min_v=sum[N];<span class="comment">//不能正好支付时，就是支付的最少的钱；否则就是M</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;<span class="comment">//i是查找的起点</span></div><div class="line">        <span class="keyword">int</span> pos;<span class="comment">//每次查找的终点</span></div><div class="line">        <span class="keyword">int</span> tmp=binary_search(i,pos,sum);</div><div class="line">        <span class="keyword">if</span>(tmp&gt;min_v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;min_v)</div><div class="line">        &#123;</div><div class="line">            min_v=tmp;</div><div class="line">            res.clear();</div><div class="line">            res.push_back(i);</div><div class="line">            res.push_back(pos);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            res.push_back(i);</div><div class="line">            res.push_back(pos);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size()<span class="number">-1</span>;i+=<span class="number">2</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d-%d\n"</span>,res[i],res[i+<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1045-LIS"><a href="#1045-LIS" class="headerlink" title="1045[LIS]"></a>1045[LIS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1045" target="_blank" rel="noopener">Favorite Color Stripe</a></p>
<p>思路：</p>
<p>​    <strong>这道题首先去除不喜欢的颜色。注意这道题的转化，一开始输入喜欢的颜色，我把颜色的顺序转换成下标，然后对剔除不喜欢颜色后的数组，求最长非递减序列的长度，即为结果！！！关键在于，把颜色按照“喜欢的顺序”转换成下标，这样非递减就是满足题意的顺序。这个思路非常666！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/24.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> favorite[<span class="number">201</span>];</div><div class="line"><span class="keyword">int</span> res[<span class="number">10000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,L;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">        favorite[x]=i;<span class="comment">//favorite数组建立了颜色到下标的映射。</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;L);</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//去除不喜欢的颜色后还剩多少个。</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,x;i&lt;L;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">        <span class="keyword">if</span>(favorite[x]&gt;=<span class="number">1</span>)<span class="comment">//是喜爱的颜色</span></div><div class="line">        &#123;</div><div class="line">            res[num++]=favorite[x];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> dp[num];<span class="comment">//dp[i]表示以i结尾的LIS长度</span></div><div class="line">    fill(dp,dp+num,<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> max_length=<span class="number">0</span>;<span class="comment">//这里应该设置成0，如果所有的颜色都不是喜欢的，就应该是0。但是-1也过了~</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)<span class="comment">//求LIS的过程</span></div><div class="line">    &#123;</div><div class="line">        dp[i]=<span class="number">1</span>;<span class="comment">//任何一个元素的LIS至少是1</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(res[i]&gt;=res[j])</div><div class="line">            &#123;</div><div class="line">                dp[i]=max(dp[i],dp[j]+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        max_length=max(dp[i],max_length);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,max_length);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1046-模拟"><a href="#1046-模拟" class="headerlink" title="1046[模拟]"></a>1046[模拟]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1046" target="_blank" rel="noopener">Shortest Distance</a></p>
<p><em>给出一个环，求任意两点间最短距离。这么简单的题我都跪了。。。mmp</em></p>
<p>思路：</p>
<p>​    <strong>如果能找准一个基点，这道题 就简单了。假定顶点编号为顺时针的一个环，用dist数组保存从结点1沿着顺时针方向到i的下一个结点的距离(1也不用特殊考虑，因为已经初始化为dist[0]=0)。然后查询时，让pre始终指向远一点的，dist[pre-1]与dist[back-1]就是二者距离差，最短路径长度要么是它，要么是总长度减去它。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> dist[N+<span class="number">1</span>];<span class="comment">//dist[i]表示沿着编号顺序，从1到i的下一个结点的距离</span></div><div class="line">    fill(dist,dist+N+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G[i]);</div><div class="line">        total+=G[i];</div><div class="line">        dist[i]=total;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;M);</div><div class="line">    <span class="keyword">int</span> pre,back,res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pre,&amp;back);</div><div class="line">        <span class="keyword">if</span>(back&gt;pre)</div><div class="line">            swap(pre,back);</div><div class="line">        res=min(dist[pre<span class="number">-1</span>]-dist[back<span class="number">-1</span>],total-(dist[pre<span class="number">-1</span>]-dist[back<span class="number">-1</span>]));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1047-查找"><a href="#1047-查找" class="headerlink" title="1047[查找]"></a>1047[查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1047" target="_blank" rel="noopener">Student List for Course</a></p>
<p><em>1039的变形，没卡string超时问题，老泪纵横啊</em></p>
<p>思路：</p>
<p>​    <strong>建立查询表查询即可，套路已经成熟。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res[K+<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,c;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> name;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;name;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>,index;j&lt;c;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;index);</div><div class="line">            res[index].push_back(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,res[i].size());</div><div class="line">        sort(res[i].begin(),res[i].end());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:res[i])</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1048-二分查找"><a href="#1048-二分查找" class="headerlink" title="1048[二分查找]"></a>1048[二分查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1048" target="_blank" rel="noopener">Find Coins</a></p>
<p><em>经典题目，求一个序列中的两个数和等于给定数，要求第一个小于等于第二个，且第一个尽可能小。</em></p>
<p>思路：</p>
<p>​    <strong>先从小到大排序，再二分查找即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">    sort(a.begin(),a.end());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;++i)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> target=M-a[i];</div><div class="line">        <span class="keyword">if</span>(binary_search(a.begin()+i+<span class="number">1</span>,a.end(),target))<span class="comment">//从i+1开始查找</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,a[i],M-a[i]);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1049-数学问题"><a href="#1049-数学问题" class="headerlink" title="1049[数学问题]"></a>1049[数学问题]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1049" target="_blank" rel="noopener">Counting Ones</a></p>
<p><em>纯数学问题，比较麻烦。</em></p>
<p>思路：</p>
<p>​    <strong>==从低位到高位，逐位考虑！==</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//pat/2017-06-25_163126.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>首先，把一个数分为三部分，current是当前考虑的那一位。于是分三种情况：首先是<code>current==0</code>，此时有0~left-1共left种情况可以使current为1；当<code>current==1</code>时，此时仍然有0——left-1共left种情况，然后再加上0——right共计right+1种情况；最后当<code>current&gt;=2</code>时，共有0——left共计left+1个情况。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,left,right,current;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(N/a)</div><div class="line">    &#123;</div><div class="line">        left=N/(a*<span class="number">10</span>);</div><div class="line">        right=N%a;</div><div class="line">        current=N/a%<span class="number">10</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(current==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=left*a;<span class="comment">//0~left-1共计left个情况</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(current==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            ans+=left*a+right+<span class="number">1</span>;<span class="comment">//0~right共计right+1个情况</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            ans+=(left+<span class="number">1</span>)*a;<span class="comment">//0~left共计left+1个情况</span></div><div class="line">        a*=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1050-集合"><a href="#1050-集合" class="headerlink" title="1050[集合]"></a>1050[集合]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1050" target="_blank" rel="noopener"> String Subtraction</a></p>
<p>思路：</p>
<p>​    <strong>散列表保存，在s2中的字符不输出即可！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/25.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> s1,s2;</div><div class="line">    getline(<span class="built_in">cin</span>,s1);</div><div class="line">    getline(<span class="built_in">cin</span>,s2);</div><div class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; remove;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:s2)</div><div class="line">    &#123;</div><div class="line">        remove.insert(e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:s1)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(remove.find(e)!=remove.end())</div><div class="line">        &#123;<span class="comment">//存在于集合中</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux网络编程（五）]]></title>
      <url>https://www.prime666.com/2017/06/21/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Linux服务器模型。</p>
<a id="more"></a>
<h1 id="Linux服务器模型"><a href="#Linux服务器模型" class="headerlink" title="Linux服务器模型"></a>Linux服务器模型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li><strong>循环服务器</strong>——同一时刻只能处理一个客户端请求</li>
<li><strong>并发服务器</strong>——同一时刻可以处理多个客户端的请求</li>
</ul>
<p><em>UDP服务器通常采用循环服务器模型，TCP服务器通常采用并发服务器模型</em></p>
<h2 id="TCP循环服务器模型"><a href="#TCP循环服务器模型" class="headerlink" title="TCP循环服务器模型"></a>TCP循环服务器模型</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_084745.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="UDP循环服务器模型"><a href="#UDP循环服务器模型" class="headerlink" title="UDP循环服务器模型"></a>UDP循环服务器模型</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_084756.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="UDP并发服务器模型"><a href="#UDP并发服务器模型" class="headerlink" title="UDP并发服务器模型"></a>UDP并发服务器模型</h2><h3 id="客户端请求在一个数据报中完成"><a href="#客户端请求在一个数据报中完成" class="headerlink" title="客户端请求在一个数据报中完成"></a>客户端请求在一个数据报中完成</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_084942.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="客户端请求在多个数据报中完成"><a href="#客户端请求在多个数据报中完成" class="headerlink" title="客户端请求在多个数据报中完成"></a>客户端请求在多个数据报中完成</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_085010.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="TCP并发服务器模型"><a href="#TCP并发服务器模型" class="headerlink" title="TCP并发服务器模型"></a>TCP并发服务器模型</h2><h3 id="一个子进程对应一个客户端"><a href="#一个子进程对应一个客户端" class="headerlink" title="一个子进程对应一个客户端"></a>一个子进程对应一个客户端</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_085234.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>模型简单</li>
<li>每个子进程完全独立</li>
<li>可以同时处理多个客户端</li>
<li>创建子进程开销较大，适合处理时间长的客户请求，例如FTP文件传输</li>
<li>当客户端数量大、客户请求处理时间短时会大大降低效率，如HTTP服务器</li>
</ul>
<h3 id="延迟创建子进程"><a href="#延迟创建子进程" class="headerlink" title="延迟创建子进程"></a>延迟创建子进程</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_085256.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>循环与并发混合的服务器模型</li>
<li>处理时间短的客户请求以循环方式完成</li>
<li>处理时间长的客户请求以并发方式完成</li>
<li>减少创建子进程的开销<ul>
<li>建立进程表项的开销</li>
<li>复制数据段和堆栈段的开销</li>
</ul>
</li>
</ul>
<h3 id="预创建子进程（数量固定）"><a href="#预创建子进程（数量固定）" class="headerlink" title="预创建子进程（数量固定）"></a>预创建子进程（数量固定）</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_085309.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>实现思路：服务器建立侦听socket，并创建子进程。所有子进程调用accept，无连接时将睡眠。有连接到来时所有子进程被唤醒。某一个子进程接受连接后，其他进程继续睡眠。</p>
<ul>
<li>响应速度快，节省创建子进程时间</li>
<li>需要预先估计创建进程的数量<ul>
<li>预创建子进程数量少时将导致客户端等待</li>
<li>预创建子进程数量多时将浪费系统资源</li>
</ul>
</li>
</ul>
<p>一个预先创建子进程的例子。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-21.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFLEN 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 8888</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PIDNUMB 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_connect</span><span class="params">(<span class="keyword">int</span> s_s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s_c;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client;</div><div class="line">    <span class="keyword">socklen_t</span> len= <span class="keyword">sizeof</span>(client);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        s_c=accept(s_s,(<span class="keyword">struct</span> sockaddr*)&amp;client,&amp;len);</div><div class="line">        <span class="keyword">char</span> buff[BUFFLEN];</div><div class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(buff,<span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</div><div class="line">        n=recv(s_c,buff,BUFFLEN,<span class="number">0</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"receive %d bytes"</span>,n);</div><div class="line">        <span class="built_in">memset</span>(buff,<span class="number">0</span>, <span class="keyword">sizeof</span>(buff));</div><div class="line">        <span class="built_in">sprintf</span>(buff,<span class="string">"I receieved!"</span>);</div><div class="line">        send(s_c,buff,<span class="built_in">strlen</span>(buff),<span class="number">0</span>);</div><div class="line">        close(s_c);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_int</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s_s;</div><div class="line">  	signal(SIGINT,sig_int);</div><div class="line">    <span class="keyword">struct</span> sockaddr_in server;</div><div class="line">    s_s=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">    bzero(&amp;server, <span class="keyword">sizeof</span>(server));</div><div class="line"></div><div class="line">    server.sin_family=AF_INET;</div><div class="line">    server.sin_port=htons(SERVER_PORT);</div><div class="line">    server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    bind(s_s,(<span class="keyword">struct</span> sockaddr *)&amp;server, <span class="keyword">sizeof</span>(server));</div><div class="line">    listen(s_s,BACKLOG);</div><div class="line"></div><div class="line">    <span class="keyword">pid_t</span> pid[PIDNUMB];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;PIDNUMB;++i)</div><div class="line">    &#123;</div><div class="line">        pid[i]=fork();</div><div class="line">        <span class="keyword">if</span>(pid[i]==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            handle_connect(s_s);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//不让父进程退出，不然所有子进程都被init收养了（其实也没关系，依旧可以运行）。</span></div><div class="line">    close(s_s);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="预创建子进程（动态）"><a href="#预创建子进程（动态）" class="headerlink" title="预创建子进程（动态）"></a>预创建子进程（动态）</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_085815.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>实现思路1：</p>
<ul>
<li>服务器建立socket，并创建一定数量子进程</li>
<li>服务器父进程维护所有子进程的状态表，父进程和子进程通过<strong>管道通信</strong></li>
<li>子进程接受连接时给父进程发1，关闭连接时发0。</li>
<li>父进程收到1时检查空闲子进程数目是否小于下限，小于下限则创建新的子进程。</li>
<li>父进程收到0时检查空闲子进程数目是否大于下限，大于下限则终止一些子进程。</li>
</ul>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-21_090204.png" alt=""></p>
<p>实现思路：</p>
<ul>
<li>服务器建立侦听socket，并创建固定数量子进程</li>
<li>服务器父进程维护所有子进程的状态表，父进程和子进程通过<strong>UNIX域socket通信</strong></li>
<li>父进程在有空闲子进程时接收连接，将已连接socket描述符传递给空闲子进程</li>
<li>子进程处理客户请求，结束后通知父进程，父进程修改子进程状态</li>
</ul>
<p><strong>和上面的区别在于，这里由父进程完成连接，然后把描述符传给子进程。</strong></p>
<h3 id="多路复用IO"><a href="#多路复用IO" class="headerlink" title="多路复用IO"></a>多路复用IO</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span></span>;</div></pre></td></tr></table></figure>
<p>该函数可以先对需要操作的描述符进行查询，看是否可读、可写或有错误。</p>
<p>各个参数解释如下：</p>
<p><code>nfds</code>：一个整型变量，比文件描述符集合中的最大的文件描述符大1。</p>
<p><code>readfds</code>：可读的描述符集合。函数监视描述符集合中是否有描述符可读，函数返回时将清除集合中不可读的描述符。</p>
<p><code>writefds</code>：同上，只不过是写的描述符集合。</p>
<p><code>exceptfds</code>:监视文件集中的任何文件是否发生错误。</p>
<p><code>timeout</code>：设置最长等待时间，如果为NULL就工作在阻塞模式。</p>
<p>返回值大于零表示三个描述符集合中至少一个不为空，返回0表示超时，-1表示错误。</p>
<hr>
<p>服务器实现思路：</p>
<ul>
<li>设置读和写描述符集合，其中读描述符集合包括侦听socket</li>
<li>调用select测试socket描述符是否就绪</li>
<li>侦听socket就绪则接收新连接</li>
<li>其他socket就绪则执行读写操作</li>
</ul>
<p><strong>要求将所有socket描述符设置为非阻塞方式。</strong></p>
<p>特点：</p>
<ul>
<li>优点<ul>
<li>只需要一个进程来处理所有客户机请求</li>
<li>没有创建和管理进程的开销，系统资源消耗少</li>
<li>没有进程间通信</li>
</ul>
</li>
<li>缺点<ul>
<li>服务器必须依次处理所有的请求，编程较复杂</li>
<li>服务器循环处理所有就绪客户端，可能会造成延时较长</li>
</ul>
</li>
</ul>
<p><strong>适合于请求多但请求内容少的服务器。</strong></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux网络编程（四）]]></title>
      <url>https://www.prime666.com/2017/06/20/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>linux基本IO模型</p>
<a id="more"></a>
<h1 id="Linux的IO模型"><a href="#Linux的IO模型" class="headerlink" title="Linux的IO模型"></a>Linux的IO模型</h1><h2 id="阻塞式IO模型（默认）"><a href="#阻塞式IO模型（默认）" class="headerlink" title="阻塞式IO模型（默认）"></a>阻塞式IO模型（默认）</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>结构简单容易同步</li>
<li>进程可能永远阻塞或阻塞时间过长</li>
<li>阻塞时进程效率低</li>
</ul>
<h3 id="产生阻塞的函数－读操作："><a href="#产生阻塞的函数－读操作：" class="headerlink" title="产生阻塞的函数－读操作："></a>产生阻塞的函数－读操作：</h3><p><strong>read、readv、recv、recvfrom和recvmsg</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_220433.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>TCP协议以字节为单位，只要接收缓冲区中出现数据，进程被唤醒</p>
<p>UDP协议以数据报为单位，当完整的数据报到达时，进程被唤醒</p>
<h3 id="产生阻塞的函数－写操作"><a href="#产生阻塞的函数－写操作" class="headerlink" title="产生阻塞的函数－写操作"></a>产生阻塞的函数－写操作</h3><p><strong>write、writev、send、sendto和sendmsg</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_220501.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>写操作发生阻塞的几率低于读操作</li>
<li>UDP协议写操作永远不会阻塞</li>
</ul>
<h3 id="产生阻塞的函数－建立连接"><a href="#产生阻塞的函数－建立连接" class="headerlink" title="产生阻塞的函数－建立连接"></a>产生阻塞的函数－建立连接</h3><p><strong>connect</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_220532.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>客户机TCP协议接收到服务器TCP协议返回的对SYN数据段的确认时，函数connect成功返回</li>
<li>TCP协议的连接操作至少需要一个往返时间</li>
<li>UDP的connect操作不产生连接，因此不阻塞</li>
</ul>
<h3 id="产生阻塞的函数－TCP协议接受连接"><a href="#产生阻塞的函数－TCP协议接受连接" class="headerlink" title="产生阻塞的函数－TCP协议接受连接"></a>产生阻塞的函数－TCP协议接受连接</h3><p><strong>accept</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_220545.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="阻塞式I-O模型的超时控制"><a href="#阻塞式I-O模型的超时控制" class="headerlink" title="阻塞式I/O模型的超时控制"></a>阻塞式I/O模型的超时控制</h3><h4 id="调用alarm函数"><a href="#调用alarm函数" class="headerlink" title="调用alarm函数"></a>调用alarm函数</h4><ul>
<li>超时到达时产生SIGALARM信号中断I/O函数阻塞，对于4种产生阻塞的函数均有效</li>
<li>多次调用alarm时，产生的SIGALARM信号无法区分是哪一次超时引发的，无法实现超时控制</li>
</ul>
<h4 id="设置socket选项"><a href="#设置socket选项" class="headerlink" title="设置socket选项"></a>设置socket选项</h4><p>设置<strong>SO_RCVTIMEO和SO_SNDTIMEO</strong>选项，设置了这两个选项之后，所有的读写操作可以保证在超时范围内返回。只需设置一次选项，对以后的读写操作均有效<br>，不适用于<code>accept</code>和<code>connect</code>。</p>
<h2 id="非阻塞IO模型"><a href="#非阻塞IO模型" class="headerlink" title="非阻塞IO模型"></a>非阻塞IO模型</h2><p>可以设置socket为非阻塞模式，在非阻塞模式socket上进行I/O操作时，如果操作不能完成，将以错误返回。4种I/O操作在非阻塞式socket下均不会阻塞。</p>
<p>一个示例如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_221940.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ol>
<li>不会产生阻塞</li>
<li>输入方式效率比较高</li>
</ol>
<p>缺点：</p>
<ol>
<li>长时间占用CPU</li>
</ol>
<h3 id="设置为非阻塞模式"><a href="#设置为非阻塞模式" class="headerlink" title="设置为非阻塞模式"></a>设置为非阻塞模式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span></span>;</div></pre></td></tr></table></figure>
<p>其中<code>request</code>参数类别实在很多，就不总结了。简单说，如果设置非阻塞，就这样写：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ioctl(sockfd,FIONBIO,&amp;on);</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, ... <span class="comment">/* arg */</span> )</span></span>;</div></pre></td></tr></table></figure>
<p>同样，设置套接字为非阻塞IO的方法如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> flags;</div><div class="line">flag=fcntl(sockfd,F_GETFL,<span class="number">0</span>);<span class="comment">//获取套接字sockfd的属性值</span></div><div class="line">fcntl(sockfd,F_SETFL,flag|O_NONBLOCK);<span class="comment">//将属性值或上非阻塞标志</span></div></pre></td></tr></table></figure>
<h3 id="对四种IO操作返回的错误"><a href="#对四种IO操作返回的错误" class="headerlink" title="对四种IO操作返回的错误"></a>对四种IO操作返回的错误</h3><ul>
<li>读操作——接收缓冲区无数据时返回EWOULDBLOCK</li>
<li>写操作——发送缓冲区无空间时返回EWOULDBLOCK；空间不够时部分拷贝，返回实际拷贝字节数</li>
<li>建立连接——启动3次握手，立刻返回错误EINPROGRESS；服务器客户端在同一主机上connect立即返回成功</li>
<li>接受连接——没有新连接返回EWOULDBLOCK</li>
</ul>
<h3 id="检查IO是否完成"><a href="#检查IO是否完成" class="headerlink" title="检查IO是否完成"></a>检查IO是否完成</h3><ol>
<li>轮询</li>
<li><code>select</code>函数</li>
</ol>
<h2 id="多路复用模型"><a href="#多路复用模型" class="headerlink" title="多路复用模型"></a>多路复用模型</h2><p>简单说就是在等待的时候加入超时的时间，超时时间未到时和阻塞IO一致，到达超时时间后若仍然无数据就返回。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_222010.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>只检查一个socket描述符时和阻塞式I/O模型类似，只是阻塞的位置不同，但效率低于阻塞式I/O模型</li>
<li>在多个socket描述符上进行I/O操作时效率高于阻塞式I/O</li>
</ul>
<h3 id="socket描述符读就绪"><a href="#socket描述符读就绪" class="headerlink" title="socket描述符读就绪"></a>socket描述符读就绪</h3><ul>
<li>接收缓冲区中的数据量≥接收最低限度（默认接收限度为1（TCP为1字节，UDP为1个数据报），可以用SO_RCVLOWAT修改默认值）。</li>
<li>读通道被关闭，收到FIN字段</li>
<li>侦听socket的完成连接队列不为空</li>
<li>非阻塞式socket的connect操作过程中出现错误</li>
</ul>
<h3 id="socket描述符写就绪"><a href="#socket描述符写就绪" class="headerlink" title="socket描述符写就绪"></a>socket描述符写就绪</h3><ul>
<li>发送缓冲区中可用空间≥发送最低限度（TCP默认发送最低限度为2048字节，可以用SO_SNDLOWAT修改默认值；UDP协议没有实际的发送缓冲区，其发送缓冲区空间总是大于发送下限，所以UDP socket总是写就绪）。</li>
<li>写通道被关闭。</li>
<li>非阻塞式socket的connect操作成功</li>
</ul>
<h3 id="socket描述符异常就绪条件"><a href="#socket描述符异常就绪条件" class="headerlink" title="socket描述符异常就绪条件"></a>socket描述符异常就绪条件</h3><p>用于带外数据。</p>
<h2 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h2><p>在进程开始的时候注册一个信号处理的回调函数，当函数到达时，发送信号SIGIO，回调函数进行处理。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-20_222029.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>等待I/O操作可以进行的过程中不用阻塞，可以执行其他操作</li>
<li>程序结构简单</li>
<li>更适用于UDP协议<ul>
<li>TCP协议在很多环节上会产生SIGIO信号，难以区分产生信号的原因</li>
<li>UDP只在收到数据包或错误时产生SIGIO信号</li>
</ul>
</li>
</ul>
<h2 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h2><p>与信号驱动IO模型类似，区别在于在数据复制完成时才发送信号，而信号驱动IO是数据到达就发送信号。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux网络编程（三）]]></title>
      <url>https://www.prime666.com/2017/06/20/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>LinuxIPC问题</p>
<a id="more"></a>
<h1 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h1><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p><strong>单向</strong>通信通道。只适用于<strong>父子进程间</strong>通信，在进程间实现双向数据传输必须创建两个管道。</p>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> pipefd[<span class="number">2</span>])</span></span>;</div></pre></td></tr></table></figure>
<p>其中<code>pipefd</code>是用于通信的一对文件描述符，<code>pipefd[0]</code>用于读，<code>pipefd[1]</code>用于写。</p>
<p>程序示例:</p>
<ol>
<li>用pipe函数创建两个管道：pipe1和pipe2</li>
<li>调用fork创建子进程</li>
<li>父进程用pipe1写数据( 关闭pipe1的读端口)，pipe2读数据(关闭pipe2的写端口)</li>
<li>子进程用pipe1读数据( 关闭pipe1的写端口)，pipe2写数据(关闭pipe2的读端口)</li>
<li>父子进程各自使用未关闭的端口进行通信</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> pipe1[<span class="number">2</span>],pipe2[<span class="number">2</span>];</div><div class="line">	<span class="keyword">char</span> pstr[]=<span class="string">"parent data"</span>;</div><div class="line">	<span class="keyword">char</span> cstr[]=<span class="string">"child data"</span>;</div><div class="line">	<span class="keyword">char</span> buf[<span class="number">100</span>];</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(pipe(pipe1)&lt;<span class="number">0</span>||pipe(pipe2)&lt;<span class="number">0</span>)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"pipe error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">pid_t</span> pid=fork();</div><div class="line">	<span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//父进程,用管道1写数据,管道2读数据</span></div><div class="line">		close(pipe1[<span class="number">0</span>]);<span class="comment">//关闭pipe1读端口</span></div><div class="line">		close(pipe2[<span class="number">1</span>]);<span class="comment">//关闭pipe2写端口</span></div><div class="line">		write(pipe1[<span class="number">1</span>],pstr,<span class="keyword">sizeof</span>(pstr));</div><div class="line">		<span class="keyword">if</span>(read(pipe2[<span class="number">0</span>],buf,<span class="number">100</span>)&gt;<span class="number">0</span>)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"parent received:"</span>&lt;&lt;buf&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">//子进程用管道1读数据,管道2写数据</span></div><div class="line">		close(pipe1[<span class="number">1</span>]);<span class="comment">//关闭pipe1写端口</span></div><div class="line">		close(pipe2[<span class="number">0</span>]);<span class="comment">//关闭pipe2读端口</span></div><div class="line">		<span class="keyword">if</span>(read(pipe1[<span class="number">0</span>],buf,<span class="number">100</span>)&gt;<span class="number">0</span>)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"child received:"</span>&lt;&lt;buf&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		write(pipe2[<span class="number">1</span>],cstr,<span class="keyword">sizeof</span>(cstr));</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"fork error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h2><ul>
<li>命名管道与一个路径名相关联，以文件形式存在于文件系统中</li>
<li>命名管道的文件名只是便于其他进程引用该管道，文件名所对应的文件中没有数据（只能以阻塞模式使用）</li>
<li>命名管道可以在无父子关系的进程间通信</li>
</ul>
<p>关于第二点，补充一下，对于命令管道来说，其和普通管道的IO操作基本是一样的，主要区别在于对于命令管道，必须使用一个<code>open</code>函数来显式建立连接到管道的通道。一般来说它总是处于<strong>阻塞</strong>状态，也就是说，如果打开时设置只读，那么读取的进程会一直阻塞，直到其它进程 打开这个管道并向其中写入数据。同理，当一个进程写入而没有进程读取时也会被阻塞。也可以<code>open</code>时调用<code>O_NONBLOCK</code>关闭默认的阻塞动作。</p>
<h2 id="mkfifo"><a href="#mkfifo" class="headerlink" title="mkfifo"></a>mkfifo</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>;</div></pre></td></tr></table></figure>
<p><code>pathname</code>－管道名称，绝对路径名，<code>mode</code>－文件的权限（详情见另一篇博文）。</p>
<p>下面是一个命名管道的例子，发现这个管道只能使用一次，如果第二次使用，就会出错。</p>
<ol>
<li>写进程使用mkfifo创建命名管道</li>
<li>写进程调用open以写阻塞方式打开管道</li>
<li>读进程调用open以读阻塞方式打开管道</li>
<li>写进程调用write写入数据</li>
<li>读进程调用read读出数据</li>
</ol>
<p>可以看到，当客户端读了之后，服务器才结束。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> path <span class="meta-string">"/home/prime/ClionProjects/tcp/tmp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> s_data[]=&#123;<span class="string">"server:hello!"</span>&#125;;</div><div class="line">    <span class="keyword">if</span>(mkfifo(path,S_IRWXU)==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"error!"</span>;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> fd=open(path,O_WRONLY);</div><div class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"open fail!"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">ssize_t</span> num=write(fd,s_data,<span class="built_in">strlen</span>(s_data));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> path <span class="meta-string">"/home/prime/ClionProjects/tcp/tmp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd=open(path,O_RDONLY);</div><div class="line">    <span class="keyword">char</span>  buff[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"open fail"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">ssize_t</span> num=read(fd,buff,<span class="number">1024</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"read "</span>&lt;&lt;num&lt;&lt;<span class="string">" bytes\n"</span>;</div><div class="line">    write(<span class="number">1</span>,buff,num);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="unix域socket"><a href="#unix域socket" class="headerlink" title="unix域socket"></a>unix域socket</h2><ol>
<li>UNIX域协议不是真正的网络协议</li>
<li>UNIX域协议提供同一台机器的进程间通信</li>
<li>UNIX域socket是双向通道</li>
<li>UINIX域socket分为命名和非命名两种，分别和命名管道和非命名管道类似</li>
</ol>
<h3 id="命名unix域socket"><a href="#命名unix域socket" class="headerlink" title="命名unix域socket"></a>命名unix域socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> socketaddr_un&#123;</div><div class="line">	<span class="keyword">short</span> <span class="keyword">int</span> sun_family;	<span class="comment">//AF_UNIX</span></div><div class="line">	<span class="keyword">char</span> sun_path[<span class="number">104</span>];	<span class="comment">//文件名的绝对路径</span></div><div class="line">&#125;； </div><div class="line"><span class="comment">/*UNIX域协议使用路径名标识服务器和客户端 </span></div><div class="line">服务器调用函数bind绑定一个UNIX域socket时以该路径名创建一个文件 </div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>服务器可以接收多个客户端连接请求</li>
<li>客户端调用函数connect与服务器连接<ul>
<li>connect使用的socket应该是已打开的UNIX域socket</li>
<li>客户端必须拥有打开socket地址所指文件权限</li>
<li>监听socket的连接队列满时connect立刻返回错误</li>
</ul>
</li>
</ul>
<p>具体编程流程如下~</p>
<h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><ol>
<li>服务器调用socket创建UNIX域socket </li>
<li>服务器调用bind绑定UNIX域socket和指定地址 </li>
<li>服务器调用listen转化为侦听socket </li>
<li>服务器调用accept接收客户端连接</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIX_SOCKET <span class="meta-string">"/home/prime/ClionProjects/tcp/unix_socket"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sockfd=socket(AF_UNIX,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">    <span class="comment">//服务器调用bind绑定UNIX域socket和指定的地址</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_un addr;</div><div class="line">    bzero(&amp;addr,<span class="keyword">sizeof</span>(addr));</div><div class="line">    unlink(UNIX_SOCKET);</div><div class="line">    addr.sun_family=AF_UNIX;</div><div class="line">    <span class="built_in">sprintf</span>(addr.sun_path,<span class="string">"%s"</span>,UNIX_SOCKET);</div><div class="line">    bind(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(addr));</div><div class="line">    <span class="comment">//服务器调用listen转化为侦听socket</span></div><div class="line">    listen(sockfd,<span class="number">5</span>);</div><div class="line">    <span class="comment">//服务器调用accept接收客户端连接</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> new_fd=accept(sockfd,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span>(new_fd==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"accept error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="keyword">do</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">512</span>];</div><div class="line">            n=recv(new_fd,buf,<span class="number">512</span>,<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span>(n&gt;<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                buf[n]=<span class="number">0</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv:"</span>&lt;&lt;buf&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                n=send(new_fd,buf,n,<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">while</span>(n&gt;<span class="number">0</span>);</div><div class="line">        close(new_fd);</div><div class="line">    &#125;</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ol>
<li>客户端创建UNIX域socket(同服务器) </li>
<li>客户端调用connect连接服务器</li>
<li>客户端和服务器利用UNIX域socket进行通信</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIX_SOCKET <span class="meta-string">"/home/prime/ClionProjects/tcp/unix_socket"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//客户端创建UNIX域socket(同服务器)</span></div><div class="line">    <span class="keyword">int</span> sockfd=socket(AF_UNIX,SOCK_STREAM,<span class="number">0</span>);</div><div class="line">    <span class="comment">//客户端调用connect连接服务器</span></div><div class="line">    <span class="keyword">struct</span> sockaddr_un addr;</div><div class="line">    <span class="keyword">char</span>	 path[<span class="number">104</span>]=UNIX_SOCKET;</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line"></div><div class="line">    bzero(&amp;addr,<span class="keyword">sizeof</span>(addr));</div><div class="line">    addr.sun_family=AF_UNIX;</div><div class="line">    <span class="built_in">sprintf</span>(addr.sun_path,<span class="string">"%s"</span>,UNIX_SOCKET);</div><div class="line">    len=<span class="built_in">strlen</span>(addr.sun_path)+<span class="keyword">sizeof</span>(addr.sun_family);</div><div class="line">    <span class="keyword">if</span>(connect(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,len)==<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"connect error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">do</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> buf[<span class="number">512</span>];</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt;"</span>;</div><div class="line">        fgets(buf,<span class="number">512</span>,<span class="built_in">stdin</span>);</div><div class="line">        <span class="keyword">if</span>(send(sockfd,buf,<span class="built_in">strlen</span>(buf),<span class="number">0</span>)==<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"send error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((n=recv(sockfd,buf,<span class="number">512</span>,<span class="number">0</span>))&lt;=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv error"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            buf[n]=<span class="number">0</span>;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"recv:"</span>&lt;&lt;buf&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line">    close(sockfd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非命名域socket"><a href="#非命名域socket" class="headerlink" title="非命名域socket"></a>非命名域socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>          </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socketpair</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, <span class="keyword">int</span> sv[<span class="number">2</span>])</span></span>;</div></pre></td></tr></table></figure>
<p>创建两个UNIX域socket，并连接在一起。</p>
<p>参数如下：</p>
<p><code>family</code>－必须是<code>AF_UNIX</code><br><code>type</code>－<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code><br><code>protocol</code>－0<br><code>sv</code>－存储已创建的socket（描述符）</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul>
<li>socket是无名的</li>
<li>socket是全双工的</li>
<li>通信前不需要连接</li>
<li>通常在父子进程间通信使用<code>socketpair</code></li>
</ul>
<p>下面程序在子进程中用<code>fd[1]</code>，父进程中用<code>fd[0]</code>，子进程实现了字符变大写后返回给父进程的功能。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">64</span>];</div><div class="line">    socketpair(AF_UNIX,SOCK_STREAM,<span class="number">0</span>,fd);</div><div class="line">    <span class="keyword">pid_t</span> pid=fork();</div><div class="line">    <span class="keyword">if</span>(pid==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">0</span>]);</div><div class="line">        recv(fd[<span class="number">1</span>],buff,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        buff[<span class="number">0</span>]=<span class="built_in">toupper</span>(buff[<span class="number">0</span>]);</div><div class="line">        send(fd[<span class="number">1</span>],buff,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">1</span>]);</div><div class="line">        send(fd[<span class="number">0</span>],<span class="string">"a"</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        recv(fd[<span class="number">0</span>],buff,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"res:"</span>&lt;&lt;buff[<span class="number">0</span>];</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息队列就是一个消息的链表。对消息队列有写权限的进程可以向中按照一定的规则添加新消息；对消息队列有读权限的进程则可以从消息队列中读走消息。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> msgbuf &#123; </div><div class="line">         <span class="keyword">long</span> mtype; <span class="comment">//消息类型</span></div><div class="line">         <span class="keyword">char</span> mtext[<span class="number">20</span>]; <span class="comment">//消息数据</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个结构只是一个模板，可以自定义自己的消息结构。</p>
<p>待续~</p>
<h2 id="内存映像文件"><a href="#内存映像文件" class="headerlink" title="内存映像文件"></a>内存映像文件</h2><p>不同进程通过映射同一个普通文件实现共享内存 ,提供了不同于一般对普通文件的访问方式，进程可以像读写内存一样对普通文件的操作。</p>
<p>特点：</p>
<ul>
<li>共享内存的一种实现；</li>
<li>提供了不同于一般对普通文件的访问方式；</li>
<li>最高效的IPC手段之一；</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags,<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>;</div><div class="line"><span class="comment">/*fd为即将映射到进程空间的文件描述字，一般由open()返回</span></div><div class="line">length是映射到调用进程地址空间的字节数，它从被映射文件开头offset个字节开始算起</div><div class="line">prot 参数指定共享内存的访问权限。</div><div class="line">offset参数一般设为0，表示从文件头开始映射。</div><div class="line">参数addr指定文件应被映射到进程空间的起始地址</div><div class="line">返回值为最后文件映射到进程空间的地址</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">munmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length)</span></span>;</div><div class="line"><span class="comment">/*该调用在进程地址空间中解除一个映射关系</span></div><div class="line">addr是调用mmap()时返回的地址，</div><div class="line">len是映射区的大小。</div><div class="line">当映射关系解除后，对原来映射地址的访问将导致段错误发生。 </div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">msync</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> flags)</span></span>;</div><div class="line"><span class="comment">/*该调用实现磁盘上文件内容与共享内存区的内容同步</span></div><div class="line">addr是调用mmap()时返回的地址</div><div class="line">len是映射区的大小</div><div class="line">flags为同步标志</div><div class="line">一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap（）后才执行该操作。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>进程间需要共享的数据被放在一个叫做IPC共享内存区域的地方，所有需要访问该共享区域的进程都要把该共享区域映射到本进程的地址空间中去。 </p>
<p>特点：</p>
<ul>
<li>共享内存的一种实现；</li>
<li>最高效的IPC手段之一；</li>
<li>通过<code>shmget</code>获得或创建一个IPC共享内存区域时在特殊文件系统<code>shm</code>中，创建并打开一个同名文件。 </li>
</ul>
<h3 id="创建共享内存"><a href="#创建共享内存" class="headerlink" title="创建共享内存"></a>创建共享内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> size, <span class="keyword">int</span> shmflg)</span></span>;</div><div class="line"><span class="comment">/*三个参数key、nbytes和flags的含义与消息队列中的系统调用msgget类似。</span></div><div class="line">key取值IPC_PRIVATE时，新创建的共享内存段的关键字由系统分配。</div><div class="line">shmget创建共享内存段成功时，初始化相应的控制信息，返回该共享段的描述字ID。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="映射到虚拟空间"><a href="#映射到虚拟空间" class="headerlink" title="映射到虚拟空间"></a>映射到虚拟空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *shmaddr, <span class="keyword">int</span> shmflg)</span></span>;</div><div class="line"><span class="comment">/*shmat将标识字为shmid的共享内存段映射到由shmaddr参数指定的进程虚拟地址空间。</span></div><div class="line">如果不关心映射内存的地址，则可以置shmaddr为0，让系统选择一个可用地址。</div><div class="line">shmat调用成功后返回共享内存段在进程虚拟地址空间的首地址。</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shmaddr)</span></span>;</div><div class="line"><span class="comment">/*shmaddr是相应shmdt调用的返回值。</span></div><div class="line">shmdt调用成功时，内存段的访问计数减1，返回值为0。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="共享内存段控制"><a href="#共享内存段控制" class="headerlink" title="共享内存段控制"></a>共享内存段控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span></span>;</div><div class="line"><span class="comment">/*shmid为标识符</span></div><div class="line">cmd为控制字</div><div class="line">SHM_LOCK：将共享段锁定在内存，禁止换出(超级用户才具有此权限)；</div><div class="line">SHM_UNLOCK：与LOCK相反(超级用户才具有此权限)；</div><div class="line">IPC_RMID、ICP_STAT和IPC_SET：类似于msgctl中的定义，其中IPC_RMID标志所对应的存储段为“可释放”。</div><div class="line">sbuf为指向共享内存段控制结构指针。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="信号量（信号灯）"><a href="#信号量（信号灯）" class="headerlink" title="信号量（信号灯）"></a>信号量（信号灯）</h2><p>信号灯与其他IPC方式不大相同，它主要提供对进程间共享资源访问控制机制。相当于内存中的标志，进程可以根据它判定是否能够访问某些共享资源，同时，进程也可以修改该标志。除了用于访问控制外，还可用于进程同步。</p>
<p>大体上，信号量分为两种：</p>
<ul>
<li>二值信号灯<br>最简单的信号灯形式，信号灯的值只能取0或1，类似于互斥锁。 </li>
<li>计数信号灯<br>信号灯的值可以取任意非负值（当然受内核本身的约束）。 </li>
</ul>
<h3 id="创建信号量"><a href="#创建信号量" class="headerlink" title="创建信号量"></a>创建信号量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> semflg)</span></span>;</div><div class="line"><span class="comment">/*key为信号灯组关键字</span></div><div class="line">当key为IPC_PRIVATE时，信号灯组关键字由系统选择</div><div class="line">nsems为信号灯个数</div><div class="line">flags为操作标志</div><div class="line">flags决定信号灯组的创建方式和权限，其取值和含义与msgget中的flags类似</div><div class="line">	semget调用成功时，初始化相应的控制块信息，返回信号灯组标识数。</div><div class="line">*/</div></pre></td></tr></table></figure>
<h3 id="操作信号量"><a href="#操作信号量" class="headerlink" title="操作信号量"></a>操作信号量</h3>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux网络编程（二）]]></title>
      <url>https://www.prime666.com/2017/06/19/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原始套接字编程以及linux进程信号机制。</p>
<a id="more"></a>
<h1 id="原始套接字"><a href="#原始套接字" class="headerlink" title="原始套接字"></a>原始套接字</h1><p>前面的socket都是TCp或 UDP的，TCP和UDP Socket对TCP和UDP协议做了封装，简化了编程接口，但失去了对IP数据包操作的灵活性。原始socket直接针对IP数据包编程，具有更强的灵活性，能够访问ICMP和IGMP数据包，也可以编写基于IP协议的高层协议。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>          </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div></pre></td></tr></table></figure>
<p><code>type</code>类型设置为<code>SOCK_RAW</code>即可，对于<code>protocol</code>字段，可有如下设置：</p>
<p>IPPROTO_ICMP－ICMP数据包<br>IPPROTO_IGMP－IGMP数据包<br>IPPROTO_IP－IP数据包</p>
<h1 id="Linux进程与信号机制"><a href="#Linux进程与信号机制" class="headerlink" title="Linux进程与信号机制"></a>Linux进程与信号机制</h1><h2 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h2><h3 id="Linux进程结构"><a href="#Linux进程结构" class="headerlink" title="Linux进程结构"></a>Linux进程结构</h3><ul>
<li><strong>数据段</strong>－数据段存放程序的全局 变量，常数以及动态分配的数据空间 </li>
<li><strong>堆栈段</strong>－存放子程序的返回地址、子程序的参数以及程序的局部变量 </li>
<li><strong>代码段</strong>－存放程序代码，多个进程可以使用同一个代码段</li>
</ul>
<h3 id="创建子进程"><a href="#创建子进程" class="headerlink" title="创建子进程"></a>创建子进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">pid_t</span> fork(<span class="keyword">void</span>);</div></pre></td></tr></table></figure>
<font color="4876FF">通过复制正在运行的进程来创建子进程，简单说利用”写时复制”策略，</font>

<p>返回值有以下三种：</p>
<ul>
<li><p><code>&gt;0</code> </p>
<p>子进程的进程id，在父进程中返回</p>
</li>
<li><p><code>-1</code></p>
<p>调用失败</p>
</li>
<li><p><code>=0</code></p>
<p>在子进程返回</p>
</li>
</ul>
<p>调用fork的进程（父进程）返回正整数（子进程ID），在新创建的进程（子进程）中返回0，表示是子进程。</p>
<p>一个常用模板如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;	</div><div class="line">	<span class="keyword">pid_t</span> child_pid=fork();	</div><div class="line">	<span class="keyword">if</span>(child_pid==<span class="number">0</span>)&#123;		</div><div class="line">		<span class="comment">//子进程程序		</span></div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">//如果不调用exit，将继续执行父进程其他代码</span></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(child_pid&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">//父进程程序</span></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		<span class="comment">//调用失败</span></div><div class="line">	&#125;</div><div class="line">	<span class="comment">//父进程其他代码	</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用fork时：</p>
<ul>
<li>系统创建新进程，并为该进程准备数据段、堆栈段和代码段</li>
<li>代码段使用和父进程相同的代码段</li>
<li>父进程的数据段和堆栈段被复制（copy-on-write）给子进程</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_224119.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="创建新进程"><a href="#创建新进程" class="headerlink" title="创建新进程"></a>创建新进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **environ;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...<span class="comment">/* (char  *) NULL */</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execlp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...<span class="comment">/* (char  *) NULL */</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execle</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *arg, ...<span class="comment">/*, (char *) NULL, char * const envp[] */</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">execvpe</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *<span class="keyword">const</span> argv[],<span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</div></pre></td></tr></table></figure>
<p>exec族函数会用新进程代替原有进程，系统会从新的进程运行。具体为：代码段替换为新的代码段，废弃原进程的数据段和堆栈段，创建新的数据段和堆栈段，但进程号保留。</p>
<p>参数意义在于，在当前系统的可执行路径中根据指定的文件名<code>path</code>，找到合适的可执行文件，并用它取代调用进程的内容；如果是<code>file</code>，就看是否含有<code>/</code>，是就试做路径，找到相应文件，否则就从<code>PATH</code>环境变量中找到指定文件。</p>
<p><code>const char *arg</code>和其后面的省略号代表参数，它们都是字符指针，且最后一个参数必须是<code>NULL</code>（must be cast<code>(char *) NULL</code>）。第一个参数按照惯例是这个程序的名字。同理，<code>char *const argv[]</code>意义也是一样的，第一个是新程序的名字，最后以<code>NULL</code>结尾。</p>
<p>参数<code>envp</code>也是字符串数组，以<code>NULL</code>结尾，用于指定执行环境，其它没有这个参数的默认用外边变量<code>environ</code>设置。</p>
<h2 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>信号是对中断的软件模拟</li>
<li>进程收到信号和CPU收到中断请求是相同的</li>
<li>信号是异步的，信号何时到达是未知的</li>
<li>信号来源：<ul>
<li>硬件－键盘或硬件错误</li>
<li>软件－其他进程或内核</li>
</ul>
</li>
</ul>
<h3 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h3><ul>
<li>SIGALARM－计时器到时</li>
<li>SIGCHLD－子进程停止或退出时通知父进程</li>
<li>SIGKILL－终止进程</li>
<li>SIGSTOP－停止进程</li>
<li>SIGINT－中断字符，CTRL＋C</li>
</ul>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span></span>;</div></pre></td></tr></table></figure>
<p>第一个参数<code>pid</code>表示接受信号的进程集合，第二个参数<code>sig</code>表示要发送的信号。</p>
<table>
<thead>
<tr>
<th>pid的值</th>
<th>接收信号的进程</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid&gt;0</td>
<td>进程ID为pid的进程</td>
</tr>
<tr>
<td>pid=0</td>
<td>同一个进程组的进程</td>
</tr>
<tr>
<td>pid&lt;0 &amp;&amp; pid!=-1</td>
<td>进程组ID为 -pid的所有进程</td>
</tr>
<tr>
<td>pid=-1</td>
<td>除发送进程自身外所有进程ID大于1的进程</td>
</tr>
</tbody>
</table>
<h3 id="raise"><a href="#raise" class="headerlink" title="raise"></a>raise</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">raise</span><span class="params">(<span class="keyword">int</span> sig)</span></span>;</div></pre></td></tr></table></figure>
<p>向进程本身发送信号。</p>
<h3 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds)</span></span>;</div></pre></td></tr></table></figure>
<p>在指定的时间(seconds秒)后，将向进程自身发送SIGALRM信号。</p>
<h3 id="abort"><a href="#abort" class="headerlink" title="abort"></a>abort</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">abort</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>向进程自身发送SIGABORT信号，默认情况下进程会异常退出，但可定义自己的信号处理函数。</p>
<h3 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h3><ul>
<li>用kill命令发送信号</li>
<li>用特定的键盘字符产生信号<ul>
<li>CTRL＋C产生SIGINT信号</li>
<li>CTRL＋BACKSPACE产生SIGQUIT信号</li>
</ul>
</li>
<li>硬件故障和算法错误产生信号</li>
<li>某些软件条件<ul>
<li>带外数据到达socket产生SIGURG信号</li>
</ul>
</li>
</ul>
<h3 id="接受信号"><a href="#接受信号" class="headerlink" title="接受信号"></a>接受信号</h3><p>接收信号的时机：进程从核心态返回用户态，进入或离开睡眠状态时，内核检查是否收到信号。<br>进程对信号的响应 </p>
<ul>
<li>执行缺省操作</li>
<li>忽略信号（SIGKILL和SIGSTOP不能忽略）</li>
<li>用户捕获信号，执行用户的信号处理函数 </li>
</ul>
<h3 id="sigaction"><a href="#sigaction" class="headerlink" title="sigaction"></a>sigaction</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> <span class="keyword">struct</span> sigaction *act,<span class="keyword">struct</span> sigaction *oldact)</span></span>;</div></pre></td></tr></table></figure>
<p><code>signum</code>—指定需要捕获的信号,SIGKILL和SIGSTOP不能捕捉，<code>act</code>—指定处理捕获信号的新动作，<code>oldact</code>—存储旧的动作。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sigaction &#123;</div><div class="line">               <span class="keyword">void</span>     (*sa_handler)(<span class="keyword">int</span>);</div><div class="line">               <span class="keyword">void</span>     (*sa_sigaction)(<span class="keyword">int</span>, <span class="keyword">siginfo_t</span> *, <span class="keyword">void</span> *);</div><div class="line">               <span class="keyword">sigset_t</span>   sa_mask;</div><div class="line">               <span class="keyword">int</span>        sa_flags;</div><div class="line">               <span class="keyword">void</span>     (*sa_restorer)(<span class="keyword">void</span>);</div><div class="line">           &#125;;</div></pre></td></tr></table></figure>
<p><code>sa_handler/sa_sigaction</code>－信号处理函数</p>
<ul>
<li>使用默认动作时设置为SIG_DFL</li>
<li>忽略信号时设置为SIG_IGN</li>
<li>使用用户指定的处理函数时设置为相应处理函数</li>
<li>sa_flags=SA_SIGINFO时sa_sigaction有效</li>
</ul>
<p><code>sa_mask</code>－指定信号处理函数中被屏蔽的信号集，通常被处理的信号本身被屏蔽。</p>
<p><code>sa_flags</code>-影响信号处理函数行为的标志。</p>
<ul>
<li><code>SA_ONESHOT</code>或<code>SA_RESETHAND</code>－信号处理函数调用后，将信号的动作设置为默认动作</li>
<li><code>SA_RESTART</code>－使某些系统调用在被信号中断后能自动重新执行</li>
<li><code>SA_NOCLDSTOP</code>－当<code>signum=SIGCHLD</code>时，子进程停止不通知父进程</li>
<li><code>SA_NOMASK</code>或<code>SA_NODEFER</code>－在某个信号的处理过程中，这个信号不被屏蔽 </li>
</ul>
<h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="keyword">sighandler_t</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="keyword">sighandler_t</span> signal(<span class="keyword">int</span> signum, <span class="keyword">sighandler_t</span> handler);</div></pre></td></tr></table></figure>
<p>用于截取系统的信号，对此信号挂载自己的处理函数。返回值是函数指针，指向以前的信号处理函数。</p>
<p><code>signum</code>—指定需要捕获的信号,SIGKILL和SIGSTOP不能指定<br><code>handler</code>—指定信号处理函数</p>
<h2 id="进程终止与僵尸进程"><a href="#进程终止与僵尸进程" class="headerlink" title="进程终止与僵尸进程"></a>进程终止与僵尸进程</h2><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</div></pre></td></tr></table></figure>
<p>系统调用<code>exit</code>用于 终止进程。</p>
<h3 id="wait-amp-amp-waitpid"><a href="#wait-amp-amp-waitpid" class="headerlink" title="wait&amp;&amp;waitpid"></a>wait&amp;&amp;waitpid</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="keyword">pid_t</span> wait(<span class="keyword">int</span> *status);<span class="comment">//成功时返回子进程的ID，错误返回-1</span></div><div class="line"><span class="keyword">pid_t</span> waitpid(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> *status, <span class="keyword">int</span> options);<span class="comment">//成功时返回子进程的ID；如果设置非阻塞后，被pid指定的进程存在但是没有改变状态，返回0；错误返回-1</span></div></pre></td></tr></table></figure>
<p>这些系统调用用于等待子进程的状态改变，并获得这个信息。”状态改变“可以包含：进程终止、进程被信号终止、进程接收信号后恢复。第一种情况下，进行这个调用用于通知系统释放子进程的资源；如果不调用，这些子进程会保持“僵尸”状态。</p>
<p>如果进程状态已经改变，调用会立刻返回；否则，直到有一个子进程状态改变或被信号打断为止。（<strong>可以理解为阻塞模式</strong>）</p>
<p><code>wait</code>调用会暂停当前进程，直到有一个子进程“状态改变”。而<code>waitpid</code>会暂停当前进程，直到被<code>pid</code>指定的子进程“状态改变”，其意义很多，如下：</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;-1</td>
<td>等待进程组ID等于pid中的任意一个子进程</td>
</tr>
<tr>
<td>=-1</td>
<td>等待任意子进程（和wait效果一致）</td>
</tr>
<tr>
<td>0</td>
<td>等待任何子进程，其进程组ID必须等于调用进程的进程组ID。</td>
</tr>
<tr>
<td>&gt;0</td>
<td>等待特定的子进程</td>
</tr>
</tbody>
</table>
<p>可选参数<code>options</code>常用的是<code>WNOHANG</code>，表示非阻塞模式。</p>
<p><code>status</code>用于保存状态信息。</p>
<h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><p>正常情况下，子进程是通过父进程创建的，子进程在创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程 到底什么时候结束。 当一个 进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。</p>
<p><strong>孤儿进程</strong>：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</p>
<p><strong>僵尸进程</strong>：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵尸进程（<strong>简单说如果父进程没有调用wait函数，子进程先于父进程退出，则子进程将成为僵尸进程。</strong> ）。</p>
<p>unix提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是: 在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait / waitpid来取时才释放。 但这样就导致了问题，<strong>如果进程不调用wait / waitpid的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</strong></p>
<p>孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了init进程身上，而init进程会循环地wait()它的已经退出的子进程，<strong>因此孤儿进程并不会有什么危害。</strong></p>
<p><strong>任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。</strong>这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。  <strong>如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理（也就是说，如果一个父进程产生了大量僵尸进程，只需要把父进程杀了，init会接收它的孩子们）。</strong></p>
<h3 id="清除僵尸进程"><a href="#清除僵尸进程" class="headerlink" title="清除僵尸进程"></a>清除僵尸进程</h3><ul>
<li><p>忽略SIGCHLD信号时，系统将清除子进程的进程表项，这种方法依赖于Linux版本的实现。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> sigaction act,oldact;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	act.sa_handler=SIG_IGN;</div><div class="line">	sigemptyset(&amp;act.sa_mask);</div><div class="line">	act.sa_flags=<span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(sigaction(SIGCHLD,&amp;act,&amp;oldact)&lt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"sigaction error."</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">		<span class="keyword">if</span>(fork()==<span class="number">0</span>)</div><div class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(;;)&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//也可用signal(SIGCHLD, SIG_IGN)；</span></div></pre></td></tr></table></figure>
</li>
<li><p>调用函数wait或waitpid等待子进程。这种方法没有兼容性问题，但主程序进入等待循环后不能做任何事情 。</p>
</li>
<li><p>捕获SIGCHLD信号。</p>
<ul>
<li>如果多个<code>SIGCHLD</code>信号同时到达，进程将只收到一个，因此信号处理函数中必须循环调用<code>waitpid</code>处理多个子进程终止</li>
<li>不能使用<code>wait</code>来循环处理多个终止的子进程，因为<code>wait</code>在没有子进程终止时会阻塞，<code>waitpid</code>函数要设置选项<code>WNOHANG</code>防止阻塞。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigchld_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">pid_t</span> pid;</div><div class="line">	<span class="keyword">int</span> stat;</div><div class="line">	<span class="keyword">for</span>(;(pid=waitpid(<span class="number">-1</span>,&amp;stat,WNOHANG))&gt;<span class="number">0</span>;)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"child %d died:%d\n"</span>,pid,WEXITSTATUS(stat));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用fork两次，使子进程成为孤儿进程，由init进程管理。</p>
<ul>
<li>这种方法第一次调用fork产生的子进程可能成为僵尸进程。</li>
<li>这种方法第二次调用fork产生的子进程由init处理子进程退出，不会成为僵尸进程。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">pid_t</span> pid;</div><div class="line">	pid=fork();</div><div class="line">	<span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">//子进程1</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"first child proc:%d\n"</span>,getpid());</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(fork()==<span class="number">0</span>)&#123;</div><div class="line">				<span class="comment">//子进程2，3，4，5，6</span></div><div class="line">				<span class="built_in">printf</span>(<span class="string">"child %d\n"</span>,getpid());</div><div class="line">				sleep(<span class="number">1</span>);<span class="comment">//确保其父进程（进程1）先退出，本进程由init进程托管</span></div><div class="line">				<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(;;)&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>如何让一个用户进程变成守护进程：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">daemon_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> sigaction act;</div><div class="line">	<span class="keyword">int</span> i,maxfd,fd_rd,fd_wr;</div><div class="line">	<span class="comment">//1.调用fork，然后父进程退出，子进程继续运行</span></div><div class="line">	<span class="keyword">if</span>(fork()!=<span class="number">0</span>)</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	<span class="comment">//2.调用setsid创建新的session</span></div><div class="line">	<span class="keyword">if</span>(setsid()&lt;<span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="comment">//3.忽略信号SIGHUP，再次调用fork，然后父进程（session的头进程）退出 </span></div><div class="line">	act.sa_handler=SIG_IGN;</div><div class="line">	sigemptyset(&amp;act.sa_mask);<span class="comment">//清空</span></div><div class="line">	act.sa_flags=<span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(sigaction(SIGHUP,&amp;act,<span class="literal">NULL</span>)&lt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"sigaction error."</span>);</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);                                           </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(fork()!=<span class="number">0</span>)</div><div class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">	<span class="comment">//4.调用函数chdir（“/”），使进程不使用任何目录 </span></div><div class="line">	chdir(<span class="string">"/"</span>);</div><div class="line">	<span class="comment">//5.调用函数unmask（0），使进程对任何写的内容有权限 </span></div><div class="line">	umask(<span class="number">0</span>);</div><div class="line">	<span class="comment">//6.关闭所有打开的文件描述符 </span></div><div class="line">	maxfd=sysconf(_SC_OPEN_MAX);<span class="comment">//返回系统最大的文件描述符</span></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NOFILE;i++)</div><div class="line">		close(i);</div><div class="line">	<span class="comment">//7.为标准输入（0），标准输出（1），标准错误输出（2）打开新的文件描述符 </span></div><div class="line">	 </div><div class="line">	fd_rd=open(<span class="string">"/dev/null"</span>,O_RDONLY);</div><div class="line">	fd_wr=open(<span class="string">"/root/daemon.log"</span>,O_WRONLY);</div><div class="line">	dup(fd_rd);</div><div class="line">	dup(fd_wr);</div><div class="line">	dup(fd_wr);</div><div class="line">	</div><div class="line">	<span class="comment">//8.处理信号SIGCLD，避免守护进程的子进程成为僵尸进程</span></div><div class="line">	signal(SIGCHLD, SIG_IGN);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux网络编程（一）]]></title>
      <url>https://www.prime666.com/2017/06/19/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>网络编程复习基础知识，socket常用函数。</p>
<a id="more"></a>
<h1 id="网络编程基础及基本socket函数"><a href="#网络编程基础及基本socket函数" class="headerlink" title="网络编程基础及基本socket函数"></a>网络编程基础及基本socket函数</h1><h2 id="网络编程模型"><a href="#网络编程模型" class="headerlink" title="网络编程模型"></a>网络编程模型</h2><h3 id="CS模型"><a href="#CS模型" class="headerlink" title="CS模型"></a>CS模型</h3><p>网络应用的标准模型是<strong>C/S模型</strong>，是<strong>非对称</strong>模型。如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_101645.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其服务器模型分为两种：</p>
<ul>
<li><strong>循环服务器</strong><ul>
<li>任一时刻只处理一个客户机请求,处理请求过程中下一请求等待 </li>
<li>节省服务器资源,响应时间长,适合处理非耗时请求 </li>
</ul>
</li>
<li><strong>并发服务器</strong><ul>
<li>并发执行,每收到一个连接请求创建一个进程处理该连接,服务器继续等待下一连接</li>
<li>响应速度快,占用系统资源多 </li>
</ul>
</li>
</ul>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_101703.png" alt=""></p>
<p>编程模型图。。</p>
<h3 id="BS模型"><a href="#BS模型" class="headerlink" title="BS模型"></a>BS模型</h3><ul>
<li>三层/多层结构</li>
<li>客户端由浏览器代替</li>
<li>服务器端包括Web服务器、数据库服务器等</li>
<li>主要采用HTTP协议</li>
<li>主要用于WEB应用程序</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_101626.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul>
<li>面向连接，数据包可靠有序到达</li>
<li>具有流量控制能力</li>
<li>全双工通道</li>
</ul>
<p>三次握手示意：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_101740.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>四次挥手：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_101748.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>非连接的，不可靠。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_164807.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><p>通常由路由器产生，用来报告网络传输错误。封装在ip数据包中。</p>
<h2 id="基本socket函数"><a href="#基本socket函数" class="headerlink" title="基本socket函数"></a>基本socket函数</h2><p>基本流程可以有以下7步：</p>
<ol>
<li>创建网络端点－socket</li>
<li>连接服务器－connect</li>
<li>绑定服务器地址和端口－bind</li>
<li>监听端口－listen</li>
<li>接受客户端连接－accept</li>
<li>关闭socket－close</li>
<li>接收和发送数据－read、write</li>
</ol>
<h3 id="套接字数据结构"><a href="#套接字数据结构" class="headerlink" title="套接字数据结构"></a>套接字数据结构</h3><p>主要用到以下三个地址结构：</p>
<p>通用套接字结构，其可以在不同协议族之间进行强制转换</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr</div><div class="line">&#123;</div><div class="line">  <span class="keyword">sa_family_t</span> sa_faimly;<span class="comment">//协议族(ushort 16字节)</span></div><div class="line">  <span class="keyword">char</span> sa_dara[<span class="number">14</span>]; <span class="comment">//数据</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以太网中一般使用如下结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in</div><div class="line">&#123;</div><div class="line">   u8 sin_len;<span class="comment">//结构的长度，为16</span></div><div class="line">   u8 sin_family;<span class="comment">//协议族，通常AF_INET</span></div><div class="line">  u16 sin_port;<span class="comment">//16位端口号，网络字节序</span></div><div class="line">  <span class="keyword">struct</span> in_addr sin_addr;<span class="comment">//ip地址32位</span></div><div class="line">  <span class="keyword">char</span> sin_zero[<span class="number">8</span>];<span class="comment">//未用</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>u8: unsigned char<br>u16:unsigned short int<br>u32:unsigned int</p>
</blockquote>
<p>以上两个结构大小相等，只是对应关系不同而已。</p>
<p>其中，<code>in_addr</code>结构如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> in_addr</div><div class="line">&#123;</div><div class="line">  u32 s_addr;<span class="comment">//32位ip，网络字节序</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>          </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div><div class="line"><span class="comment">/*domain:常用AF_INET即IPv4 Internet protocols</span></div><div class="line">type:  SOCK_STREAM     SOCK_DGRAM  SOCK_RAW</div><div class="line">protocol: 指定将要用到的具体的协议，一般对于给定的协议族、套接字类型，只有一种具体协议可用，所以一般设置为0</div><div class="line">返回套接字描述符</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><strong>后面的所有函数几乎都是返回-1表示失败，不特别说明就是如此！</strong></p>
<h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp, <span class="keyword">struct</span> in_addr *inp)</span></span>;<span class="comment">//字符串转网络地址</span></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span></span>;<span class="comment">//转为字符串</span></div></pre></td></tr></table></figure>
<p><strong>网络字节序统一大端模式（高位在前，低位在后）</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="keyword">uint32_t</span> htonl(<span class="keyword">uint32_t</span> hostlong);</div><div class="line"><span class="keyword">uint16_t</span> htons(<span class="keyword">uint16_t</span> hostshort);</div><div class="line"><span class="keyword">uint32_t</span> ntohl(<span class="keyword">uint32_t</span> netlong);</div><div class="line"><span class="keyword">uint16_t</span> ntohs(<span class="keyword">uint16_t</span> netshort);</div><div class="line"></div><div class="line"><span class="comment">//在stdint.h中</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>	<span class="keyword">uint16_t</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>		<span class="keyword">uint8_t</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>		<span class="keyword">uint32_t</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>	<span class="keyword">uint64_t</span>;</div></pre></td></tr></table></figure>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>         </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr,<span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<p>这些函数和python中几乎一样（谁让python只是包装了它呢），对于TCp协议来说，就是向服务器发起连接，第三个参数是<code>addr</code>的大小，成功返回0，只能连接一次。对于UDP而言，可以连接多次，这里的”连接”的意义可就不是TCP的那个了，只是设置<code>addr</code>为默认发送地址，并且，从其它地址发来的udp数据包都丢弃！默认地址是可以重新设置的，没关系。</p>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>       </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr,<span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure>
<p>简单说就是把地址和套接字描述符关联起来即把发送数据的<strong>端口地址和IP地址</strong>进行了指定。发送数据时如果不指定，就临时选择一个端口。</p>
<p>对于TCp的服务器而言，显然只有bind之后才能接受连接（不知道地址怎么连？用脚啊）。客户端就不需要了，不绑定地址时系统自动分配一个端口,并用该端口和本机ip地址填充客户端socket地址。</p>
<h3 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>          </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</div></pre></td></tr></table></figure>
<p>将socket转为被动socket，等待服务器的连接。第二个参数是队列长度，即最大支持连接数。</p>
<h3 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>        </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</div></pre></td></tr></table></figure>
<p>接受客户端的连接，适用于TCP，它提取请求队列（见上一个方法）的第一个请求，然后创建一个新的套接字描述符用于传输数据，新的套接字不再是监听状态。原来的套接字不受影响。</p>
<p>当<code>accept</code>返回时，会将客户端的地址信息存于<code>addr</code>中（注意这里第三个参数是指针，而<code>bind</code>中是变量）。</p>
<p><strong>accept函数返回的socket描述符是真正可以和客户端通信的socket，服务器的侦听socket只接受连接，不能用于通信。accept函数在没有已完成的连接时（即没有请求时）将阻塞进程。</strong></p>
<hr>
<p>下面两个基本读写函数准确说不再属于网络编程范畴，它们是从一个文件描述符中读写数据，属于linux基本文件读写操作。</p>
<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</div></pre></td></tr></table></figure>
<p>从<code>fd</code>中读取<code>count</code>个字节到<code>buf</code>中，成功时返回读取到的字节，文件指针也随之移动相应距离（很好理解）。</p>
<p>接收缓冲区中没有数据时read函数阻塞，出现下列情况时返回：</p>
<ul>
<li>收到数据 </li>
<li>连接被关闭，返回0 </li>
<li>连接被复位，返回错误 </li>
<li>阻塞过程中收到中断信号，errno=EINTR </li>
</ul>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</div></pre></td></tr></table></figure>
<p>从<code>buf</code>中向<code>fd</code>中写入<code>count</code>个字节，成功时返回实际写入的字节数。</p>
<p>发送缓冲区中空间小于参数len时write函数阻塞 ：</p>
<ul>
<li>write函数阻塞时可能因为下列原因返回 </li>
<li>发送缓冲区中空间大于参数len </li>
<li>连接被复位，返回错误 </li>
<li>阻塞过程中收到中断信号，返回EINTR</li>
</ul>
<h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</div></pre></td></tr></table></figure>
<p>调用close只是将对sockfd的引用减1，直到对sockfd的引用为0时才清除sockfd ，TCP协议将继续使用sockfd，直到所有数据发送完成 .</p>
<h1 id="高级socket函数"><a href="#高级socket函数" class="headerlink" title="高级socket函数"></a>高级socket函数</h1><h2 id="域名与ip转化"><a href="#域名与ip转化" class="headerlink" title="域名与ip转化"></a>域名与ip转化</h2><h3 id="由域名得到结构"><a href="#由域名得到结构" class="headerlink" title="由域名得到结构"></a>由域名得到结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">struct</span> hostent *<span class="title">gethostbyname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div></pre></td></tr></table></figure>
<p>查询域名对应的IP。</p>
<p>返回值是一个结构指针，如果为NULL表示出错。这个结构原型如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> hostent&#123;</div><div class="line">	<span class="keyword">char</span>	 h_name;	<span class="comment">/*主机正式名称*/</span></div><div class="line">	<span class="keyword">char</span>	**h_aliases;	<span class="comment">/*别名列表，以NULL结束*/</span></div><div class="line">	<span class="keyword">int</span> 	h_addrtype;	<span class="comment">/*主机地址类型：AF_INET*/</span></div><div class="line">	<span class="keyword">int</span> 	h_length;	<span class="comment">/*主机地址长度：4字节32位*/</span></div><div class="line">	<span class="keyword">char</span> 	**h_addr_list;	<span class="comment">/*主机网络地址列表，以NULL结束*/</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> 	h_addr 	h_addr_list[0]; <span class="comment">//主机的第一个网络地址</span></span></div></pre></td></tr></table></figure>
<p>一个程序示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-19.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> hostent *he=gethostbyname(<span class="string">"www.sina.com"</span>);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span>(he!=<span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"h_name:%s\n"</span>,he-&gt;h_name);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"h_length:%d\n"</span>,he-&gt;h_length);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"h_addrtype:%d"</span>,he-&gt;h_addrtype);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_aliases[i] !=<span class="literal">NULL</span>;i++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"h_aliases%d:%s\n"</span>,i+<span class="number">1</span>,he-&gt;h_aliases[i]);</div><div class="line">        <span class="comment">//列出所有地址</span></div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_addr_list[i]!=<span class="literal">NULL</span>;i++)&#123;</div><div class="line">            <span class="keyword">struct</span> in_addr *addr;</div><div class="line">            addr=(<span class="keyword">struct</span> in_addr *)he-&gt;h_addr_list[i];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"ip%d:%s\n"</span>,(i+<span class="number">1</span>),inet_ntoa(*addr));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname error:%s\n"</span>,hstrerror(h_errno));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2017-06-19_155322.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="由ip得到结构"><a href="#由ip得到结构" class="headerlink" title="由ip得到结构"></a>由ip得到结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span>       <span class="comment">/* for AF_INET */</span></span></div><div class="line"><span class="function"><span class="keyword">struct</span> hostent *<span class="title">gethostbyaddr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *addr,<span class="keyword">socklen_t</span> len, <span class="keyword">int</span> type)</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> in_addr addr;</div><div class="line"></div><div class="line">inet_aton(“<span class="number">202.117</span><span class="number">.112</span><span class="number">.10</span>”,&amp;addr);</div><div class="line"><span class="keyword">struct</span> hostent *he=gethostbyaddr((<span class="keyword">void</span>*)&amp;addr,<span class="keyword">sizeof</span>(addr),AF_INET);</div><div class="line"><span class="keyword">if</span>(he!=<span class="literal">NULL</span>)&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"h_name:%s\n"</span>,he-&gt;h_name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"gethostbyaddr error:%s\n"</span>,hstrerror(h_errno));</div></pre></td></tr></table></figure>
<p>程序输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h_name:old.xidian.edu.cn</div></pre></td></tr></table></figure>
<h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> send(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen);</div></pre></td></tr></table></figure>
<p><code>send</code>只能用于已经<code>connect</code>的套接字（不一定是tcp，udp也行），而对于<code>sendto</code>，如果已经<code>connect</code>了，那么后两个参数被忽略，即只能向连接的套接字发送数据。</p>
<p>发送数据时，接收方的地址放于<code>dest_addr</code>中。</p>
<p>成功时，返回发送的字节数。</p>
<p><em>当flag为0时，就等于write了。同理，下面的recv的flag为0就等于read了。</em></p>
<p>常用flag如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>MSG_DONTWAIT</td>
<td>非阻塞操作，立刻返回不等待</td>
</tr>
<tr>
<td>MSG_OOB</td>
<td>接受带外数据</td>
</tr>
<tr>
<td>MSG_PEEK</td>
<td>查看数据，不进行数据缓冲区的</td>
</tr>
<tr>
<td>MSG_DONTROUTE</td>
<td>send特有，发送数据不查找路由表，适用于局域网，或同一网段</td>
</tr>
<tr>
<td>MSG_WAITALL</td>
<td>recv特有，阻塞直到所有的请求被满足。</td>
</tr>
</tbody>
</table>
<h2 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> recv(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"><span class="keyword">ssize_t</span> recvfrom(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,<span class="keyword">struct</span> sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen);</div></pre></td></tr></table></figure>
<p>它们既可用于面向连接的，又可用于面向无连接的socket。返回收到的字节数。它们默认都是阻塞型的，包括上面的send也是。</p>
<p>接收数据时发送方的地址填充于<code>src_addr</code>中 。</p>
<h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> how)</span></span>;</div></pre></td></tr></table></figure>
<p>关闭全双工套接字的一方或者全部，成功时返回0.</p>
<p>how有以下几个值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>SHUT_RD</td>
<td>0停止接受</td>
</tr>
<tr>
<td>SHUT_WR</td>
<td>1停止发送</td>
</tr>
<tr>
<td>SHUT_RDWR</td>
<td>2停止收发</td>
</tr>
</tbody>
</table>
<blockquote>
<p>和close的区别如下：</p>
<ul>
<li>shutdown操作连接通道，其他进程不能再使用已被关闭的通道；close操作描述符，其他进程仍然可以使用该socket描述符</li>
<li>close关闭应用程序与socket的接口，调用close之后进程不能再读写这个socket；shutdown可以只关闭一个通道，另一个通道仍然可以操作</li>
</ul>
</blockquote>
<hr>
<p><strong>bind、listen、创建都不会阻塞。</strong></p>
<h1 id="一个TCP的例子"><a href="#一个TCP的例子" class="headerlink" title="一个TCP的例子"></a>一个TCP的例子</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888						<span class="comment">/*侦听端口地址*/</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 2						<span class="comment">/*侦听队列长度*/</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">process_conn_server</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ss,sc;		<span class="comment">/*ss为服务器的socket描述符，sc为客户端的socket描述符*/</span></div><div class="line">	<span class="keyword">struct</span> sockaddr_in server_addr;	<span class="comment">/*服务器地址结构*/</span></div><div class="line">	<span class="keyword">struct</span> sockaddr_in client_addr;	<span class="comment">/*客户端地址结构*/</span></div><div class="line">	<span class="keyword">int</span> err;							<span class="comment">/*返回值*/</span></div><div class="line">	<span class="keyword">pid_t</span> pid;							<span class="comment">/*分叉的进行ID*/</span></div><div class="line"></div><div class="line">	<span class="comment">/*建立一个流式套接字*/</span></div><div class="line">	ss = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">	<span class="keyword">if</span>(ss &lt; <span class="number">0</span>)&#123;							<span class="comment">/*出错*/</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"socket error\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*设置服务器地址*/</span></div><div class="line">	bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));			<span class="comment">/*清零*/</span></div><div class="line">	server_addr.sin_family = AF_INET;					<span class="comment">/*协议族*/</span></div><div class="line">	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);	<span class="comment">/*本地地址*/</span></div><div class="line">	server_addr.sin_port = htons(PORT);				<span class="comment">/*服务器端口*/</span></div><div class="line">	</div><div class="line">	<span class="comment">/*绑定地址结构到套接字描述符*/</span></div><div class="line">	err = bind(ss, (<span class="keyword">struct</span> sockaddr*)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</div><div class="line">	<span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"bind error\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*设置侦听*/</span></div><div class="line">	err = listen(ss, BACKLOG);</div><div class="line">	<span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;										<span class="comment">/*出错*/</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"listen error\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">		<span class="comment">/*主循环过程*/</span></div><div class="line">	<span class="keyword">for</span>(;;)	&#123;</div><div class="line">		<span class="keyword">socklen_t</span> addrlen = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr);</div><div class="line">		</div><div class="line">		sc = accept(ss, (<span class="keyword">struct</span> sockaddr*)&amp;client_addr, &amp;addrlen); </div><div class="line">		<span class="comment">/*接收客户端连接*/</span></div><div class="line">		<span class="keyword">if</span>(sc &lt; <span class="number">0</span>)&#123;							<span class="comment">/*出错*/</span></div><div class="line">			<span class="keyword">continue</span>;						<span class="comment">/*结束本次循环*/</span></div><div class="line">		&#125;	</div><div class="line">		</div><div class="line">		<span class="comment">/*建立一个新的进程处理到来的连接*/</span></div><div class="line">		pid = fork();						<span class="comment">/*分叉进程*/</span></div><div class="line">		<span class="keyword">if</span>( pid == <span class="number">0</span> )&#123;						<span class="comment">/*子进程中*/</span></div><div class="line">			process_conn_server(sc);		<span class="comment">/*处理连接*/</span></div><div class="line">			close(ss);						<span class="comment">/*在子进程中关闭服务器的侦听*/</span></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			close(sc);						<span class="comment">/*在父进程中关闭客户端的连接*/</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888								<span class="comment">/*侦听端口地址*/</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">process_conn_client</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> s;										<span class="comment">/*s为socket描述符*/</span></div><div class="line">	<span class="keyword">struct</span> sockaddr_in server_addr;			<span class="comment">/*服务器地址结构*/</span></div><div class="line">	</div><div class="line">	s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); 		<span class="comment">/*建立一个流式套接字 */</span></div><div class="line">	<span class="keyword">if</span>(s &lt; <span class="number">0</span>)&#123;									<span class="comment">/*出错*/</span></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"socket error\n"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;	</div><div class="line">	</div><div class="line">	<span class="comment">/*设置服务器地址*/</span></div><div class="line">	bzero(&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));	<span class="comment">/*清零*/</span></div><div class="line">	server_addr.sin_family = AF_INET;					<span class="comment">/*协议族*/</span></div><div class="line">	<span class="comment">//server_addr.sin_addr.s_addr = htonl(INADDR_ANY);	/*本地地址*/</span></div><div class="line">	server_addr.sin_port = htons(PORT);				<span class="comment">/*服务器端口*/</span></div><div class="line">	</div><div class="line">	<span class="comment">/*将用户输入的字符串类型的IP地址转为整型*/</span></div><div class="line">	inet_aton(<span class="string">"127.0.0.1"</span>, &amp;server_addr.sin_addr);</div><div class="line">	<span class="comment">/*连接服务器*/</span></div><div class="line">	connect(s, (<span class="keyword">struct</span> sockaddr*)&amp;server_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr));</div><div class="line">	process_conn_client(s);						<span class="comment">/*客户端处理过程*/</span></div><div class="line">	close(s);									<span class="comment">/*关闭连接*/</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关键处理进程"><a href="#关键处理进程" class="headerlink" title="关键处理进程"></a>关键处理进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/*客户端的处理过程*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_conn_client</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">ssize_t</span> size = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> buffer[<span class="number">1024</span>];							<span class="comment">/*数据的缓冲区*/</span></div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(;;)&#123;									<span class="comment">/*循环处理过程*/</span></div><div class="line">		<span class="comment">/*从标准输入中读取数据放到缓冲区buffer中*/</span></div><div class="line">		size = read(<span class="number">0</span>, buffer, <span class="number">1024</span>);</div><div class="line">		<span class="keyword">if</span>(size &gt; <span class="number">0</span>)&#123;							<span class="comment">/*读到数据*/</span></div><div class="line">			write(s, buffer, size);				<span class="comment">/*发送给服务器*/</span></div><div class="line">			size = read(s, buffer, <span class="number">1024</span>);		<span class="comment">/*从服务器读取数据*/</span></div><div class="line">			write(<span class="number">1</span>, buffer, size);				<span class="comment">/*写到标准输出*/</span></div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"><span class="comment">/*服务器对客户端的处理*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_conn_server</span><span class="params">(<span class="keyword">int</span> s)</span></span></div><div class="line">&#123;<span class="comment">//s是新创建的用于socket通信的描述符</span></div><div class="line">	<span class="keyword">ssize_t</span> size = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> buffer[<span class="number">1024</span>];							<span class="comment">/*数据的缓冲区*/</span></div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(;;)&#123;									<span class="comment">/*循环处理过程*/</span>		</div><div class="line">		size = read(s, buffer, <span class="number">1024</span>);			<span class="comment">/*从套接字中读取数据放到缓冲区buffer中*/</span></div><div class="line">		<span class="keyword">if</span>(size == <span class="number">0</span>)&#123;							<span class="comment">/*没有数据*/</span></div><div class="line">			<span class="keyword">return</span>;	</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/*构建响应字符，为接收到客户端字节的数量*/</span></div><div class="line">		<span class="built_in">sprintf</span>(buffer, <span class="string">"%d bytes altogether\n"</span>, size);</div><div class="line">		write(s, buffer, <span class="built_in">strlen</span>(buffer)+<span class="number">1</span>);<span class="comment">/*发给客户端*/</span></div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="一个UDP的例子"><a href="#一个UDP的例子" class="headerlink" title="一个UDP的例子"></a>一个UDP的例子</h1><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">struct</span> sockaddr *server)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in client;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>]=<span class="string">"Client:hello"</span>;</div><div class="line">    <span class="keyword">socklen_t</span> len= <span class="keyword">sizeof</span>(*server);</div><div class="line">    sendto(s,buff,<span class="built_in">strlen</span>(buff),<span class="number">0</span>,server,len);</div><div class="line">    <span class="built_in">memset</span>(buff, <span class="number">0</span>,<span class="keyword">sizeof</span>(buff));</div><div class="line">    <span class="keyword">ssize_t</span> t=recvfrom(s,buff,<span class="number">1024</span>,<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr*)&amp;client,&amp;len);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,t);</div><div class="line">    write(<span class="number">1</span>,buff,t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in addr_server;</div><div class="line">    s=socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</div><div class="line"></div><div class="line">    bzero(&amp;addr_server, <span class="keyword">sizeof</span>(addr_server));</div><div class="line">    addr_server.sin_family=AF_INET;</div><div class="line">    addr_server.sin_port=htons(PORT);</div><div class="line">    addr_server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line">    process(s,(<span class="keyword">struct</span> sockaddr *)&amp;addr_server);</div><div class="line">    close(s);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by prime on 17-6-20.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;zconf.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">struct</span> sockaddr *client)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">ssize_t</span> n;</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">socklen_t</span> len;</div><div class="line">    len= <span class="keyword">sizeof</span>(*client);</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line">        n=recvfrom(s,buff,<span class="number">1024</span>,<span class="number">0</span>,client,&amp;len);</div><div class="line">        sendto(s,buff,n,<span class="number">0</span>,client,len);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>  argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in addr_server,addr_client;</div><div class="line">    s=socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</div><div class="line">    bzero(&amp;addr_server, <span class="keyword">sizeof</span>(addr_server));</div><div class="line"></div><div class="line">    addr_server.sin_family=AF_INET;</div><div class="line">    addr_server.sin_port=htons(PORT);</div><div class="line">    addr_server.sin_addr.s_addr=htonl(INADDR_ANY);</div><div class="line"></div><div class="line">    bind(s,(<span class="keyword">struct</span> sockaddr*)&amp;addr_server, <span class="keyword">sizeof</span>(addr_server));</div><div class="line">    process(s,(<span class="keyword">struct</span> sockaddr*)&amp;addr_client);</div><div class="line">    close(s);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>UDP和TCP不同，常用sendto和recvfrom函数。</strong></p>
<h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><h2 id="bzero"><a href="#bzero" class="headerlink" title="bzero"></a>bzero</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bzero</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">size_t</span> n)</span></span>;</div><div class="line"><span class="comment">//对以s开头的，n个字节进行0填充</span></div></pre></td></tr></table></figure>
<h2 id="INADDR-ANY"><a href="#INADDR-ANY" class="headerlink" title="INADDR_ANY"></a>INADDR_ANY</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Address to accept any incoming messages.  */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>	INADDR_ANY		((in_addr_t) 0x00000000)</span></div></pre></td></tr></table></figure>
<p>该宏定义为”0.0.0.0”，意义代表这台计算机的任意地址。</p>
<h2 id="设置和获取套接字选项"><a href="#设置和获取套接字选项" class="headerlink" title="设置和获取套接字选项"></a>设置和获取套接字选项</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> *optlen)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">const</span> <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> optlen)</span></span>;</div></pre></td></tr></table></figure>
<p>它们的主要作用是用来获取或设置与某个套接字关联的选项，选项可能存在于多层协议中。当对套接字选项进行操作时，必须给出选项所在的层和选项的名称。</p>
<p>比如为了操作套接字API层的选项，应该讲该层指定为<code>SOL_SOCKET</code>。为了操作其它层的选项，应该给出控制该选项的协议类型号。</p>
<p>参数具体含义如下：</p>
<ul>
<li><code>sockfd</code>套接字描述符</li>
<li><code>level</code>选项所在协议层</li>
<li><code>optname</code>选项名字</li>
<li><code>optval</code>操作的内存缓冲区。对于第一个函数，指向用于获取选项值的缓冲区；对于后者，指向设置的参数的缓冲区。</li>
<li><code>optlen</code>上一个参数的长度。</li>
</ul>
<p><em>大多数选项用一个int参数作为optval，非0表示开启，0表示关闭。</em></p>
<p>根据<code>level</code>值的不同，选项大致可以分为三类：</p>
<ol>
<li><p><strong>通用套接字选项</strong></p>
<p>值为<code>SOL_SOCKET</code>，用于设置一些通用的参数。常用选项名有：<code>SO_REUSEADDR</code>地址重用</p>
</li>
<li><p><strong>IP选项</strong></p>
<p>值为<code>IPPROTO_IP</code>，用于设置或获取IP层的参数。</p>
</li>
<li><p><strong>TCP选项</strong></p>
<p>值为<code>IPPROTO_TCP</code>，设置TCP协议的一些具体参数。</p>
</li>
</ol>
<p>翻译自以下文档：</p>
<blockquote>
<p>getsockopt()  and  setsockopt()  manipulate  options for the socket referred to by the file descriptor sockfd.</p>
<p>Options may exist at multiple protocol levels; they are always present at the uppermost socket level.</p>
<p>When manipulating socket options, the level at which the option resides and the name of  the  option  must  be</p>
<p> specified.   To  manipulate options at the sockets API level, level is specified as SOL_SOCKET.  To manipulate<br> options at any other level the protocol number of the appropriate protocol controlling the option is supplied.<br> For  example,  to indicate that an option is to be interpreted by the TCP protocol, level should be set to the<br> protocol number of TCP; see getprotoent(3).</p>
<p> The arguments optval and optlen are used to access option values  for  setsockopt().   For  getsockopt()  they<br> identify a buffer in which the value for the requested option(s) are to be returned.  For getsockopt(), optlen<br> is a value-result argument, initially containing the size of the buffer pointed to by optval, and modified  on<br> return  to  indicate the actual size of the value returned.  If no option value is to be supplied or returned,<br> optval may be NULL.</p>
<p> Optname and any specified options are passed uninterpreted to the appropriate protocol module for  interpreta‐<br> tion.   The  include  file  <sys socket.h="">  contains  definitions  for  socket level options, described below.<br> Options at other protocol levels vary in format and name; consult the appropriate entries in section 4 of  the<br> manual.</sys></p>
<p> Most  socket-level  options  utilize  an  int  argument  for optval.  For setsockopt(), the argument should be<br> nonzero to enable a boolean option, or zero if the option is to be disabled.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（四）]]></title>
      <url>https://www.prime666.com/2017/06/16/pat%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级1031~1040，唉，人蠢就得多读书啊<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/9977E26C.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></p>
<a id="more"></a>
<h1 id="1031-1040"><a href="#1031-1040" class="headerlink" title="1031~1040"></a>1031~1040</h1><h2 id="1030-Dijksra-DFS"><a href="#1030-Dijksra-DFS" class="headerlink" title="1030[Dijksra+DFS]"></a>1030[Dijksra+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1030" target="_blank" rel="noopener">Travel Plan</a></p>
<p>思路：</p>
<p>​    <strong>又是喜闻乐见的图论，呵呵。和前面自行车问题一样（MD记住你了），先Dijkstra求出最短路径，在此过程中求出每个结点的前驱结点。然后DFS，从终点回到起点（DFS的边界就是到达起点了，这时候由起点到终点的唯一路径已经确定，计算费用即可），看是否是最低消费。如果是就更新全局变量~~~</strong></p>
<p><strong>这里的DFS不需要visited数组了，因为由于实际意义的限制，DFS方向一直会向前的，不会重新遍历已经遍历过的结点！！！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/15.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"><span class="keyword">int</span> G[<span class="number">510</span>][<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> cost[<span class="number">510</span>][<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> dist[<span class="number">510</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> N,M,S,D;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[<span class="number">510</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path,tmp_path;</div><div class="line"></div><div class="line"><span class="keyword">int</span> min_cost=inf,tmp_cost;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/*初始化各种变量*/</span></div><div class="line">    fill(visited,visited+<span class="number">510</span>, <span class="literal">false</span>);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+<span class="number">510</span>*<span class="number">510</span>,inf);</div><div class="line">    fill(dist,dist+<span class="number">510</span>,inf);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;N,&amp;M,&amp;S,&amp;D);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,u,v;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;G[u][v],&amp;cost[u][v]);</div><div class="line">        G[v][u]=G[u][v];</div><div class="line">        cost[v][u]=cost[u][v];</div><div class="line">    &#125;</div><div class="line">    dist[S]=<span class="number">0</span>;</div><div class="line">    <span class="comment">//pre[S].push_back(S);</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_dist=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;min_dist&gt;dist[j])</div><div class="line">            &#123;</div><div class="line">                min_dist=dist[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;++v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[v]&gt;dist[u]+G[u][v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].clear();</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                    dist[v]=dist[u]+G[u][v];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist[v]==dist[u]+G[u][v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//fill(visited,visited+N, false);</span></div><div class="line">    DFS(D);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,path[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,dist[D],min_cost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//visited[u]=true;</span></div><div class="line">    <span class="keyword">if</span>(u==S)</div><div class="line">    &#123;<span class="comment">//从终点已经回到起点</span></div><div class="line">        tmp_path.push_back(u);</div><div class="line">        tmp_cost=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tmp_path.size()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">        &#123;<span class="comment">//从源点到目的结点的路径</span></div><div class="line">            <span class="keyword">int</span> index=tmp_path[i];</div><div class="line">            <span class="keyword">int</span> next_index=tmp_path[i<span class="number">-1</span>];</div><div class="line">            tmp_cost+=cost[index][next_index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(tmp_cost&lt;min_cost)</div><div class="line">        &#123;</div><div class="line">            min_cost=tmp_cost;</div><div class="line">            path=tmp_path;</div><div class="line">        &#125;</div><div class="line">        tmp_path.pop_back();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        tmp_path.push_back(u);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[u].size();i++)</div><div class="line">        &#123;</div><div class="line">            DFS(pre[u][i]);</div><div class="line">        &#125;</div><div class="line">        tmp_path.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1031-字符串处理"><a href="#1031-字符串处理" class="headerlink" title="1031[字符串处理]"></a>1031[字符串处理]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1031" target="_blank" rel="noopener">Hello World for U</a></p>
<p>思路：</p>
<p>​    <strong>仔细读题，确定n1,n2,n3之间关系即可，然后创建个二维数组保存输出，填写之即可。</strong></p>
<p>这里n~1~=n~2~，且满足n~1~+n~2~+n~3~-2=N，并且n~2~在[3,N]之间，求n~1~和n~2~的最大值。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/16.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> input;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;input;</div><div class="line">    <span class="keyword">int</span> N=input.size();</div><div class="line">    <span class="keyword">int</span> n1=<span class="number">0</span>,n3;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n2=<span class="number">3</span>;n2&lt;=N;n2++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>((N-n2+<span class="number">2</span>)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;(N-n2+<span class="number">2</span>)/<span class="number">2</span>&gt;n1&amp;&amp;(N-n2+<span class="number">2</span>)/<span class="number">2</span>&lt;=n2)</div><div class="line">            n1=(N-n2+<span class="number">2</span>)/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    n3=n1;</div><div class="line">    <span class="keyword">int</span> n2=N+<span class="number">2</span>-n1-n3;</div><div class="line">    <span class="keyword">char</span> out[n1][n2];</div><div class="line">    <span class="built_in">memset</span>(out,<span class="string">' '</span>, <span class="keyword">sizeof</span>(out));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;i++)</div><div class="line">    &#123;</div><div class="line">        out[i][<span class="number">0</span>]=input[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=n1<span class="number">-1</span>;i&lt;n2;++i,j++)</div><div class="line">        out[n1<span class="number">-1</span>][i]=input[j];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=N<span class="number">-1</span>;i&lt;n3;++i,--j)</div><div class="line">    &#123;</div><div class="line">        out[i][n2<span class="number">-1</span>]=input[j];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n2;j++)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;out[i][j];</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1032-找链表公共结点"><a href="#1032-找链表公共结点" class="headerlink" title="1032[找链表公共结点]"></a>1032[找链表公共结点]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1032" target="_blank" rel="noopener">Sharing</a></p>
<p>思路：</p>
<p>​    <strong>首先沿着一条链遍历，把这条路径上的结点记录到hash表中，然后从另一条链遍历，找到在hash表中的结点就输出并退出。</strong></p>
<p><strong>这个题关键在于hash表怎么建立？用set？不行 ！最后一个用例太大，用set这个基于红黑树的结构还是太慢，会超时！用unorder_set？想法不错，这是c++11引入的，但是支持似乎还不够完善。还是用数组吧，手动hash！</strong></p>
<p><strong>另外说明一下，set的比较规则，其模板参数中有比较器这一参数，默认<code>less&lt;T&gt;</code>即调用T类型的&lt;运算符进行比较。同理也有其它内置的仿函数。需要明确的是，set这个集合的等于定义为:假设a==b，则意味(!a&lt;b)&amp;&amp;(!b&lt;a)。所以等于是从&lt;推演过来的。</strong></p>
<blockquote>
<p>当你用到运算符重载机制时，或者一些其它不常见容器，表明你离正常思路太远了！！！</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/16.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> val;</div><div class="line">    <span class="keyword">int</span> next;</div><div class="line">    <span class="keyword">bool</span> flag;</div><div class="line">    Node()= <span class="keyword">default</span>;</div><div class="line">    Node(<span class="keyword">char</span> v,<span class="keyword">int</span> n)</div><div class="line">    &#123;</div><div class="line">        flag= <span class="literal">false</span>;</div><div class="line">        <span class="keyword">this</span>-&gt;val=v;</div><div class="line">        <span class="keyword">this</span>-&gt;next=n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Node s[<span class="number">100000</span>];</div><div class="line">    <span class="keyword">int</span> N,start1,start2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;start1,&amp;start2,&amp;N);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> addr,n;</div><div class="line">        <span class="keyword">char</span> v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;addr,&amp;v,&amp;n);</div><div class="line">        s[addr].next=n;</div><div class="line">        s[addr].val=v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> begin=start1;begin!=<span class="number">-1</span>;begin=s[begin].next)</div><div class="line">    &#123;</div><div class="line">        s[begin].flag= <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> begin=start2;begin!=<span class="number">-1</span>;begin=s[begin].next)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(s[begin].flag)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%05d"</span>,begin);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1033-贪心"><a href="#1033-贪心" class="headerlink" title="1033[贪心]"></a>1033[贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1033" target="_blank" rel="noopener">To Fill or Not to Fill</a></p>
<p>思路：</p>
<p>​    <strong>基于贪心的准则，首先判断第一个加油站是不是距离为0，不满足说明根本走不了，直接退出。如果满足了，那么采取如下策略：即假设每次在加满油的情况下，看所能到达的所有加油站，如果有个比当前加油站便宜的，那就只维持油量到那个加油站；如果都比这个加油站贵，那就不用多说了，直接加满，能用便宜的谁也不想用贵的不是？还有一个注意点，为了方便结束，添加一个加油站代表终点，距离为目的距离，油价为0.</strong></p>
<p><em>就是这么简单的思路，想全码对也不容易啊，还是缺少训练。</em></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/17.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Station</div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> dis;<span class="comment">//距离起点距离</span></div><div class="line">    <span class="keyword">double</span> per;<span class="comment">//单位燃料价格</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Station&amp; o1,<span class="keyword">const</span> Station &amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.dis&lt;o2.dis;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">9999999999</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> C,D,avg,N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;C,&amp;D,&amp;avg,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Station&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;s[i].per,&amp;s[i].dis);</div><div class="line">    &#125;</div><div class="line">    Station tmp;</div><div class="line">    tmp.per=<span class="number">0</span>,tmp.dis=D;</div><div class="line">    s.push_back(tmp);</div><div class="line">    sort(s.begin(),s.end(),cmp);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">double</span> can=C*avg;<span class="comment">//加满油跑多远</span></div><div class="line">    <span class="keyword">double</span> cur_distance=<span class="number">0</span>,cur_c=<span class="number">0</span>,run_distance=<span class="number">0</span>;<span class="comment">//上个加油站的距离</span></div><div class="line">    <span class="keyword">double</span> total_cost=<span class="number">0</span>,cur_per=s[<span class="number">0</span>].per;</div><div class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>].dis&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2lf"</span>,<span class="number">0.0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> flag= <span class="literal">false</span>;<span class="comment">//如果有比当前加油站更便宜的站，就为true</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(cur_distance&lt;D)</div><div class="line">    &#123;</div><div class="line">        run_distance=cur_distance+can;<span class="comment">//当前最远跑到什么距离</span></div><div class="line">        <span class="keyword">double</span> min_per=inf;<span class="keyword">int</span> point=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=index+<span class="number">1</span>;i&lt;s.size()&amp;&amp;s[i].dis&lt;=run_distance;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i].per&lt;cur_per)</div><div class="line">            &#123;</div><div class="line">                point=i;</div><div class="line">                flag= <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(s[i].per&lt;min_per)</div><div class="line">            &#123;</div><div class="line">                min_per=s[i].per;</div><div class="line">                point=i;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="comment">//point始终指向最适合的下一个加油站！</span></div><div class="line">        <span class="keyword">if</span>(!flag&amp;&amp;min_per==inf)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"The maximum travel distance = %.2lf"</span>,run_distance);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">        &#123;<span class="comment">//存在比当前更便宜的加油站，而且可以直达</span></div><div class="line">            total_cost+=((s[point].dis-cur_distance)/avg-cur_c)*cur_per;</div><div class="line">            </div><div class="line">            cur_c=<span class="number">0.0</span>;<span class="comment">//恰好把油用完到达那个加油站</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!flag&amp;&amp;min_per!=inf)</div><div class="line">        &#123;<span class="comment">//不存在比当前加油站更便宜的啦，所以我要加满！</span></div><div class="line">            total_cost+=(C-cur_c)*cur_per;</div><div class="line">            </div><div class="line">            cur_c=C-(s[point].dis-cur_distance)/avg;</div><div class="line">        &#125;</div><div class="line">        cur_distance=s[point].dis;</div><div class="line">        cur_per=s[point].per;</div><div class="line">        index=point;</div><div class="line">        flag= <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,total_cost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1034-DFS-连通分量"><a href="#1034-DFS-连通分量" class="headerlink" title="1034[DFS+连通分量]"></a>1034[DFS+连通分量]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1034" target="_blank" rel="noopener">Head of a Gang</a></p>
<p>思路：</p>
<p>​    <strong>和求图的连通分量思路很像，但是有点区别。题目要求找一个集群，其中边权和大于阈值k且包含2个以上成员（老大也算），即<font color="4876FF">连通分量必须保证结点大于2且边权和大于k</font>。所以在DFS后要进行判断是否满足条件。而对于DFS过程，首先用visted数组记录已被遍历过的点，然后判断当前结点是不是老大，之后就是DFS的标准流程了，只不过，每次内部DFS之前，要把边权置0，为了保证total不被重复计算！</strong></p>
<p>注意点：</p>
<font color="EE00EE"><br><br><em> 输入的时候边输入权值边求点的权值
</em> 题目说N是电话记录，包括两个结点，可能极端到1000个电话记录都不有人重复，所以结点至少2000<br>* 人名是string，用map转化为int方便图的计算<br><br></font>

<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/17.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> G[<span class="number">2010</span>][<span class="number">2010</span>];</div><div class="line"><span class="keyword">int</span> weight[<span class="number">2010</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">2010</span>];</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; si;<span class="comment">//名字到编号的映射</span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; is;<span class="comment">//编号到名字的映射</span></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; res;<span class="comment">//老大和小弟数的键值对</span></div><div class="line"><span class="keyword">int</span> number=<span class="number">1</span>;<span class="comment">//顶点的个数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> &amp;member,<span class="keyword">int</span> &amp;head,<span class="keyword">int</span> &amp;total)</span></span></div><div class="line">&#123;</div><div class="line">    visited[u]=<span class="literal">true</span>;</div><div class="line">    member++;</div><div class="line">    <span class="keyword">if</span>(weight[u]&gt;weight[head])</div><div class="line">        head=u;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=number;++v)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(G[u][v]&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            total+=G[u][v];</div><div class="line">            G[u][v]=G[v][u]=<span class="number">0</span>;<span class="comment">//计算之后把边权置0，防止重复计算total</span></div><div class="line">            <span class="keyword">if</span>(!visited[v])</div><div class="line">            &#123;</div><div class="line">                DFS(v,member,head,total);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> name1,name2;<span class="keyword">int</span> time;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;name1&gt;&gt;name2&gt;&gt;time;</div><div class="line">        <span class="keyword">if</span>(si[name1]==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            si[name1]=number;</div><div class="line">            is[number]=name1;</div><div class="line">            number++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(si[name2]==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            si[name2]=number;</div><div class="line">            is[number]=name2;</div><div class="line">            number++;</div><div class="line">        &#125;</div><div class="line">        G[si[name1]][si[name2]]+=time;</div><div class="line">        G[si[name2]][si[name1]]+=time;</div><div class="line">        weight[si[name1]]+=time;</div><div class="line">        weight[si[name2]]+=time;</div><div class="line">    &#125;</div><div class="line">    fill(visited,visited+<span class="number">2010</span>,<span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=number;++u)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!visited[u])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> head=u,total=<span class="number">0</span>,member=<span class="number">0</span>;</div><div class="line">            DFS(u,member,head,total);</div><div class="line">            <span class="keyword">if</span>(member&gt;<span class="number">2</span>&amp;&amp;total&gt;K)</div><div class="line">                res[is[head]]=member;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;res.size();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:res)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>&lt;&lt;e.first&lt;&lt;<span class="string">" "</span>&lt;&lt;e.second;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1035-简单字符串替换"><a href="#1035-简单字符串替换" class="headerlink" title="1035[简单字符串替换]"></a>1035[简单字符串替换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1035" target="_blank" rel="noopener">Password</a></p>
<p>简单的替换，细心就ok~~~比如<strong>输出格式</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/18.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">transform</span><span class="params">(<span class="built_in">string</span>&amp; s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> flag= <span class="literal">false</span>;</div><div class="line">    <span class="keyword">auto</span> it=s.begin();</div><div class="line">    <span class="keyword">while</span>(it!=s.end())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(*it==<span class="string">'O'</span>)</div><div class="line">        &#123;</div><div class="line">            *it=<span class="string">'o'</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(*it==<span class="string">'1'</span>)</div><div class="line">        &#123;</div><div class="line">            *it=<span class="string">'@'</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*it==<span class="string">'0'</span>)</div><div class="line">        &#123;</div><div class="line">            *it=<span class="string">'%'</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*it==<span class="string">'l'</span>)</div><div class="line">        &#123;</div><div class="line">            *it=<span class="string">'L'</span>;</div><div class="line">            flag=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        it++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; s[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s[i].first&gt;&gt;s[i].second;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> modify[N];</div><div class="line">    fill(modify,modify+N, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(transform(s[i].second))</div><div class="line">        &#123;</div><div class="line">            res++;</div><div class="line">            modify[i]=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(res&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;res;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(modify[i])</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>&lt;&lt;s[i].first&lt;&lt;<span class="string">" "</span>&lt;&lt;s[i].second;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(N==<span class="number">1</span>)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"There is 1 account and no account is modified"</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"There are "</span>&lt;&lt;N&lt;&lt;<span class="string">" accounts and no account is modified"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1036-排序-求极值"><a href="#1036-排序-求极值" class="headerlink" title="1036[排序/求极值]"></a>1036[排序/求极值]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1036" target="_blank" rel="noopener">Boys vs Girls</a></p>
<p>思路：</p>
<p>​    <strong>简单求极值，通过排序可以方便解决。但是，这种单一求极值的问题，完全不必要全部保存，就为了考pat而言，直接保存需要的信息即可！</strong></p>
<font color="EE00EE">注意题目要求字符不超过10个字符，所以申请11个字符空间。不然过不去！</font>

<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/18.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">11</span>];<span class="comment">//只能写10个字符</span></div><div class="line">    <span class="keyword">char</span> gender;<span class="comment">//性别</span></div><div class="line">    <span class="keyword">char</span> id[<span class="number">11</span>];</div><div class="line">    <span class="keyword">int</span> grade;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student&amp; o1,<span class="keyword">const</span> Student&amp; o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.grade&gt;o2.grade;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Student&gt; F,M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        Student tmp;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %c %s %d"</span>,tmp.name,&amp;tmp.gender,tmp.id,&amp;tmp.grade);</div><div class="line">        <span class="keyword">if</span>(tmp.gender==<span class="string">'F'</span>)</div><div class="line">            F.push_back(tmp);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            M.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    sort(F.begin(),F.end(),cmp);</div><div class="line">    sort(M.begin(),M.end(),cmp);</div><div class="line">    <span class="keyword">if</span>(F.size()&gt;<span class="number">0</span>&amp;&amp;M.size()&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s\n%s %s\n"</span>,F[<span class="number">0</span>].name,F[<span class="number">0</span>].id,M.back().name,M.back().id);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,F[<span class="number">0</span>].grade-M.back().grade);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(F.size()&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,F[<span class="number">0</span>].name,F[<span class="number">0</span>].id);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Absent\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NA"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(M.size()&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Absent\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,M.back().name,M.back().id);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NA"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/18.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> male,female;</div><div class="line">    <span class="keyword">int</span> m_score=<span class="number">101</span>,f_score=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> name,sex,id;</div><div class="line">        <span class="keyword">int</span> score;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;name&gt;&gt;sex&gt;&gt;id&gt;&gt;score;</div><div class="line">        <span class="keyword">if</span>(sex==<span class="string">"F"</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(score&gt;f_score)</div><div class="line">            &#123;</div><div class="line">                f_score=score;</div><div class="line">                female=name+<span class="string">" "</span>+id;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(score&lt;m_score)</div><div class="line">            &#123;</div><div class="line">                m_score=score;</div><div class="line">                male=name+<span class="string">" "</span>+id;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(f_score!=<span class="number">-1</span>&amp;&amp;m_score!=<span class="number">101</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;female&lt;&lt;<span class="string">"\n"</span>&lt;&lt;male&lt;&lt;<span class="string">"\n"</span>&lt;&lt;f_score-m_score;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(f_score!=<span class="number">-1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;female&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Absent\n"</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NA"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m_score!=<span class="number">101</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Absent\n"</span>&lt;&lt;male&lt;&lt;<span class="string">"\nNA"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1037-贪心"><a href="#1037-贪心" class="headerlink" title="1037[贪心]"></a>1037[贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1037" target="_blank" rel="noopener">Magic Coupon</a></p>
<p>题意就是两个序列，其中任意两个数相乘，要求结果相加最大。</p>
<p>思路：</p>
<p>​    <strong>先从小到大排序，然后从后向前遍历两个序列，都是正数就相乘加到结果中，否则结束循环；然后，从前向后遍历两个序列，如果都是负数，相乘加到结果中，否则结束循环。</strong></p>
<p><em>一开始我想着从后往前，如果相乘小于0，就把指针都递减，这样就只有一个用例没过去~~~这个思路是错误的，只适用于序列长度相等的情况。因为如果两个序列长度不等就错解。</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/18.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> NC,NP;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;NC);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coupon(NC);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NC;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;coupon[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;NP);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; product(NP);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NP;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;product[i]);</div><div class="line">    sort(coupon.begin(),coupon.end());<span class="comment">//升序</span></div><div class="line">    sort(product.begin(),product.end());</div><div class="line">    <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c_it=coupon.rbegin(),p_it=product.rbegin();c_it!=coupon.rend()&amp;&amp;p_it!=product.rend()&amp;&amp;*c_it&gt;<span class="number">0</span>&amp;&amp;*p_it&gt;<span class="number">0</span>;c_it++,p_it++)</div><div class="line">    &#123;</div><div class="line">        res+=(*c_it)*(*p_it);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c_it=coupon.begin(),p_it=product.begin();c_it!=coupon.end()&amp;&amp;p_it!=product.end()&amp;&amp;*c_it&lt;<span class="number">0</span>&amp;&amp;*p_it&lt;<span class="number">0</span>;c_it++,p_it++)</div><div class="line">    &#123;</div><div class="line">        res+=(*c_it)*(*p_it);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1038-字符串-贪心"><a href="#1038-字符串-贪心" class="headerlink" title="1038[字符串+贪心]"></a>1038[字符串+贪心]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1038" target="_blank" rel="noopener">Recover the Smallest Number</a></p>
<p><em>很经典的题目，要求给出几个数，求它们的最小的一种排列。</em></p>
<p>思路：</p>
<p>​    <strong>很自然联想到排序，那么是按照字典序排一下就ok了吗？显然不是！任何两个字符串a、b排列的依据应该是把a+b和b+a中较小的那一个放在前面，另一个放在后面，这样局部最优从而全局最优。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/22.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;o1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1+o2&lt;o2+o1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="built_in">string</span> s[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s[i];</div><div class="line">    sort(s,s+N,cmp);</div><div class="line">    <span class="built_in">string</span> res;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        res+=s[i];</div><div class="line">    <span class="keyword">while</span>(res.size()!=<span class="number">0</span>&amp;&amp;res[<span class="number">0</span>]==<span class="string">'0'</span>)<span class="comment">//防止第一个元素是0</span></div><div class="line">    &#123;</div><div class="line">        res.erase(res.begin());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(res.size()==<span class="number">0</span>)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;res;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1039-查找"><a href="#1039-查找" class="headerlink" title="1039[查找]"></a>1039[查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1039" target="_blank" rel="noopener">Course List for Student</a></p>
<p>思路：</p>
<p>​    <strong>和前面中的1022思路一样，都是针对输出建立映射关系，这里要求查询学生选课，那么键就是学生，值就是选的课。由此，正常思路如下</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/22.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="comment">//#include &lt;map&gt;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;K;</div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; course;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index,n;</div><div class="line">        <span class="built_in">string</span> name;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;index&gt;&gt;n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;name;</div><div class="line">            course[name].insert(index);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> query;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;query;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;query&lt;&lt;<span class="string">" "</span>&lt;&lt;course[query].size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:course[query])</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;e;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>很遗憾，最后一个用例是过不去的。因为超时了。为此，有了下面这种手动hash的方法，虽然能百分百通过，不过考试时候还是谨慎点，别捡了芝麻丢了西瓜。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/22.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_hash</span><span class="params">(<span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> code=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)</div><div class="line">    &#123;</div><div class="line">        code=code*<span class="number">26</span>+name[i]-<span class="string">'A'</span>;</div><div class="line">    &#125;</div><div class="line">    code=code*<span class="number">10</span>+name[<span class="number">3</span>]-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">return</span> code;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_num=<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>+<span class="number">10</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s[max_num];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="keyword">char</span> name[<span class="number">5</span>];<span class="comment">//永远记住多留一个存储\0，虽然本地可能正确，oj不这么认为！！！</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> index,n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;index,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,name);</div><div class="line">            s[my_hash(name)].push_back(index);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,name);</div><div class="line">        <span class="keyword">int</span> id=my_hash(name);<span class="comment">//在hash表中的位置</span></div><div class="line">        sort(s[id].begin(),s[id].end());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s %lld"</span>,name,s[id].size());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; e:s[id])</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,e);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1040-DP"><a href="#1040-DP" class="headerlink" title="1040[DP]"></a>1040[DP]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1040" target="_blank" rel="noopener">Longest Symmetric String</a></p>
<p><em>这道题也是经典题目，求最长回文子串的长度。</em></p>
<p>思路：</p>
<p>​    <strong>能用现有的算法，千万不要自己造轮子，容易出错！这道题可以用已有的求最长公共子串的DP算法，即把该串翻转后求和原串的最长公共子串的长度。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/23.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> in;</div><div class="line">    getline(<span class="built_in">cin</span>,in);</div><div class="line">    <span class="keyword">size_t</span> len=in.size();</div><div class="line">    <span class="keyword">int</span> dp[len+<span class="number">1</span>][len+<span class="number">1</span>];</div><div class="line">    fill(dp[<span class="number">0</span>],dp[<span class="number">0</span>]+(len+<span class="number">1</span>)*(len+<span class="number">1</span>), <span class="number">0</span>);</div><div class="line">    <span class="built_in">string</span> rev=in;</div><div class="line">    reverse(rev.begin(),rev.end());</div><div class="line">    <span class="keyword">int</span> res=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(in[j<span class="number">-1</span>]==rev[i<span class="number">-1</span>])</div><div class="line">            &#123;</div><div class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(dp[i][j]&gt;res)</div><div class="line">                &#123;</div><div class="line">                    res=dp[i][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                dp[i][j]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;res;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内存分配与映射]]></title>
      <url>https://www.prime666.com/2017/06/15/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>内存分配与映射的一些知识总结。</p>
<a id="more"></a>
<h1 id="内存分配与映射"><a href="#内存分配与映射" class="headerlink" title="内存分配与映射"></a>内存分配与映射</h1><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>在<a href="http://www.prime666.com/2017/06/08/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E9%A9%B1%E5%8A%A8/">简单的字符设备</a>一文的知识点补充中，已经总结了<code>kmalloc</code>和<code>vmalloc</code>的原型和基本用法，下面深入的总结一下。</p>
<h3 id="用户态内存分配"><a href="#用户态内存分配" class="headerlink" title="用户态内存分配"></a>用户态内存分配</h3><p><code>malloc/free</code></p>
<ul>
<li>虚拟地址空间</li>
<li>返回的是线性地址</li>
<li>在驱动程序中不能使用</li>
</ul>
<h3 id="内核态内存分配"><a href="#内核态内存分配" class="headerlink" title="内核态内存分配"></a>内核态内存分配</h3><p>包括以下三种：</p>
<ul>
<li><code>kmalloc</code></li>
<li><code>vmalloc</code></li>
<li><code>__get_free_page</code>及<code>__get_free_pages</code></li>
<li><code>alloc_page</code>及<code>alloc_pages</code></li>
</ul>
<hr>
<p><strong>特别说明，后两类函数返回的是struct page结构体，其它函数一般返回分配内存的首地址（虚拟地址）。</strong></p>
<h4 id="Kmalloc"><a href="#Kmalloc" class="headerlink" title="Kmalloc"></a>Kmalloc</h4><p>原型已经总结过，见原来的博文。</p>
<p>下面再介绍一下参数：</p>
<h5 id="size参数"><a href="#size参数" class="headerlink" title="size参数"></a><code>size</code>参数</h5><p>内核负责管理物理内存，物理内存只能按页面进行分配；<br>Linux处理内存分配的方法是，创建一系列内存对象池，每个池中的内存块大小是固定一致的。处理分配请求时就直接在包含有足够大的内存池中传递一整块给请求者；<br>size的大小一般是2的n次方，kmalloc能分配的最小内存块是32或64；<br>kmalloc能分配的内存块大小存在一个上限，为了保证代码的可移植性，不应利用kmalloc分配超过128KB的内存。</p>
<h5 id="flags参数"><a href="#flags参数" class="headerlink" title="flags参数"></a><code>flags</code>参数</h5><p>最常用的flags参数是GFP<em>KERNEL，表示内存分配是运行在内核空间的进程执行的；GFP</em>前缀意味着调用get_free_pages来实现实际的内存分配。</p>
<p><code>flags</code>标志主要有三类：（GFP 标志都在 <code>&lt;linux/gfp.h&gt;</code> 中定义 。）</p>
<ol>
<li><p>行为标志 ：控制分配内存时，分配器的一些行为</p>
</li>
<li><p>区标志   ：控制内存分配在那个区(ZONE_DMA, ZONE_NORMAL, ZONE_HIGHMEM 之类)</p>
</li>
<li><p>类型标志 ：由上面2种标志组合而成的一些常用的场景</p>
</li>
</ol>
<p>类型标志是最常用的，比如GFP_ATOMIC用于在中断处理例程或其它运行于进程上下文之外的代码中分配内存，不会休眠。GFP_KERNEL是内核内存的通常分配方法，可能会休眠。<em>kmalloc允许空闲内存不足时进程进入休眠状态，因此使用GFP_KERNEL的函数必须是可重入的，GFP_KERNEL标志不能在中断处理例程中调用。</em></p>
<p>行为标志也有很多，都以<code>__GFP</code>开头，详情看源码，不在赘述。</p>
<p>区标志总结如下表：</p>
<table>
<thead>
<tr>
<th>__GFP_DMA</th>
<th style="text-align:center">该标志请求分配发生在可进行DMA的内存区段中</th>
</tr>
</thead>
<tbody>
<tr>
<td>区标志</td>
<td style="text-align:center">描述</td>
</tr>
<tr>
<td>__GFP_HIGHMEM</td>
<td style="text-align:center">该标志表明要分配的内存可位于高端内存</td>
</tr>
<tr>
<td>__GFP_DMA32</td>
<td style="text-align:center">与1类似，只是只能被32位设备访问</td>
</tr>
</tbody>
</table>
<p><em>Linux内核把内存分为三个区段：可用于DMA的内存、常规内存、高端内存。</em></p>
<p><strong>针对常用情形总结如下~</strong></p>
<table>
<thead>
<tr>
<th>场景</th>
<th style="text-align:center">相应标志</th>
</tr>
</thead>
<tbody>
<tr>
<td>进程上下文，可以睡眠</td>
<td style="text-align:center">使用 GFP_KERNEL</td>
</tr>
<tr>
<td>进程上下文，不可以睡眠</td>
<td style="text-align:center">使用 GFP_ATOMIC，在睡眠之前或之后以 GFP_KERNEL 执行内存分配</td>
</tr>
<tr>
<td>中断处理程序</td>
<td style="text-align:center">使用 GFP_ATOMIC</td>
</tr>
<tr>
<td>软中断</td>
<td style="text-align:center">使用 GFP_ATOMIC</td>
</tr>
<tr>
<td>tasklet</td>
<td style="text-align:center">使用 GFP_ATOMIC</td>
</tr>
<tr>
<td>需要用于DMA的内存，可以睡眠</td>
<td style="text-align:center">使用 (GFP_DMA｜GFP_KERNEL)</td>
</tr>
<tr>
<td>需要用于DMA的内存，不可以睡眠</td>
<td style="text-align:center">使用 (GFP_DMA｜GFP_ATOMIC)，或者在睡眠之前执行内存分配</td>
</tr>
</tbody>
</table>
<h4 id="vmalloc"><a href="#vmalloc" class="headerlink" title="vmalloc"></a>vmalloc</h4><p>vmalloc分配虚拟地址空间的连续区域，但不保证物理地址空间的连续性；</p>
<p>vmalloc分配的地址空间在<code>VMALLOC_START</code>到<code>VMALLOC_END</code>的范围中；</p>
<p>vmalloc不能在原子上下文中使用，可能会引起休眠；</p>
<p>vmalloc申请的地址空间由vfree进行释放。</p>
<hr>
<p><strong>以下的内存分配函数都是宏定义。</strong>见<code>&lt;linux/gfp.h&gt;</code>头文件。</p>
<h4 id="get-free-page"><a href="#get-free-page" class="headerlink" title="__get_free_page"></a>__get_free_page</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">get_zeroed_page(<span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</div><div class="line"><span class="comment">//只分配一页，让其内容填充为0，返回指向其逻辑地址的指针</span></div><div class="line">__get_free_page(<span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</div><div class="line"><span class="comment">//只分配一页，返回指向其逻辑地址的指针</span></div><div class="line">__get_free_pages(<span class="keyword">unsigned</span> <span class="keyword">int</span> flags, <span class="keyword">unsigned</span> <span class="keyword">int</span> order);</div><div class="line"><span class="comment">//分配 2^order 个页，返回指向第一页逻辑地址的指针。</span></div><div class="line"></div><div class="line"><span class="comment">/*以上函数中flag就是上面介绍的，order表示申请页面的数量，注意是2的order次方个页面*/</span></div></pre></td></tr></table></figure>
<p>补充一点，页的大小与体系结构有关，在 x86 结构中一般是32机 4KB或者64位机8KB。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> __free_pages(<span class="keyword">struct</span> page *page, <span class="keyword">unsigned</span> <span class="keyword">int</span> order);</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_pages</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> order)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_page</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> addr)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_hot_page</span><span class="params">(<span class="keyword">struct</span> page *page)</span></span>;</div><div class="line"><span class="comment">/*释放内存。如果试图释放和先前分配数目不等的页面，内存映射关系会被破坏，系统会出错。*/</span></div></pre></td></tr></table></figure>
<h4 id="alloc-page"><a href="#alloc-page" class="headerlink" title="alloc_page"></a>alloc_page</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alloc_page(gfp_mask);</div><div class="line"><span class="comment">//只分配一页，返回指向页结构的指针</span></div><div class="line">alloc_pages(gfp_mask, order);</div><div class="line"><span class="comment">//分配 2^order 个页，返回指向第一页页结构的指针</span></div></pre></td></tr></table></figure>
<p>这两个函数返回的是物理页面的结构体，下面会提到它。</p>
<h2 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h2><h3 id="page结构体"><a href="#page结构体" class="headerlink" title="page结构体"></a>page结构体</h3><p>首先介绍一下页的概念。<strong>对系统中每个物理页，都有一个page结构相对应。</strong>其头文件为<code>&lt;linux/mm_types.h&gt;</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> page &#123;</div><div class="line">    <span class="keyword">atomic_t</span> count;	<span class="comment">//对该页的访问计数，计数为0时该页返回给空闲链表</span></div><div class="line">    <span class="keyword">void</span> *<span class="keyword">virtual</span>;	<span class="comment">//如果页面被映射，则指向页的内核虚拟地址；否则为NULL</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;  <span class="comment">//描述页状态的一系列标志</span></div><div class="line">   	<span class="comment">//......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>物理内存的每个页都有一个对应的 page 结构，看似会在管理上浪费很多内存，其实细细算来并没有多少。因为 里面有大量的共同体，我水平还不够，唉，看不懂:cry:。</p>
<p>于是，<strong>内核维护了一个或多个page结构数组，用于跟踪系统中的物理内存。</strong></p>
<h3 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h3><p>内核提供了一些函数和宏用于在虚拟地址和物理地址之间进行转换。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> page  *<span class="title">virt_to_page</span><span class="params">(<span class="keyword">void</span> *kaddr)</span></span>;</div><div class="line"><span class="comment">//该宏在&lt;asm/page.h&gt;中定义，负责将内核逻辑地址转换为响应的page结构指针。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> page  *<span class="title">pfn_to_page</span><span class="params">(<span class="keyword">int</span> pfn)</span></span>;</div><div class="line"><span class="comment">// 针对给定的页帧号，返回page结构指针。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span>  *<span class="title">page_address</span><span class="params">(<span class="keyword">struct</span> page *page)</span></span>;</div><div class="line"><span class="comment">//如果地址存在的话，则返回页的内核虚拟地址。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">virt_to_phys</span><span class="params">(<span class="keyword">void</span> * address)</span></span>;</div><div class="line"><span class="comment">//内核虚拟地址转换为物理地址</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">phys_to_virt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> address)</span></span>;</div><div class="line"><span class="comment">//物理地址转换为内核虚拟地址</span></div><div class="line"><span class="comment">/*上两种方法仅仅进行了3G的加减操作，linux内核用3G~4G的内核空间去映射实际的物理内存。适用于常规内存（内核物理内存映射区）*/</span></div></pre></td></tr></table></figure>
<h3 id="VMA"><a href="#VMA" class="headerlink" title="VMA"></a>VMA</h3><p>虚拟内存区（VMA）用于管理进程地址空间中不同区域的内核数据结构。一个VMA表示在进程的虚拟内存中的一个同类区域。</p>
<p>Linux内核中，关于虚存管理的最基本的管理单元应该是<code>struct vm_area_struct</code>了，它描述的是一段连续的、具有相同访问属性的虚存空间，该虚存空间的大小为物理内存页面的整数倍。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mm.h&gt;</span></span></div><div class="line"><span class="keyword">struct</span> vm_area_struct &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_start; 	<span class="comment">//该VMA所覆盖的虚拟地址起始地址</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_end;    <span class="comment">//该VMA所覆盖的虚拟地址结束地址</span></div><div class="line">    <span class="keyword">struct</span> file *vm_file;	<span class="comment">//指向与该区域相关联的file结构指针</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_pgoff; <span class="comment">//以页为单位，文件中该区域的偏移 </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> vm_flags;  <span class="comment">//描述该区域的一套标志</span></div><div class="line">    <span class="keyword">struct</span> vm_operations_struct * vm_ops; <span class="comment">//内核能调用的函数</span></div><div class="line">    <span class="keyword">void</span> * vm_private_data;<span class="comment">//驱动程序用来保存自身信息的成员</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>struct vm_operations_struct</code> 结构体用来处理进程的内存需求。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mm.h&gt;</span></span></div><div class="line"><span class="comment">//内核调用open函数，以允许实现VMA的子系统初始化该区域</span></div><div class="line"><span class="keyword">void</span> (*open)(<span class="keyword">struct</span> vm_area_struct * vma);</div><div class="line"></div><div class="line"><span class="comment">//当销毁一个区域时，内核将调用close操作</span></div><div class="line"><span class="keyword">void</span> (*close)(<span class="keyword">struct</span> vm_area_struct * vma);</div><div class="line"></div><div class="line"><span class="comment">//当一个进程访问属于合法VMA的页，但该页又不在内存中时，则为相关区域调用nopage函数</span></div><div class="line"><span class="keyword">struct</span> page * (*nopage)(<span class="keyword">struct</span> vm_area_struct * vma, <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">int</span> *type);</div></pre></td></tr></table></figure>
<h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p><strong>mmap方法是file_operations结构的一部分，并且执行mmap系统调用时将调用该方法，实现物理地址空间和虚拟地址空间间的内存映射。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>* <span class="title">mmap</span> <span class="params">( <span class="keyword">void</span> * addr , <span class="keyword">size_t</span> len , <span class="keyword">int</span> prot , <span class="keyword">int</span> flags ,<span class="keyword">int</span> fd , <span class="keyword">off_t</span> offset )</span></span></div><div class="line"><span class="comment">/*addr：指定映射的起始地址, 通常设为NULL, 由系统指定。</span></div><div class="line">length: 映射到内存的文件长度。</div><div class="line">prot：映射区的保护方式:PROT_EXEC/PROT_READ/PROT_WRITE</div><div class="line">flags: 映射区的特性:MAP_SHARED/MAP_PRIVATE</div><div class="line">fd: 由open返回的文件描述符, 代表要映射的文件。</div><div class="line">offset: 以文件开始处的偏移量, 必须是分页大小的整数倍, 通常为0, 表示从文件头开始映射。</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>用户态下文件操作的原型为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*mmap) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> vm_area_struct *)</div></pre></td></tr></table></figure>
<p>mmap通过两种方式完成页表的建立，即完成物理地址和虚拟地址之间的映射：</p>
<ul>
<li>使用<code>remap_pfn_range</code>一次建立所有页表;</li>
<li>使用<code>nopage VMA</code>方法每次建立一个页表，当用户访问VMA中的页，而该页又不在内存中时，将调用相关的<code>nopage函数</code>实现内存映射。</li>
</ul>
<h4 id="remap-pfn-range"><a href="#remap-pfn-range" class="headerlink" title="remap_pfn_range"></a>remap_pfn_range</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">remap_pfn_range</span><span class="params">(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">unsigned</span> <span class="keyword">long</span> virt_addr,<span class="keyword">unsigned</span> <span class="keyword">long</span> pfn, <span class="keyword">unsigned</span> <span class="keyword">long</span> size, <span class="keyword">pgprot_t</span> prot)</span></span></div><div class="line"><span class="comment">/*vma:            虚拟内存区域指针</span></div><div class="line">virt_addr:        虚拟地址的起始值</div><div class="line">pfn:             要映射的物理地址所在的物理页帧号，可将物理地址&gt;&gt;PAGE_SHIFT得到。</div><div class="line">size:            要映射的区域的大小。</div><div class="line">prot:            VMA的保护属性。</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>该函数为addr~addr+size之间的虚拟地址构造页表。pfn（Page Fram Number）是虚拟地址应该映射到的物理地址的页面号，实际上就是物理地址右移PAGE_SHIFT位。</p>
<h4 id="nopage"><a href="#nopage" class="headerlink" title="nopage"></a>nopage</h4><p><strong>这个函数已被fault函数取代！！！不要妄想使用它了</strong></p>
<p>当用户访问VMA中的页，而该页又不在内存中时，将调用相关的nopage函数实现内存映射.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> page * (*nopage)(<span class="keyword">struct</span> vm_area_struct * vma, <span class="keyword">unsigned</span> <span class="keyword">long</span> address, <span class="keyword">int</span> *type）</div><div class="line"><span class="comment">/*vma:           虚拟内存区域指针</span></div><div class="line">address:     引起错误的虚拟地址*/</div></pre></td></tr></table></figure>
<h4 id="fault"><a href="#fault" class="headerlink" title="fault"></a>fault</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> vm_fault &#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> flags;		<span class="comment">/* FAULT_FLAG_xxx flags */</span></div><div class="line">	<span class="keyword">pgoff_t</span> pgoff;			<span class="comment">/* Logical page offset based on vma */</span></div><div class="line">	<span class="keyword">void</span> __user *virtual_address;	<span class="comment">/* Faulting virtual address */</span></div><div class="line"></div><div class="line">	<span class="keyword">struct</span> page *page;		<span class="comment">/* -&gt;fault handlers should return a</span></div><div class="line">					 * page here, unless VM_FAULT_NOPAGE</div><div class="line">					 * is set (which is also implied by</div><div class="line">					 * VM_FAULT_ERROR).</div><div class="line">					 */</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * These are the virtual MM functions - opening of an area, closing and</div><div class="line"> * unmapping it (needed to keep files on disk up-to-date etc), pointer</div><div class="line"> * to the functions called when a no-page or a wp-page exception occurs. </div><div class="line"> */</div><div class="line"><span class="keyword">struct</span> vm_operations_struct &#123;</div><div class="line">	<span class="keyword">void</span> (*open)(<span class="keyword">struct</span> vm_area_struct * area);</div><div class="line">	<span class="keyword">void</span> (*close)(<span class="keyword">struct</span> vm_area_struct * area);</div><div class="line">	<span class="keyword">int</span> (*fault)(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">struct</span> vm_fault *vmf);</div><div class="line"></div><div class="line">	<span class="comment">/* notification that a previously read-only page is about to become</span></div><div class="line">	 * writable, if an error is returned it will cause a SIGBUS */</div><div class="line">	<span class="keyword">int</span> (*page_mkwrite)(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">struct</span> vm_fault *vmf);</div><div class="line"></div><div class="line">	<span class="comment">/* called by access_process_vm when get_user_pages() fails, typically</span></div><div class="line">	 * for use by special VMAs that can switch between memory and hardware</div><div class="line">	 */</div><div class="line">	<span class="keyword">int</span> (*access)(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">unsigned</span> <span class="keyword">long</span> addr,</div><div class="line">		      <span class="keyword">void</span> *buf, <span class="keyword">int</span> len, <span class="keyword">int</span> write);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * set_policy() op must add a reference to any non-NULL @new mempolicy</div><div class="line">	 * to hold the policy upon return.  Caller should pass NULL @new to</div><div class="line">	 * remove a policy and fall back to surrounding context--i.e. do not</div><div class="line">	 * install a MPOL_DEFAULT policy, nor the task or system default</div><div class="line">	 * mempolicy.</div><div class="line">	 */</div><div class="line">	<span class="keyword">int</span> (*set_policy)(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">struct</span> mempolicy *<span class="keyword">new</span>);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * get_policy() op must add reference [mpol_get()] to any policy at</div><div class="line">	 * (vma,addr) marked as MPOL_SHARED.  The shared policy infrastructure</div><div class="line">	 * in mm/mempolicy.c will do this automatically.</div><div class="line">	 * get_policy() must NOT add a ref if the policy at (vma,addr) is not</div><div class="line">	 * marked as MPOL_SHARED. vma policies are protected by the mmap_sem.</div><div class="line">	 * If no [shared/vma] mempolicy exists at the addr, get_policy() op</div><div class="line">	 * must return NULL--i.e., do not "fallback" to task or system default</div><div class="line">	 * policy.</div><div class="line">	 */</div><div class="line">	<span class="keyword">struct</span> mempolicy *(*get_policy)(<span class="keyword">struct</span> vm_area_struct *vma,</div><div class="line">					<span class="keyword">unsigned</span> <span class="keyword">long</span> addr);</div><div class="line">	<span class="keyword">int</span> (*migrate)(<span class="keyword">struct</span> vm_area_struct *vma, <span class="keyword">const</span> <span class="keyword">nodemask_t</span> *from,</div><div class="line">		<span class="keyword">const</span> <span class="keyword">nodemask_t</span> *to, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/io.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/page.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mm.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"prime"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NUMBER 240</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_COUNT 16</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TOTAL_SIZE (PAGE_SIZE*PAGE_COUNT)</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> *share_memory=<span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_vm_fault</span><span class="params">(<span class="keyword">struct</span> vm_area_struct *vma,<span class="keyword">struct</span> vm_fault *vmf)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> page *page;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> offset;</div><div class="line">    <span class="keyword">void</span> *page_ptr;</div><div class="line">    </div><div class="line">    printk(<span class="string">"\n"</span>);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"1)vma-&gt;flags"</span>,vmf-&gt;flags);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"2)vmf-&gt;pgoff"</span>,vmf-&gt;pgoff);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"3)vmf-&gt;virtual_address"</span>,vmf-&gt;virtual_address);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"4)vma-&gt;vm_start"</span>,vma-&gt;vm_start);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"5)vma-&gt;vm_end"</span>,vma-&gt;vm_end);</div><div class="line">    printk(<span class="string">"%-25s %08x\n"</span>,<span class="string">"6)vma-&gt;vm_pgoff"</span>,vma-&gt;vm_pgoff);</div><div class="line">    <span class="comment">/*printk("%-25s %d\n","7)PAGE_SHIFT",PAGE_SHIFT);*/</span></div><div class="line"></div><div class="line">    page_ptr=<span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>((<span class="literal">NULL</span>==vma)||(<span class="literal">NULL</span>==share_memory))&#123;</div><div class="line">        printk(<span class="string">"return VM_FAULT_SIGBUS!\n"</span>);</div><div class="line">        <span class="keyword">return</span> VM_FAULT_SIGBUS;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    offset=vmf-&gt;virtual_address-vma-&gt;vm_start;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(offset&gt;=TOTAL_SIZE)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"return VM_FAULT_SIGBUS!"</span>);</div><div class="line">        <span class="keyword">return</span> VM_FAULT_SIGBUS;</div><div class="line">    &#125;</div><div class="line">    page_ptr=share_memory+offset;</div><div class="line">    page=virt_to_page(page_ptr);</div><div class="line">    get_page(page);</div><div class="line">    vmf-&gt;page=page;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> vm_operations_struct my_vm_ops=&#123;</div><div class="line">    .fault=my_vm_fault,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_mmap</span><span class="params">(<span class="keyword">struct</span> file *filp,<span class="keyword">struct</span> vm_area_struct *vma)</span></span></div><div class="line">&#123;</div><div class="line">    vma-&gt;vm_flags |= VM_RESERVED;</div><div class="line">    vma-&gt;vm_ops=&amp;my_vm_ops;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> file_operations my_file_ops=&#123;</div><div class="line">    .owner=THIS_MODULE,</div><div class="line">    .mmap=my_mmap,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> lp;</div><div class="line">    <span class="keyword">int</span> result;</div><div class="line">    result=register_chrdev(DEVICE_NUMBER,</div><div class="line">                DEVICE_NAME,</div><div class="line">                &amp;my_file_ops);</div><div class="line">    <span class="keyword">if</span>(result&lt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    share_memory=__get_free_pages(GFP_KERNEL,<span class="number">4</span>);</div><div class="line">    <span class="keyword">for</span>(lp=<span class="number">0</span>;lp&lt;PAGE_COUNT;lp++)&#123;</div><div class="line">        <span class="built_in">sprintf</span>(share_memory+PAGE_SIZE*lp,<span class="string">"mayuan %d"</span>,lp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(share_memory!=<span class="literal">NULL</span>)&#123;</div><div class="line">        free_pages(share_memory,<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">    unregister_chrdev(DEVICE_NUMBER,</div><div class="line">            DEVICE_NAME);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(init_my_module);</div><div class="line">module_exit(exit_my_module);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构复习]]></title>
      <url>https://www.prime666.com/2017/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>为了保研，，加油O(∩_∩)O</p>
<a id="more"></a>
<h1 id="数据结构知识复习"><a href="#数据结构知识复习" class="headerlink" title="数据结构知识复习"></a>数据结构知识复习</h1><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>一个有穷结点的集合，要么是空的，要么是由根结点和左右子树构成。</p>
<p><strong>和度为2的树区别在于，子树有左右顺序之分。</strong></p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>斜二叉树</li>
<li>满二叉树</li>
<li>完全二叉树</li>
</ul>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li>第i层最多<strong>2^i-1^个结点</strong>。i=1,2,3…</li>
<li>深度为k的二叉树最多有<strong>2^k^-1个结点。</strong>此时就是满二叉树。k=1,2,3…</li>
<li>对任何非空二叉树，n~0~表示叶子结点数，n~2~表示度为2的结点（非叶子结点）数，那么<strong>n~0~=n~2~+1</strong>。（用边数证明 ）</li>
</ol>
<h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul>
<li>完全二叉树可以存放到数组中，非根结点i的父节点i/2(向下取整)，左孩子2i，右孩子2i+1。（一般二叉树这样存储也行，但是浪费空间）</li>
<li>链表存储。</li>
</ul>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ul>
<li>先序遍历——根左右</li>
<li>中序遍历——左根右</li>
<li>后序遍历——左右根</li>
</ul>
<p><strong>三者经过结点的路线一样，只是访问结点数据域的时机不同。</strong></p>
<p>遍历的递归程序不用多说了，很标准，背下来！</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root!= <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;root-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        preorder(root-&gt;left);</div><div class="line">        preorder(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root)</div><div class="line">    &#123;</div><div class="line">        inorder(root-&gt;left);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;root-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        inorder(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root)</div><div class="line">    &#123;</div><div class="line">        postorder(root-&gt;left);</div><div class="line">        postorder(root-&gt;right);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;root-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非递归的实现思路：</p>
<p>先序:</p>
<p><strong>实现一：由中序修改而来，即打印的时机。先序和中序只是打印结点的时机不同。针对非叶子结点来说，先序是第一次遇到就访问它，中序就是第二次遇到才访问它，后序是第三次遇到才访问它。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder2</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    Node *T=root;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">while</span>(T||!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(T)</div><div class="line">        &#123;<span class="comment">//左子树全部进栈</span></div><div class="line">            <span class="built_in">stack</span>.push_back(*T);<span class="comment">//第一次遇到这个结点</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;T-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">            T=T-&gt;left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">        &#123;</div><div class="line">            T=&amp;<span class="built_in">stack</span>.back();<span class="comment">//不能用*T=stack.back   第二次遇到这个结点</span></div><div class="line">            <span class="built_in">stack</span>.pop_back();<span class="comment">//访问栈顶，然后转向右子树。</span></div><div class="line">            T=T-&gt;right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>实现二：申请一个栈，头结点入栈后进入主循环。弹出栈顶结点，访问之，右孩子左孩子依次进栈（如果有），直到栈为空时结束循环。（了解即可）</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder3</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="built_in">stack</span>.push_back(*root);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node t=<span class="built_in">stack</span>.back();</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;t.val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        <span class="built_in">stack</span>.pop_back();</div><div class="line">        <span class="keyword">if</span>(t.right)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t.right);</div><div class="line">        <span class="keyword">if</span>(t.left)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t.left);</div><div class="line">        <span class="comment">/*先右孩子进栈，再左孩子进栈，才能满足先序。*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>中序：当遇到一个结点，就把它压栈，并去遍历其左子树。当左子树遍历结束后，弹出这个结点访问它，然后遍历其右子树。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder2</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    </div><div class="line">    Node *T=root;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">while</span>(T||!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(T)</div><div class="line">        &#123;<span class="comment">//左子树全部进栈</span></div><div class="line">            <span class="built_in">stack</span>.push_back(*T);</div><div class="line">            T=T-&gt;left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">        &#123;</div><div class="line">            T=&amp;<span class="built_in">stack</span>.back();<span class="comment">//不能用*T=stack.back</span></div><div class="line">            <span class="built_in">stack</span>.pop_back();<span class="comment">//访问栈顶，然后转向右子树。</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;T-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">            T=T-&gt;right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>后序：</strong></p>
<p><strong>双栈实现：</strong></p>
<ol>
<li>申请栈s1.s2，头结点入s1。</li>
<li>s1出栈记为tmp，将tmp的左右孩子依次入s2（如果有的话），tmp入s2。</li>
<li>重复2直到栈s1为空。</li>
</ol>
<p><strong>可以看到，入栈s2的顺序始终是根右左的形式，最后s2从栈顶到栈底的序列就是后序序列。</strong> </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder2</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; s1,s2;</div><div class="line">    s1.push_back(*root);</div><div class="line">    <span class="keyword">while</span>(!s1.empty())</div><div class="line">    &#123;</div><div class="line">        Node tmp=s1.back();</div><div class="line">        s1.pop_back();</div><div class="line">        <span class="keyword">if</span>(tmp.left)</div><div class="line">            s1.push_back(*tmp.left);</div><div class="line">        <span class="keyword">if</span>(tmp.right)</div><div class="line">            s1.push_back(*tmp.right);</div><div class="line">        s2.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(!s2.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;s2.back().val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        s2.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>单栈实现：</strong></p>
<ol>
<li>申请栈。pre记为最近一次弹出并打印的结点，current为栈顶结点。</li>
<li>进入主循环，左孩子依次进入栈，然后看右子树是否为空或者已被访问，满足就访问current，否则进入右子树。</li>
<li>重复2直到栈为空且current为空。</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder4</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node*&gt; <span class="built_in">stack</span>;</div><div class="line">    Node* pre= <span class="literal">nullptr</span>,*current=root;</div><div class="line">    <span class="keyword">while</span> (current||!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (current!= <span class="literal">nullptr</span>)</div><div class="line">        &#123;<span class="comment">//左孩子递归入栈</span></div><div class="line">            <span class="built_in">stack</span>.push_back(current);</div><div class="line">            current=current-&gt;left;</div><div class="line">        &#125;</div><div class="line">        current=<span class="built_in">stack</span>.back();</div><div class="line">        <span class="keyword">if</span>(current-&gt;right== <span class="literal">nullptr</span>||current-&gt;right==pre)</div><div class="line">        &#123;<span class="comment">//右子树为空或者已被访问</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;current-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">            pre=current;</div><div class="line">            <span class="built_in">stack</span>.pop_back();</div><div class="line">            current= <span class="literal">nullptr</span>;<span class="comment">//这个不能省。不然叶子结点无限重复。</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span><span class="comment">//否则进入右子树</span></div><div class="line">            current=current-&gt;right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>想来想去还是总结这个方法吧，和中序、先序类似的版本都很像。易于记忆。</em></p>
<p><strong>可以很容易的看到，和上面非递归的中序类似，只不过中序时直接先访问根节点，再进入右子树，而后序需要右子树遍历完成才访问根。</strong></p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="打印出叶子结点"><a href="#打印出叶子结点" class="headerlink" title="打印出叶子结点"></a>打印出叶子结点</h4><p>只需要在遍历程序中加一个判断即可，判断左右子树都为空时才输出，而不是遇到就输出。</p>
<p>修改先序遍历得到：（也可以修改中序、后序）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printleaves</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!root-&gt;left&amp;&amp;!root-&gt;right)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;root-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        printleaves(root-&gt;left);</div><div class="line">        printleaves(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二叉树高度"><a href="#二叉树高度" class="headerlink" title="二叉树高度"></a>二叉树高度</h4><p>高度的计算可有以下递推式：<strong>Height=max(H~L~,H~R~)+1</strong>。</p>
<p><strong>所以，必须知道左右子树高度之后才能得到树的高度，显然应该修改后序遍历。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getheight</span><span class="params">(Node* root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> L,R,H;</div><div class="line">    <span class="keyword">if</span>(root)</div><div class="line">    &#123;</div><div class="line">        L=getheight(root-&gt;left);</div><div class="line">        R=getheight(root-&gt;right);</div><div class="line">        H=L&gt;R?L:R;取左右中较大的树的深度</div><div class="line">        <span class="keyword">return</span> H+<span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span><span class="comment">//树为空</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二元表达式树的遍历"><a href="#二元表达式树的遍历" class="headerlink" title="二元表达式树的遍历"></a>二元表达式树的遍历</h4><p>中序遍历得到中缀表达式。但是中缀表达式会受到运算符优先级的影响。前缀和后缀都是正确的。</p>
<p>可以通过输出左子树时先输出一个左括号，输出完左子树后再输出右括号来解决它。</p>
<h4 id="已知两个遍历序列，确定二叉树"><a href="#已知两个遍历序列，确定二叉树" class="headerlink" title="已知两个遍历序列，确定二叉树"></a>已知两个遍历序列，确定二叉树</h4><p>只有先序和后序遍历序列，是不能唯一确定二叉树的。</p>
<ul>
<li><p>由先序和中序确定二叉树</p>
<p>思路：根据先序序列的第一个结点得到其根结点，根据根节点在中序遍历序列中的位置确定左右子树，对左右子树采用相同方法继续求解。</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-06-14_084707.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node* <span class="title">pre_in</span><span class="params">(<span class="keyword">int</span>* pre,<span class="keyword">int</span> pre_i,<span class="keyword">int</span> pre_j,<span class="keyword">int</span> * in,<span class="keyword">int</span> in_i,<span class="keyword">int</span> in_j,<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &amp;m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pre_i&gt;pre_j)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    Node *head=<span class="keyword">new</span> Node(pre[pre_i]);</div><div class="line">    <span class="keyword">int</span> index=m[pre[pre_i]];<span class="comment">//左子树有index-in_i个结点</span></div><div class="line">    head-&gt;left=pre_in(pre,pre_i+<span class="number">1</span>,pre_i+index-in_i,in,in_i,index<span class="number">-1</span>,m);</div><div class="line">    head-&gt;right=pre_in(pre,pre_i+index-in_i+<span class="number">1</span>,pre_j,in,index+<span class="number">1</span>,in_j,m);</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里m建立了中序序列值到索引的映射，目的为了方便及时在中序序列中找到根节点的下标。</p>
<p><strong>程序的难点在于在序列中切分左右子树，索引要细心，可以通过画图来思考。</strong></p>
</li>
<li><p>利用后序和中序重建二叉树</p>
<p>思路：和上述类似，先在后序序列中取最后一个结点，其为根节点，然后在中序序列中找到根节点下标，分成左右子树。<strong>如同上图中的左图，只不过根结点在最后而已。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node* <span class="title">post_in</span><span class="params">(<span class="keyword">int</span>* post,<span class="keyword">int</span> post_i,<span class="keyword">int</span> post_j,<span class="keyword">int</span> *in,<span class="keyword">int</span> in_i,<span class="keyword">int</span> in_j,<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&amp; m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(post_i&gt;post_j)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    Node* head=<span class="keyword">new</span> Node(post[post_j]);</div><div class="line">    <span class="keyword">int</span> index=m[post[post_j]];<span class="comment">//左子树依旧有index-in_i个结点</span></div><div class="line">    head-&gt;left=post_in(post,post_i,post_i+index-in_i<span class="number">-1</span>,in,in_i,index<span class="number">-1</span>,m);</div><div class="line">    head-&gt;right=post_in(post,post_i+index-in_i,post_j<span class="number">-1</span>,in,index+<span class="number">1</span>,in_j,m);</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>多画图，多思考。</em></p>
</li>
</ul>
<h4 id="统计结点个数"><a href="#统计结点个数" class="headerlink" title="统计结点个数"></a>统计结点个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_node</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+count_node(root-&gt;left)+count_node(root-&gt;right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>二叉树基本性质总结自此，回头遇到问题再补充~~~。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（三）]]></title>
      <url>https://www.prime666.com/2017/06/11/pat%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>PAT甲级1021——1030</p>
<a id="more"></a>
<h1 id="1021——1030"><a href="#1021——1030" class="headerlink" title="1021——1030"></a>1021——1030</h1><h2 id="1021-DFS-连通分量"><a href="#1021-DFS-连通分量" class="headerlink" title="1021[DFS+连通分量]"></a>1021[DFS+连通分量]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1021" target="_blank" rel="noopener">Deepest Root</a></p>
<p>题目大意就是如果图是连通的，输出最深的树的根结点的并集；否则输出错误信息。</p>
<p>思路：</p>
<p>​    <strong>先用DFS判断连通分量个数，如果是1个表示图连通，此时tmp也记录了所有最深的根结点，然后随便取一个（这里取了第一个）再次DFS，两次并起来就是结果。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/8.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> N;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; G;<span class="comment">//邻接表。不能用邻接矩阵因为太大了超内存</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;<span class="comment">//记录根节点的集合</span></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">10001</span>];</div><div class="line"><span class="keyword">int</span> max_depth=<span class="number">-1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;</div><div class="line">    visited[u]= <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(depth&gt;max_depth)</div><div class="line">    &#123;</div><div class="line">        max_depth=depth;</div><div class="line">        tmp.clear();</div><div class="line">        tmp.push_back(u);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(depth==max_depth)</div><div class="line">    &#123;</div><div class="line">        tmp.push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[u].size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!visited[G[u][i]])</div><div class="line">        &#123;</div><div class="line">            DFS(G[u][i],depth+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fill(visited,visited+<span class="number">10001</span>, <span class="literal">false</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    G.resize(N+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        G[u].push_back(v);</div><div class="line">        G[v].push_back(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cc=<span class="number">0</span>;<span class="comment">//连通分量个数</span></div><div class="line">    <span class="keyword">int</span> begin;<span class="comment">//记录第一次DFS后tmp的第一个元素，后面以此为起点再次DFS。二次DFS并集就是所有的结果（一次可能会漏解）</span></div><div class="line">    <span class="comment">/*判断连通分量*/</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!visited[i])</div><div class="line">        &#123;</div><div class="line">            DFS(i,<span class="number">1</span>);</div><div class="line">            cc++;</div><div class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tmp.size();++j)</div><div class="line">                &#123;</div><div class="line">                    res.insert(tmp[j]);</div><div class="line">                    <span class="keyword">if</span>(j==<span class="number">0</span>)</div><div class="line">                        begin=tmp[j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(cc&gt;<span class="number">1</span>)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Error: %d components"</span>,cc);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        fill(visited,visited+N+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        tmp.clear();</div><div class="line">        <span class="comment">//max_depth=0;</span></div><div class="line">        DFS(begin,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.size();++i)</div><div class="line">        &#123;</div><div class="line">            res.insert(tmp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it=res.begin();it!=res.end();it++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*it);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1022-查找"><a href="#1022-查找" class="headerlink" title="1022[查找]"></a>1022[查找]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1022" target="_blank" rel="noopener">Digital Library</a></p>
<p>思路：</p>
<p>​    <strong>程序目的是查询，即输入有关信息，输出相应信息。由此，这里依旧沿用用空间换时间的战术，对每个查询信息建立对应的键值~</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/8.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; Title,Author,Keywords,Publisher,Year;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;s,<span class="built_in">string</span> &amp;query_str)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="built_in">string</span> title,author,keywords,publisher,year;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;id;</div><div class="line">        getchar();<span class="comment">//读取换行符</span></div><div class="line">        getline(<span class="built_in">cin</span>,title);</div><div class="line">        Title[title].insert(id);</div><div class="line">        getline(<span class="built_in">cin</span>,author);</div><div class="line">        Author[author].insert(id);</div><div class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;keywords)</div><div class="line">        &#123;</div><div class="line">            Keywords[keywords].insert(id);</div><div class="line">            <span class="keyword">char</span> c=getchar();<span class="comment">//读取字符，提升到int后返回，这样可以容纳EOF等特殊值</span></div><div class="line">            <span class="keyword">if</span>(c==<span class="string">'\n'</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*getline(cin,keywords);</span></div><div class="line">        for (string &amp; e:split(keywords,' '))</div><div class="line">        &#123;</div><div class="line">            Keywords[e].insert(id);</div><div class="line">        &#125;*/</div><div class="line">        getline(<span class="built_in">cin</span>,publisher);</div><div class="line">        Publisher[publisher].insert(id);</div><div class="line">        getline(<span class="built_in">cin</span>,year);</div><div class="line">        Year[year].insert(id);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">string</span> query_str;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d: "</span>,&amp;num);</div><div class="line">        getline(<span class="built_in">cin</span>,query_str);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="string">": "</span>&lt;&lt;query_str&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            query(Title,query_str);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">2</span>)</div><div class="line">            query(Author,query_str);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">3</span>)</div><div class="line">            query(Keywords,query_str);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">4</span>)</div><div class="line">            query(Publisher,query_str);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">5</span>)</div><div class="line">            query(Year,query_str);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;s,<span class="built_in">string</span> &amp;query_str)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt;::const_iterator it=s.find(query_str);<span class="comment">//find返回迭代器，其指向一个pair，pair.first==key</span></div><div class="line">    <span class="keyword">if</span>(it==s.cend())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Not Found\n"</span>);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:it-&gt;second)<span class="comment">//set可以直接这样遍历，用迭代器也行。基于范围的for循环本质上可以运用于任何拥有begin和end成员的序列</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%07d\n"</span>,e);<span class="comment">//必须7位，我就艹了！</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1023-进制转换"><a href="#1023-进制转换" class="headerlink" title="1023[进制转换]"></a>1023[进制转换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1023" target="_blank" rel="noopener">Have Fun with Numbers</a></p>
<p>思路：</p>
<p>​    <strong>就是把输入的数翻倍，之后看输入的每一位是否在输出中都出现了且出现次数一样。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> <span class="built_in">set</span>[<span class="number">10</span>];</div><div class="line">    fill(<span class="built_in">set</span>,<span class="built_in">set</span>+<span class="number">10</span>,<span class="number">0</span>);</div><div class="line">    <span class="built_in">string</span> num;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;num;</div><div class="line">    <span class="keyword">int</span> res[num.size()+<span class="number">1</span>];</div><div class="line">    fill(res,res+num.size()+<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=num.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        num[i]-=<span class="string">'0'</span>;</div><div class="line">        <span class="built_in">set</span>[num[i]]++;</div><div class="line">        num[i]*=<span class="number">2</span>;</div><div class="line"></div><div class="line">        res[i+<span class="number">1</span>]+=num[i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(num[i]&gt;<span class="number">9</span>)</div><div class="line">        &#123;</div><div class="line">            res[i]+=num[i]/<span class="number">10</span>;</div><div class="line">            res[i+<span class="number">1</span>]%=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//cout&lt;&lt;"length="&lt;&lt;num.size()&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.size()+<span class="number">1</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;res[i]==<span class="number">0</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>[res[i]]&gt;<span class="number">0</span>)</div><div class="line">            <span class="built_in">set</span>[res[i]]--;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">            <span class="keyword">goto</span> NO;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">    NO:</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.size()+<span class="number">1</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;res[i]==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1024-字符串"><a href="#1024-字符串" class="headerlink" title="1024[字符串]"></a>1024[字符串]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1024" target="_blank" rel="noopener">Palindromic Number</a></p>
<p>题目是非常经典的回文数问题。</p>
<p>思路:解决这个问题的最快方法是用string，而不是用数组。因为有内建的<code>reverse</code>函数，很方便。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// @author prime on 2017/6/11.</div><div class="line">//</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void add(string &amp;a,string &amp;b)</div><div class="line">&#123;</div><div class="line">    string res(a.size(),0);</div><div class="line">    int carry=0;//是否进位</div><div class="line">    for (int i=a.size()-1;i&gt;=0;i--)</div><div class="line">    &#123;</div><div class="line">        res[i]=a[i]+b[i]-'0'+carry;</div><div class="line">        carry=0;</div><div class="line">        if(res[i]&gt;'9')</div><div class="line">        &#123;</div><div class="line">            carry=1;</div><div class="line">            res[i]-=10;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if(carry)</div><div class="line">        res='1'+res;</div><div class="line">    a=res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int K;</div><div class="line">    string in;</div><div class="line">    cin&gt;&gt;in&gt;&gt;K;</div><div class="line">    for (int i=0;i&lt;K;++i)</div><div class="line">    &#123;</div><div class="line">        string b=in;</div><div class="line">        reverse(b.begin(),b.end());</div><div class="line">        if(b==in)</div><div class="line">        &#123;</div><div class="line">            cout&lt;&lt;b&lt;&lt;'\n'&lt;&lt;i;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        add(in,b);</div><div class="line">    &#125;</div><div class="line">    cout&lt;&lt;in&lt;&lt;"\n"&lt;&lt;K;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是数组版的，有一个用例过不去:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_palindromic</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(a.size()==<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> pre=a.cbegin(),it=a.cend()<span class="number">-1</span>;pre!=it;pre++,it--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(*pre!=*it)</div><div class="line">        &#123;</div><div class="line">            flag= <span class="literal">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">auto</span> it=a.begin(),re=a.end()<span class="number">-1</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">    <span class="keyword">while</span> (it!=a.end())</div><div class="line">    &#123;</div><div class="line">        tmp.push_back(*it+*re);</div><div class="line">        it++;re--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=tmp.size()<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(tmp[i]&gt;<span class="number">9</span>)</div><div class="line">        &#123;</div><div class="line">            tmp[i<span class="number">-1</span>]+=tmp[i]/<span class="number">10</span>;</div><div class="line">            tmp[i]%=<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(tmp[<span class="number">0</span>]&gt;<span class="number">9</span>)</div><div class="line">    &#123;</div><div class="line">        tmp.insert(tmp.begin(),<span class="number">0</span>);</div><div class="line">        tmp[<span class="number">0</span>]=tmp[<span class="number">1</span>]/<span class="number">10</span>;</div><div class="line">        tmp[<span class="number">1</span>]%=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    a=tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> input;</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;input&gt;&gt;k;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; e:input)</div><div class="line">    &#123;</div><div class="line">        a.push_back(e-<span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(is_palindromic(a))</div><div class="line">            <span class="keyword">goto</span> YES;</div><div class="line">        add(a);</div><div class="line">        total++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:a)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;e;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;k;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    YES:</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:a)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;e;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>&lt;&lt;total;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1025-排序"><a href="#1025-排序" class="headerlink" title="1025[排序]"></a>1025[排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1025" target="_blank" rel="noopener">PAT Ranking</a></p>
<p>思路：类似的排序题前面已经做过不少了，这里也一样。<strong>先局部小排，再全局大排。</strong></p>
<p><strong>这种题不是很难，但要细心，什么时候可以合并步骤什么时候不行，得清楚。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/11.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Testee</div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> id;</div><div class="line">    <span class="keyword">int</span> local_num;</div><div class="line">    <span class="keyword">int</span> local_rank;</div><div class="line">    <span class="keyword">int</span> score;</div><div class="line">    <span class="keyword">int</span> total_rank;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Testee&amp; s1, <span class="keyword">const</span> Testee &amp;s2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> s1.score==s2.score?s1.id&lt;s2.id:s1.score&gt;s2.score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">    <span class="built_in">vector</span>&lt;Testee&gt; res;</div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;K;</div><div class="line">        total+=K;</div><div class="line">        Testee tmp;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;tmp.id&gt;&gt;tmp.score;</div><div class="line">            res.push_back(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*局部排序*/</span></div><div class="line">        sort(res.end()-K,res.end(),cmp);</div><div class="line"></div><div class="line">        res[total-K].local_rank=<span class="number">1</span>;</div><div class="line">        res[total-K].local_num=i+<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;K;++j)</div><div class="line">        &#123;</div><div class="line">            res[total-K+j].local_num=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(res[total-K+j].score==res[total-K+j<span class="number">-1</span>].score)</div><div class="line">            &#123;</div><div class="line">                res[total-K+j].local_rank=res[total-K+j<span class="number">-1</span>].local_rank;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                res[total-K+j].local_rank=j+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(res.begin(),res.end(),cmp);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;total&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    res[<span class="number">0</span>].total_rank=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;res.size();i++)</div><div class="line">    &#123;<span class="comment">//这一步不能省，起初想法直接输出排名，但是需要考虑可能有多于2个成绩一样的情况，遂两个用例过不去</span></div><div class="line">        <span class="keyword">if</span>(res[i].score==res[i<span class="number">-1</span>].score)</div><div class="line">        &#123;</div><div class="line">            res[i].total_rank=res[i<span class="number">-1</span>].total_rank;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">           res[i].total_rank=i+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e:res)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;e.id&lt;&lt;<span class="string">" "</span>&lt;&lt;e.total_rank&lt;&lt;<span class="string">" "</span>&lt;&lt;e.local_num&lt;&lt;<span class="string">" "</span>&lt;&lt;e.local_rank&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1026-模拟-排序"><a href="#1026-模拟-排序" class="headerlink" title="1026[模拟+排序]"></a>1026[模拟+排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1026" target="_blank" rel="noopener">Table Tennis</a></p>
<p>思路：<strong>参照以往银行排队问题，通过记录每个桌子最早结束时间来判断下一桌。时间依旧化成秒统一计算。主循环遍历人，根据下一桌和当前人是否vip分为四种情况：</strong></p>
<ul>
<li>下一张桌子是vip，人也是。直接安排。</li>
<li>下一张桌子是vip，人不是。对队伍进行遍历，看是否有vip且vip客户到达时间在该桌子空闲之前，根据情况安排vip或者当前人。</li>
<li>下一张桌子不是vip，人是vip。先看vip桌子里是否有不需要等的，优先安排到vip桌。否则当做普通人安排即可。</li>
<li>下一张桌子和人都不是vip，那就直接安排。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/12.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Table</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> over_time;<span class="comment">//结束时间</span></div><div class="line">    <span class="keyword">int</span> serve_count;<span class="comment">//服务人数</span></div><div class="line">    <span class="keyword">int</span> tag;<span class="comment">//VIP桌？</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> People</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> arrive_time;</div><div class="line">    <span class="keyword">int</span> tag;</div><div class="line">    <span class="keyword">int</span> serve_time;<span class="comment">//开始服务时间</span></div><div class="line">    <span class="keyword">int</span> play_time;<span class="comment">//玩了多久</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N,K,M;</div><div class="line"><span class="built_in">vector</span>&lt;People&gt; p;</div><div class="line"><span class="built_in">vector</span>&lt;Table&gt; t;<span class="comment">//K张桌子1~K</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> People&amp; o1,<span class="keyword">const</span> People&amp; o2)</span></span></div><div class="line">&#123;<span class="comment">//根据到达时间进行排序</span></div><div class="line">    <span class="keyword">return</span> o1.arrive_time&lt;o2.arrive_time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> People&amp; o1,<span class="keyword">const</span> People&amp; o2)</span></span></div><div class="line">&#123;<span class="comment">//根据服务开始时间进行排序</span></div><div class="line">    <span class="keyword">return</span> o1.serve_time&lt;o2.serve_time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_next_vip</span><span class="params">(<span class="keyword">int</span> vip)</span></span></div><div class="line">&#123;</div><div class="line">    vip++;</div><div class="line">    <span class="keyword">for</span> (;vip!=p.size()&amp;&amp;p[vip].tag==<span class="number">0</span>;vip++);</div><div class="line">    <span class="keyword">return</span> vip;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Allocate_table</span><span class="params">(<span class="keyword">int</span> current,<span class="keyword">int</span> point)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(p[current].arrive_time&lt;t[point].over_time)</div><div class="line">    &#123;</div><div class="line">        p[current].serve_time=t[point].over_time;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        p[current].serve_time=p[current].arrive_time;</div><div class="line">    &#125;</div><div class="line">    t[point].over_time=p[current].play_time+p[current].serve_time;</div><div class="line">    t[point].serve_count++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    People tmp;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,h,m,s,play;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d %d"</span>,&amp;h,&amp;m,&amp;s,&amp;play,&amp;tmp.tag);</div><div class="line">        tmp.arrive_time=h*<span class="number">3600</span>+m*<span class="number">60</span>+s;</div><div class="line">        <span class="keyword">if</span>(tmp.arrive_time&gt;=<span class="number">21</span>*<span class="number">3600</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        tmp.serve_time=<span class="number">21</span>*<span class="number">3600</span>;<span class="comment">//表示还没有被计算过</span></div><div class="line">        tmp.play_time=play&lt;<span class="number">120</span>?play*<span class="number">60</span>:<span class="number">7200</span>;<span class="comment">//最多2小时</span></div><div class="line">        p.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;K,&amp;M);</div><div class="line">    t.resize(K+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; e:t)<span class="comment">//桌子们初始化</span></div><div class="line">    &#123;</div><div class="line">        e.over_time=<span class="number">8</span>*<span class="number">3600</span>;<span class="comment">//一开始所有桌子的结束时间初始化8时</span></div><div class="line">        e.serve_count=<span class="number">0</span>;</div><div class="line">        e.tag=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,num;i&lt;=M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</div><div class="line">        t[num].tag=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    sort(p.begin(),p.end(),cmp);<span class="comment">//按照来的顺序排队</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> current=<span class="number">0</span>,vip_index=<span class="number">-1</span>;<span class="comment">//当前队列的索引，下一个vip的索引</span></div><div class="line">    vip_index=Find_next_vip(vip_index);</div><div class="line">    <span class="keyword">while</span>(current&lt;p.size())</div><div class="line">    &#123;<span class="comment">//对队伍进行遍历</span></div><div class="line">        <span class="keyword">int</span> point=<span class="number">0</span>,min_end_time=<span class="number">999999</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">        &#123;<span class="comment">//用point指向最快结束的一桌</span></div><div class="line">            <span class="keyword">if</span>(t[i].over_time&lt;min_end_time)</div><div class="line">            &#123;</div><div class="line">                min_end_time=t[i].over_time;</div><div class="line">                point=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(min_end_time&gt;=<span class="number">21</span>*<span class="number">3600</span>)<span class="comment">//打烊了，不再接待新顾客</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(p[current].tag==<span class="number">1</span>&amp;&amp;current&lt;vip_index)</div><div class="line">        &#123;<span class="comment">//中间优先安排的要过滤掉</span></div><div class="line">            current++;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(t[point].tag==<span class="number">1</span>)</div><div class="line">        &#123;<span class="comment">//下一个是vip桌</span></div><div class="line">            <span class="keyword">if</span>(p[current].tag==<span class="number">1</span>)</div><div class="line">            &#123;<span class="comment">//正好下一个人是VIP</span></div><div class="line">                Allocate_table(current,point);</div><div class="line">                vip_index=Find_next_vip(vip_index);</div><div class="line">                current++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(vip_index&lt;p.size()&amp;&amp;p[vip_index].arrive_time&lt;=t[point].over_time)</div><div class="line">                &#123;<span class="comment">//如果队伍后面还有vip则优先安排它到这个桌子</span></div><div class="line">                    Allocate_table(vip_index,point);</div><div class="line">                    vip_index=Find_next_vip(vip_index);</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    Allocate_table(current,point);</div><div class="line">                    current++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;<span class="comment">//下一桌不是VIP桌</span></div><div class="line">            <span class="keyword">if</span>(p[current].tag==<span class="number">0</span>)</div><div class="line">            &#123;<span class="comment">//下一个人也不是VIP</span></div><div class="line">                Allocate_table(current,point);</div><div class="line">                current++;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;<span class="comment">//下一个人是VIP</span></div><div class="line">                <span class="keyword">int</span> vip_point=<span class="number">-1</span>,min_vip_end_time=<span class="number">99999999</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(t[i].tag==<span class="number">1</span>&amp;&amp;t[i].over_time&lt;min_vip_end_time)</div><div class="line">                    &#123;</div><div class="line">                        vip_point=i;</div><div class="line">                        min_vip_end_time=t[i].over_time;</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="comment">//先在vip桌中找，找不到就当作普通客人安排</span></div><div class="line">                <span class="keyword">if</span>(vip_point!=<span class="number">-1</span>&amp;&amp;p[current].arrive_time&gt;=min_vip_end_time)</div><div class="line">                    Allocate_table(current,vip_point);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    Allocate_table(current,point);</div><div class="line"></div><div class="line">                vip_index=Find_next_vip(vip_index);<span class="comment">//更新下一个vip</span></div><div class="line">                current++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(p.begin(),p.end(),cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p.size()&amp;&amp;p[i].serve_time&lt;<span class="number">21</span>*<span class="number">3600</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,p[i].arrive_time/<span class="number">3600</span>,p[i].arrive_time%<span class="number">3600</span>/<span class="number">60</span>,p[i].arrive_time%<span class="number">60</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d "</span>,p[i].serve_time/<span class="number">3600</span>,p[i].serve_time%<span class="number">3600</span>/<span class="number">60</span>,p[i].serve_time%<span class="number">60</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,round((p[i].serve_time-p[i].arrive_time)/<span class="number">60.0</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,t[i].serve_count);</div><div class="line">        <span class="keyword">if</span>(i!=K)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1027-进制转换"><a href="#1027-进制转换" class="headerlink" title="1027[进制转换]"></a>1027[进制转换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1027" target="_blank" rel="noopener">Colors in Mars</a></p>
<p>思路：简单的进制转换问题，难度不大。细心就好。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/12.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">13</span>]=&#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; convert(<span class="keyword">int</span> a)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    res.push_back(a/<span class="number">13</span>);</div><div class="line">    res.push_back(a%<span class="number">13</span>);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A=convert(a),B=convert(b),C=convert(c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"#%c%c%c%c%c%c"</span>,<span class="built_in">map</span>[A[<span class="number">0</span>]],<span class="built_in">map</span>[A[<span class="number">1</span>]],<span class="built_in">map</span>[B[<span class="number">0</span>]],<span class="built_in">map</span>[B[<span class="number">1</span>]],<span class="built_in">map</span>[C[<span class="number">0</span>]],<span class="built_in">map</span>[C[<span class="number">1</span>]]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1028-排序"><a href="#1028-排序" class="headerlink" title="1028[排序]"></a>1028[排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1028" target="_blank" rel="noopener">List Sorting</a></p>
<p>思路：就是简单的排序，不过，最后一个用例很大，用string保存name会超时的。本以为用cin慢，关闭同步、换scanf都不好使。换成char数组就过了 ，太坑了吧？</p>
<p><strong>如果不是这里限制，一般id这种都限制几位，用string较为方便，用整型输出时一定记住格式！看是否需要补全。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> score;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_id</span><span class="params">(<span class="keyword">const</span> Student&amp; o1, <span class="keyword">const</span> Student&amp; o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> o1.id&lt;o2.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_name</span><span class="params">(<span class="keyword">const</span> Student&amp; o1,<span class="keyword">const</span> Student&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//return o1.name!=o2.name?o1.name&lt;o2.name:o1.id&lt;o2.id;</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(o1.name,o2.name)&lt;=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_score</span><span class="params">(<span class="keyword">const</span> Student&amp;o1,<span class="keyword">const</span> Student&amp;o2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//return o1.score!=o2.score?o1.score&lt;o2.score:o1.id&lt;o2.id;</span></div><div class="line">    <span class="keyword">return</span> o1.score&lt;=o2.score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//最后一个测试点超大，string会超时。。。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,C;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;C);</div><div class="line">    <span class="built_in">vector</span>&lt;Student&gt; s(N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>,&amp;s[i].id,s[i].name,&amp;s[i].score);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (C)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            sort(s.begin(),s.end(),cmp_id);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            sort(s.begin(),s.end(),cmp_name);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            sort(s.begin(),s.end(),cmp_score);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%06d %s %d\n"</span>,s[i].id,s[i].name,s[i].score);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1029-两个指针"><a href="#1029-两个指针" class="headerlink" title="1029[两个指针]"></a>1029[两个指针]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1029" target="_blank" rel="noopener">Median</a></p>
<p>思路：假设两个序列长度m,n，找到中位数就是去掉<code>(m+n-1)/2</code>个数字即可。所有就用两个指针，一直剃掉元素。这里的题目意思是<strong>上中位数</strong>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/13.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n1,n2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n1);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt; a(n1);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;a[i]);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n2);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt; b(n2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n2;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;b[i]);</div><div class="line"></div><div class="line">    <span class="keyword">auto</span> p1=a.cbegin(),p2=b.cbegin();</div><div class="line">    <span class="keyword">int</span> count=(n1+n2<span class="number">-1</span>)/<span class="number">2</span>;<span class="comment">//舍弃这么多的数字</span></div><div class="line">    <span class="keyword">while</span>(count!=<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(p1==a.cend())</div><div class="line">        &#123;</div><div class="line">            p2++;</div><div class="line">            <span class="keyword">goto</span> next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p2==b.cend())</div><div class="line">        &#123;</div><div class="line">            p1++;</div><div class="line">            <span class="keyword">goto</span> next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(*p1&lt;=*p2)</div><div class="line">            p1++;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            p2++;</div><div class="line">        next:</div><div class="line">        count--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> res;</div><div class="line">    <span class="keyword">if</span>(p1!=a.cend()&amp;&amp;p2!=b.cend())</div><div class="line">        res=*p1&gt;*p2?*p2:*p1;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        res=p1==a.cend()?*p2:*p1;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%ld"</span>,res);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1030-Dijkstra-DFS"><a href="#1030-Dijkstra-DFS" class="headerlink" title="1030[Dijkstra+DFS]"></a>1030[Dijkstra+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1030" target="_blank" rel="noopener">Travel Plan</a></p>
<p>又到了图论，好消息是PAT的图论题套路差不多，和之前的自行车调度问题很像；坏消息是模板我还是记不住/(ㄒoㄒ)/~~。</p>
<p>思路：</p>
<p>​    <strong>首先计算最短路径，对每个结点来说，记录离它最近的前驱结点，如果两个距离都一样是最近的，那么就都记录进去。然后从终点开始，逆向DFS（有点回溯的味道），主要针对所有的前驱结点，一边前进一边记录路径。直到到达起始结点后，对路径的所有的结点计算总费用，如果总费用小于全局变量min_cost就更新它，并把当前路径拷贝给path。（DFS时无需再用visited数组，因为到达起点就是结束）</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/15.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"><span class="keyword">int</span> G[<span class="number">510</span>][<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> cost[<span class="number">510</span>][<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> dist[<span class="number">510</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> N,M,S,D;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[<span class="number">510</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path,tmp_path;</div><div class="line"></div><div class="line"><span class="keyword">int</span> min_cost=inf,tmp_cost;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/*初始化各种变量*/</span></div><div class="line">    fill(visited,visited+<span class="number">510</span>, <span class="literal">false</span>);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+<span class="number">510</span>*<span class="number">510</span>,inf);</div><div class="line">    fill(dist,dist+<span class="number">510</span>,inf);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;N,&amp;M,&amp;S,&amp;D);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,u,v;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;G[u][v],&amp;cost[u][v]);</div><div class="line">        G[v][u]=G[u][v];</div><div class="line">        cost[v][u]=cost[u][v];</div><div class="line">    &#125;</div><div class="line">    dist[S]=<span class="number">0</span>;</div><div class="line">    pre[S].push_back(S);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_dist=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;min_dist&gt;dist[j])</div><div class="line">            &#123;</div><div class="line">                min_dist=dist[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;++v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[v]&gt;dist[u]+G[u][v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].clear();</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                    dist[v]=dist[u]+G[u][v];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist[v]==dist[u]+G[u][v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//fill(visited,visited+N, false);</span></div><div class="line">    DFS(D);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,path[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>,dist[D],min_cost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//visited[u]=true;</span></div><div class="line">    <span class="keyword">if</span>(u==S)</div><div class="line">    &#123;<span class="comment">//从终点已经回到起点</span></div><div class="line">        tmp_path.push_back(u);</div><div class="line">        tmp_cost=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tmp_path.size()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">        &#123;<span class="comment">//从源点到目的结点的路径</span></div><div class="line">            <span class="keyword">int</span> index=tmp_path[i];</div><div class="line">            <span class="keyword">int</span> next_index=tmp_path[i<span class="number">-1</span>];</div><div class="line">            tmp_cost+=cost[index][next_index];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(tmp_cost&lt;min_cost)</div><div class="line">        &#123;</div><div class="line">            min_cost=tmp_cost;</div><div class="line">            path=tmp_path;</div><div class="line">        &#125;</div><div class="line">        tmp_path.pop_back();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        tmp_path.push_back(u);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[u].size();i++)</div><div class="line">        &#123;</div><div class="line">            DFS(pre[u][i]);</div><div class="line">        &#125;</div><div class="line">        tmp_path.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（二）]]></title>
      <url>https://www.prime666.com/2017/06/11/pat%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>PAT甲级11——20。。为了保研，加油<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/9977E26C.png" alt="img" title="">
                </div>
                <div class="image-caption">img</div>
            </figure></p>
<a id="more"></a>
<h1 id="1011——1020"><a href="#1011——1020" class="headerlink" title="1011——1020"></a>1011——1020</h1><h2 id="1011-数学计算"><a href="#1011-数学计算" class="headerlink" title="1011[数学计算]"></a>1011[数学计算]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1011" target="_blank" rel="noopener">World Cup Betting</a></p>
<p>题目要求:数学计算而已</p>
<p><strong>思路:整个数学公式</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">float</span> res[<span class="number">3</span>];</div><div class="line">    <span class="keyword">char</span> choice[<span class="number">3</span>];</div><div class="line">    <span class="keyword">float</span> a,b,c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%f %f %f"</span>,&amp;a,&amp;b,&amp;c);</div><div class="line">        <span class="keyword">if</span>(a&gt;=b&amp;&amp;a&gt;=c)</div><div class="line">        &#123;</div><div class="line">            res[i]=a;</div><div class="line">            choice[i]=<span class="string">'W'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b&gt;=a&amp;&amp;b&gt;=c)</div><div class="line">        &#123;</div><div class="line">            res[i]=b;</div><div class="line">            choice[i]=<span class="string">'T'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=a&amp;&amp;c&gt;=b)</div><div class="line">        &#123;</div><div class="line">            res[i]=c;</div><div class="line">            choice[i]=<span class="string">'L'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> profit=(res[<span class="number">0</span>]*res[<span class="number">1</span>]*res[<span class="number">2</span>]*<span class="number">0.65</span><span class="number">-1</span>)*<span class="number">2</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c %c %c %.2f"</span>,choice[<span class="number">0</span>],choice[<span class="number">1</span>],choice[<span class="number">2</span>],profit);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1012-排序"><a href="#1012-排序" class="headerlink" title="1012[排序]"></a>1012[排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1012" target="_blank" rel="noopener">The Best Rank</a></p>
<p>题目要求:对成绩进行排序，输出每个人最好的排名。</p>
<p><strong>思路:排序</strong></p>
<p><strong>这道题最好用一个数组保存每个人的最好成绩，这样空间换时间不容易出错。注意并列的情况，如果两个第一名成绩一样的话，就没有第二名了，直接下一个排第三。也就是说1 1 3 4 5而不是11  2  3 4这种布局。</strong></p>
<p><strong>排序用的标准库算法，方便的很，提前说一下，这个排序函数可以包含很多语意，后面的题目会遇到。</strong></p>
<p><strong>这里用循环的方法，每次针对一门课进行排序，记录相应的rank。注意最后的map查找操作，算法题最好用<code>find</code>。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">class</span> Student</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">int</span> score[<span class="number">4</span>];<span class="comment">//0下标代表平均分</span></div><div class="line">    <span class="keyword">int</span> best;<span class="comment">//最好的科目下标</span></div><div class="line">    <span class="keyword">int</span> rank[<span class="number">4</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> course[<span class="number">4</span>]=&#123;<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'M'</span>,<span class="string">'E'</span>&#125;;</div><div class="line"><span class="keyword">int</span> current;<span class="comment">//不能声明成index，我就fuck了</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student s1,Student s2)</span></span></div><div class="line">&#123;<span class="comment">//根据不同情况进行不同规则的排序。</span></div><div class="line">    <span class="keyword">return</span> s1.score[current]&gt;s2.score[current];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; exist;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</div><div class="line">    Student s[n];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;s[i].id,&amp;s[i].score[<span class="number">1</span>],&amp;s[i].score[<span class="number">2</span>],&amp;s[i].score[<span class="number">3</span>]);</div><div class="line">        s[i].score[<span class="number">0</span>]=(s[i].score[<span class="number">1</span>]+s[i].score[<span class="number">2</span>]+s[i].score[<span class="number">3</span>])/<span class="number">3.0</span>+<span class="number">0.5</span>;<span class="comment">//平均数四舍五入</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(current=<span class="number">0</span>;current&lt;<span class="number">4</span>;++current)</div><div class="line">    &#123;<span class="comment">//分别按照每门课进行排名</span></div><div class="line">        sort(s,s+n,cmp);</div><div class="line">        s[<span class="number">0</span>].rank[current]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</div><div class="line">        &#123;</div><div class="line">            s[i].rank[current]=i+<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(s[i].score[current]==s[i<span class="number">-1</span>].score[current])</div><div class="line">                s[i].rank[current]=s[i<span class="number">-1</span>].rank[current];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">    &#123;</div><div class="line">        exist[s[i].id]=i;<span class="comment">//记录存在的id和其下标的映射</span></div><div class="line">        <span class="keyword">int</span> minx=s[i].rank[<span class="number">0</span>];<span class="comment">//记录最好科目的排名</span></div><div class="line">        s[i].best=<span class="number">0</span>;<span class="comment">//记录最好科目的下标</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">4</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i].rank[j]&lt;minx)</div><div class="line">            &#123;</div><div class="line">                minx=s[i].rank[j];</div><div class="line">                s[i].best=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id,k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;id);</div><div class="line">        <span class="keyword">if</span>(exist.find(id)!=exist.end())<span class="comment">//map如果没有对应的键值，就会插入键，然后值初始化。用at会抛出异常，算法题不适合。还是用这种方法吧。</span></div><div class="line">        &#123;</div><div class="line">            k=exist[id];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>,s[k].rank[s[k].best],course[s[k].best]);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"N/A\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1013-连通分量-DFS"><a href="#1013-连通分量-DFS" class="headerlink" title="1013[连通分量+DFS]"></a>1013[连通分量+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1013" target="_blank" rel="noopener">Battle Over Cities</a></p>
<p>题目要求:求最少添加几条边让这个图连通。</p>
<p>思路：求出图的连通分量个数即可，添加连通分量数-1条边。<strong>因为当a个互相分立的连通分量需要变为连通图的时候，只需要添加a-1个路线，就能让他们相连。</strong></p>
<p><strong>对于每一个被占领的城市，去除这个城市结点，就是把它标记为已经访问过，这样在深度优先遍历的时候，对于所有未访问的结点进行遍历，就能求到所有的连通分量的个数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> G[<span class="number">1000</span>][<span class="number">1000</span>];</div><div class="line"><span class="keyword">bool</span> visited[<span class="number">1000</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> source)</span></span></div><div class="line">&#123;</div><div class="line">    visited[source]= <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;++v)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!visited[v]&amp;&amp;G[source][v]==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            dfs(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m,k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;k);</div><div class="line">    fill(visited,visited+n+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</div><div class="line">        G[u][v]=G[v][u]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> v,res=<span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</div><div class="line">        visited[v]= <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j])</div><div class="line">            &#123;</div><div class="line">                dfs(j);</div><div class="line">                res++;<span class="comment">//每当DFS一次，连通分量数加一。</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        fill(visited,visited+n+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1014-队列"><a href="#1014-队列" class="headerlink" title="1014[队列]"></a>1014[队列]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1014" target="_blank" rel="noopener">Waiting in Line</a></p>
<p>思路：<strong>对每个窗口设置一个结构体，两个成员记录第一个结束的时间和队列全部完成的时间，之所以记录第一个，是为了确定黄线外的人应该新加入哪条队列 ，而第二个是为了确定新加入的人是否sorry。注意，为了方便对时间统一处理，这里统一化成了分钟，这是很有用的思路。适当用goto语句也挺不错。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Window</div><div class="line">&#123;</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">int</span> first_over;<span class="comment">//队列第一个结束的时间</span></div><div class="line">    <span class="keyword">int</span> last_over;<span class="comment">//队列最后一个结束的时间</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,K,Q;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;N,&amp;M,&amp;K,&amp;Q);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; time(K+<span class="number">1</span>);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; sorry(K+<span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> index=<span class="number">1</span>;<span class="comment">//处理到第几个顾客</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(K+<span class="number">1</span>);<span class="comment">//记录每个顾客的结束时间</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;time[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;Window&gt; w(N+<span class="number">1</span>);</div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)<span class="comment">//队列中每一个</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;++j)<span class="comment">//每个窗口</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(index&lt;=K)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(w[j].last_over&gt;=<span class="number">540</span>)<span class="comment">//思维漏洞，没考虑黄线内的可能也会sorry</span></div><div class="line">                &#123;</div><div class="line">                    sorry[index]= <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">goto</span> xixi;</div><div class="line">                &#125;</div><div class="line">                w[j].q.push_back(time[index]);</div><div class="line">                w[j].last_over+=time[index];</div><div class="line">                <span class="keyword">if</span>(i==<span class="number">1</span>)</div><div class="line">                &#123;<span class="comment">//每队的第一个结束时间</span></div><div class="line">                    w[j].first_over=time[index];</div><div class="line">                &#125;</div><div class="line">                res[index]=w[j].last_over;<span class="comment">//每次都是从最后开始排队，队伍结束就是自己结束</span></div><div class="line">                xixi:</div><div class="line">                    index++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(index&lt;=K)</div><div class="line">    &#123;<span class="comment">//有人在黄线外</span></div><div class="line">        <span class="keyword">int</span> min_time=w[<span class="number">1</span>].first_over;</div><div class="line">        <span class="keyword">int</span> point=<span class="number">1</span>;<span class="comment">//记录下标</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(w[i].first_over&lt;min_time)</div><div class="line">            &#123;</div><div class="line">                min_time=w[i].first_over;</div><div class="line">                point=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(w[point].last_over&gt;=<span class="number">540</span>)</div><div class="line">        &#123;</div><div class="line">            sorry[index]= <span class="literal">true</span>;</div><div class="line">            <span class="keyword">goto</span> hehe;</div><div class="line">        &#125;</div><div class="line">        w[point].q.pop_front();</div><div class="line">        w[point].q.push_back(time[index]);</div><div class="line">        w[point].first_over+=w[point].q[<span class="number">0</span>];</div><div class="line">        w[point].last_over+=time[index];</div><div class="line">        res[index]=w[point].last_over;</div><div class="line">        hehe:</div><div class="line">            ++index;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,check;i&lt;=Q;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;check);</div><div class="line">        <span class="keyword">if</span>(sorry[check])</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Sorry\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> hour,minute;</div><div class="line">            minute=res[check]%<span class="number">60</span>;</div><div class="line">            hour=res[check]/<span class="number">60</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>,hour+<span class="number">8</span>,minute);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1015-素数-进制转换"><a href="#1015-素数-进制转换" class="headerlink" title="1015[素数+进制转换]"></a>1015[素数+进制转换]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1015" target="_blank" rel="noopener">Reversible Primes</a></p>
<p>思路：很简单的思路，就是把各位反转后判断是否是素数即可。注意，如果原本就不是素数，直接输出否即可。</p>
<p><strong>这里有两种思路，第一种是用对数函数判断位数，然后指数公式求解反转各位后的值。第二种是把各位放到数组中，然后累乘求出反转后的值。判断素数的函数也是比较经典的一种，背下来吧。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> num)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">1</span>)<span class="comment">//多加一个没坏处</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(num);++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,radix,reverse=<span class="number">0</span>,digit;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;radix);</div><div class="line">        <span class="keyword">if</span>(!isprime(n))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        digit=<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(radix)+<span class="number">1</span>;<span class="comment">//这里不能用log10(n)，因为基数是radix，用换底公式解决吧！</span></div><div class="line">        reverse=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=digit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">        &#123;</div><div class="line">            reverse+=(<span class="keyword">int</span>)<span class="built_in">pow</span>((<span class="keyword">double</span>)radix,(<span class="keyword">double</span>)i)*(n%radix);</div><div class="line">            n/=radix;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*int len = 0;</span></div><div class="line">        int arr[100];</div><div class="line">        do&#123;</div><div class="line">            arr[len++] = n % radix;</div><div class="line">            n = n / radix;</div><div class="line">        &#125;while(n != 0);</div><div class="line">        for(int i = 0; i &lt; len; i++) &#123;</div><div class="line">            n = n * radix + arr[i];</div><div class="line">        &#125;*/</div><div class="line">        <span class="keyword">if</span>(isprime(reverse))</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1016-排序"><a href="#1016-排序" class="headerlink" title="1016[排序]"></a>1016[排序]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1016" target="_blank" rel="noopener">Phone Bills</a></p>
<p>思路：典型的排序问题。<strong>注意这里的排序函数的书写，后面很多题也用到这种形式。针对时间的计算依旧同一单位！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Recode</div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="keyword">int</span> month,day,hour,minute,time;</div><div class="line">    <span class="built_in">string</span> status;<span class="comment">//on or off?</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(Recode &amp; s1,Recode &amp;s2)</span></span></div><div class="line">&#123;<span class="comment">//一条比较语句可以包含很多信息</span></div><div class="line">    <span class="keyword">return</span> s1.name!=s2.name?s1.name&lt;s2.name:s1.time&lt;s2.time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">const</span> Recode &amp;s,<span class="keyword">int</span> <span class="keyword">const</span> *cost, <span class="keyword">double</span> a_day)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> total=<span class="number">0</span>;</div><div class="line">    total+=cost[s.hour]*s.minute;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.hour;i++)</div><div class="line">        total+=<span class="number">60</span>*cost[i];</div><div class="line">    <span class="keyword">return</span> (total+s.day*a_day)/<span class="number">100.0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cost[<span class="number">24</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cost[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="built_in">vector</span>&lt;Recode&gt; input(N);<span class="comment">//必须先预先分配足够的空间</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;input[i].name;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:%d:%d:%d"</span>,&amp;input[i].month,&amp;input[i].day,&amp;input[i].hour,&amp;input[i].minute);</div><div class="line">        input[i].time=input[i].day*<span class="number">24</span>*<span class="number">60</span>+input[i].hour*<span class="number">60</span>+input[i].minute;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;input[i].status;</div><div class="line">    &#125;</div><div class="line">    sort(input.begin(),input.end(),compare);</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">vector</span>&lt;Recode&gt;&gt; res;</div><div class="line">    <span class="built_in">vector</span>&lt;Recode&gt;::iterator it=input.begin()+<span class="number">1</span>,pre_it=input.begin();</div><div class="line">    <span class="keyword">while</span>(it!=input.end())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(pre_it-&gt;name==it-&gt;name&amp;&amp;pre_it-&gt;status==<span class="string">"on-line"</span>&amp;&amp;it-&gt;status==<span class="string">"off-line"</span>)</div><div class="line">        &#123;</div><div class="line">            res[it-&gt;name].push_back(*pre_it);</div><div class="line">            res[it-&gt;name].push_back(*it);</div><div class="line">        &#125;</div><div class="line">        it++;</div><div class="line">        pre_it++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> a_day=<span class="number">0</span>;<span class="comment">//一天的消费</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++)</div><div class="line">    &#123;</div><div class="line">        a_day+=cost[i]*<span class="number">60</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e:res)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;Recode&gt; tmp=e.second;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;e.first;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %02d\n"</span>,tmp[<span class="number">0</span>].month);</div><div class="line">        <span class="keyword">double</span> total=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.size();i+=<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d %02d:%02d:%02d "</span>,tmp[i].day,tmp[i].hour,tmp[i].minute,tmp[i+<span class="number">1</span>].day,tmp[i+<span class="number">1</span>].hour,tmp[i+<span class="number">1</span>].minute);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,tmp[i+<span class="number">1</span>].time-tmp[i].time);</div><div class="line">            <span class="keyword">double</span> co=calculate(tmp[i+<span class="number">1</span>],cost,a_day)-calculate(tmp[i],cost,a_day);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"$%.2f\n"</span>,co);</div><div class="line">            total+=co;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Total amount: $%.2f\n"</span>,total);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1017-排序-队列"><a href="#1017-排序-队列" class="headerlink" title="1017[排序+队列]"></a>1017[排序+队列]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1017" target="_blank" rel="noopener">Queueing at Bank</a></p>
<p>思路：</p>
<p>​    <strong>本题是对现实的模拟。首先，先对所有人按到达时间进行排序（和往常一样，时间全部弄成秒）。对每个窗口，要记录其结束时间，这是为了确定黄线外队伍第一个人到哪个窗口进行排队。每当进入排队时，窗口结束时间就增加；如果来的时间晚于窗口结束时间，说明不需要等待，直接服务，窗口结束时间就是来的时间+服务时间。题目要求的是等待时间，不算服务时间的！！！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Customer</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> arrive;<span class="comment">//到达时间</span></div><div class="line">    <span class="keyword">int</span> take;<span class="comment">//服务所需时间</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Customer&amp; s1,<span class="keyword">const</span> Customer &amp;s2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> s1.arrive&lt;s2.arrive;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,K;<span class="comment">//N个顾客,K个窗口</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;K);</div><div class="line">    <span class="built_in">vector</span>&lt;Customer&gt; c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> hh,mm,ss,tt;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:%d:%d %d"</span>,&amp;hh,&amp;mm,&amp;ss,&amp;tt);</div><div class="line">        <span class="keyword">int</span> s=hh*<span class="number">3600</span>+mm*<span class="number">60</span>+ss;</div><div class="line">        <span class="keyword">if</span>(s&gt;<span class="number">61200</span>)<span class="comment">//5点之后来的不被服务</span></div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        Customer tmp;</div><div class="line">        tmp.arrive=s;</div><div class="line">        tmp.take=tt*<span class="number">60</span>;</div><div class="line">        c.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(c.size()==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0.0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> window[K]=&#123;<span class="number">28800</span>&#125;;<span class="comment">//每个窗口的结束时间 fuck，这个只初始化第一个元素。！！！！！！</span></div><div class="line">    fill(window,window+K,<span class="number">28800</span>);</div><div class="line">    sort(c.begin(),c.end(),cmp);</div><div class="line">    <span class="keyword">double</span> total_time=<span class="number">0.0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index=<span class="number">0</span>;index&lt;c.size();++index)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> fast=window[<span class="number">0</span>],point=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;K;++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(window[i]&lt;fast)</div><div class="line">            &#123;</div><div class="line">                fast=window[i];</div><div class="line">                point=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      <span class="comment">//point指向最快的那个窗口</span></div><div class="line">        <span class="keyword">if</span>(window[point]&lt;=c[index].arrive)<span class="comment">//窗口结束时间早于顾客来,不用等待</span></div><div class="line">        &#123;</div><div class="line">            window[point]=c[index].arrive+c[index].take;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            total_time+=(window[point]-c[index].arrive);<span class="comment">//需要等待</span></div><div class="line">            window[point]+=c[index].take;<span class="comment">//窗口结束时间增加</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f"</span>,total_time/<span class="number">60.0</span>/c.size());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1018-Dijkstra-DFS"><a href="#1018-Dijkstra-DFS" class="headerlink" title="1018[Dijkstra+DFS]"></a>1018[Dijkstra+DFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1018" target="_blank" rel="noopener">Public Bike Management</a></p>
<p>思路：</p>
<p>​    <strong>首先进行Dijkstra算法求最短路径，在进行的过程中记录每个结点最近的前驱结点，距离一样就都记录下来。然后进行DFS，从终点开始，边递归边记录路径，到达起点之时，从起点开始沿着路径计算需要带过去多少自行车，带回来多少，然后进行全局变量值更新即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> G[<span class="number">510</span>][<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> dist[<span class="number">510</span>];</div><div class="line"><span class="keyword">bool</span> visit[<span class="number">510</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> current_capacity[<span class="number">510</span>];</div><div class="line"><span class="keyword">int</span> min_take=inf,min_back=inf;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path,tmp_path;</div><div class="line"><span class="keyword">int</span> C,N,Sp,M;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;C,&amp;N,&amp;Sp,&amp;M);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+(<span class="number">500</span>+<span class="number">10</span>)*(<span class="number">500</span>+<span class="number">10</span>),inf);</div><div class="line">    fill(dist,dist+<span class="number">510</span>,inf);</div><div class="line">    fill(visit,visit+<span class="number">510</span>, <span class="literal">false</span>);</div><div class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;current_capacity[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> u,v,cost;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;cost);</div><div class="line">        G[u][v]=cost;</div><div class="line">        G[v][u]=cost;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*dijkstra*/</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_dist=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visit[j]&amp;&amp;dist[j]&lt;min_dist)</div><div class="line">            &#123;</div><div class="line">                u=j;</div><div class="line">                min_dist=dist[j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visit[u]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;=N;++v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visit[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dist[u]+G[u][v]&lt;dist[v])</div><div class="line">                &#123;</div><div class="line">                    dist[v]=dist[u]+G[u][v];</div><div class="line">                    pre[v].clear();</div><div class="line">                    pre[v].push_back(u);<span class="comment">//记录前一个结点</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dist[u]+G[u][v]==dist[v])</div><div class="line">                &#123;</div><div class="line">                    pre[v].push_back(u);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    DFS(Sp);<span class="comment">//从终点倒着DFS</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d 0"</span>,min_take);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=path.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-&gt;%d"</span>,path[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">" %d"</span>,min_back);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">&#123;<span class="comment">//tmp_path[0]是终点，DFS的过程是从终点到起点。。</span></div><div class="line">    tmp_path.push_back(v);</div><div class="line">    <span class="keyword">if</span>(v==<span class="number">0</span>)</div><div class="line">    &#123;<span class="comment">//从起点到终点进行统计</span></div><div class="line">        <span class="keyword">int</span> take=<span class="number">0</span>,back=<span class="number">0</span>;<span class="comment">//带来几辆车，带回几辆车？</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=tmp_path.size()<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">        &#123;<span class="comment">//从离起点最近的点开始</span></div><div class="line">            <span class="keyword">int</span> id=tmp_path[i];</div><div class="line">            <span class="keyword">if</span>(current_capacity[id]&gt;C/<span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                back+=(current_capacity[id]-C/<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(current_capacity[id]&lt;C/<span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> odd=C/<span class="number">2</span>-current_capacity[id];<span class="comment">//缺几辆车?</span></div><div class="line">                <span class="keyword">if</span>(back&lt;odd)</div><div class="line">                &#123;</div><div class="line">                    take+=odd-back;</div><div class="line">                    back=<span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    back-=odd;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(take&lt;min_take)</div><div class="line">        &#123;</div><div class="line">            min_take=take;</div><div class="line">            min_back=back;</div><div class="line">            path=tmp_path;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(min_take==take&amp;&amp;back&lt;min_back)</div><div class="line">        &#123;</div><div class="line">            min_back=back;</div><div class="line">            path=tmp_path;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pre[v].size();++i)</div><div class="line">        &#123;</div><div class="line">            DFS(pre[v][i]);<span class="comment">//v的前驱结点全部递归</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    tmp_path.pop_back();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1019-进制转换-回文数"><a href="#1019-进制转换-回文数" class="headerlink" title="1019[进制转换+回文数]"></a>1019[进制转换+回文数]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1019" target="_blank" rel="noopener">General Palindromic Number</a></p>
<p>思路：</p>
<p>​    <strong>直接进制转换，然后对数组遍历即可。这里实现还是比较繁琐，最好用string，可以reverse之后看是否相等，就避免自己写判断，少写一点bug就越少啊。。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;b);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">if</span>(N==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Yes\n0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(N!=<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        res.push_back(N%b);</div><div class="line">        N/=b;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it1=res.begin(),it2=res.end()<span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> flag=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(it1&lt;it2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(*(it1++)!=*(it2--))</div><div class="line">        &#123;</div><div class="line">            flag=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=res.size()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1020-已知两个遍历序列求另一个"><a href="#1020-已知两个遍历序列求另一个" class="headerlink" title="1020[已知两个遍历序列求另一个]"></a>1020[已知两个遍历序列求另一个]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1020" target="_blank" rel="noopener">Tree Traversals</a></p>
<p>思路：</p>
<p>​    <strong>给了后序和中序，可以根据它们重建二叉树，在<a href="http://www.prime666.com/2017/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/">数据结构复习</a>一文中已经总结过。但是，当我傻傻的重新建立二叉树再遍历之后，才知道，原来可以不用建立树直接得出结果！too young too simple</strong></p>
<p>笨办法：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/7.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/*特殊用例 111*/</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    Node *left= <span class="literal">nullptr</span>;</div><div class="line">    Node *right= <span class="literal">nullptr</span>;</div><div class="line">    Node(<span class="keyword">int</span> v)</div><div class="line">    &#123;</div><div class="line">        value=v;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">Node *<span class="title">Build_tree</span><span class="params">(<span class="keyword">int</span> *in_order,<span class="keyword">int</span> *post_order,<span class="keyword">int</span> length)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">int</span> post_order[N],in_order[N];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post_order[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in_order[i]);</div><div class="line">    Node *root=Build_tree(in_order,post_order,N);</div><div class="line">    <span class="comment">/*if(root)</span></div><div class="line">        printf("%d",root-&gt;value);*/</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">queue</span>;</div><div class="line">    Node *p=root;</div><div class="line">    <span class="built_in">queue</span>.push_back(*p);</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        *p=<span class="built_in">queue</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(p-&gt;left)</div><div class="line">            <span class="built_in">queue</span>.push_back(*p-&gt;left);</div><div class="line">        <span class="keyword">if</span>(p-&gt;right)</div><div class="line">            <span class="built_in">queue</span>.push_back(*p-&gt;right);</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">queue</span>.size()==<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">queue</span>[<span class="number">0</span>].value);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">queue</span>.pop_front();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">Build_tree</span><span class="params">(<span class="keyword">int</span> in_order[],<span class="keyword">int</span> post_order[],<span class="keyword">int</span> length)</span><span class="comment">//length代表中序序列长度</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(length&lt;=<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">    Node *root=<span class="keyword">new</span> Node(post_order[length<span class="number">-1</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(in_order[i]==post_order[length<span class="number">-1</span>])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> left_length=i,right_length=length-i<span class="number">-1</span>;</div><div class="line">            root-&gt;left=Build_tree(in_order,post_order,left_length);</div><div class="line">            root-&gt;right=Build_tree(in_order+left_length+<span class="number">1</span>,post_order+left_length,right_length);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>机智法：</p>
<p><strong>首先先看已知后序和中序求先序：就和已经总结的二叉树知识一样，就是分割序列！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/15.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> post[] = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">int</span> in[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</div><div class="line"><span class="keyword">int</span> pre[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;<span class="comment">//root是后序遍历的下标，代表根节点。start和end代表中序序列的边界。</span></div><div class="line">    <span class="keyword">if</span>(start&gt;end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> i=start;</div><div class="line">    <span class="keyword">while</span>(i&lt;end&amp;&amp;post[root]!=in[i])</div><div class="line">        i++;<span class="comment">//i是中序序列中根的下标</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;in[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    preorder(root-(end-i+<span class="number">1</span>),start,i<span class="number">-1</span>);</div><div class="line">    preorder(root<span class="number">-1</span>,i+<span class="number">1</span>,end);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(start&gt;end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> i=start;</div><div class="line">    <span class="keyword">while</span>(i&lt;end&amp;&amp;in[i]!=pre[root]) ++i;</div><div class="line">    postorder(root+<span class="number">1</span>,start,i<span class="number">-1</span>);</div><div class="line">    postorder(root+(i-start)+<span class="number">1</span>,i+<span class="number">1</span>,end);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;in[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//preorder(5,0,5);</span></div><div class="line">    postorder(<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>下面就是本题了，只需要简单添加一个数组level和一个变量index，数组一开始初始化-1，然后在上述求中序序列的过程中，index表示当前根节点的下标（从1开始，在level中记录），最后从头到尾遍历level数组，把非-1的值输出即可！——其实就是用线性结构存二叉树。<code>2*index</code>表示左孩子 ，<code>2*index+1</code>表示右孩子，同样，这里也有线性结构保存二叉树的通病，level必须很大！！！</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/15.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> post[<span class="number">30</span>];</div><div class="line"><span class="keyword">int</span> in[<span class="number">30</span>];</div><div class="line"><span class="keyword">int</span> level[<span class="number">10000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> index)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(start&gt;end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> i=start;</div><div class="line">    <span class="keyword">while</span>(i&lt;end&amp;&amp;post[root]!=in[i]) i++;</div><div class="line">    level[index]=post[root];</div><div class="line">    pre_order(root-(end-i+<span class="number">1</span>),start,i<span class="number">-1</span>,<span class="number">2</span>*index);</div><div class="line">    pre_order(root<span class="number">-1</span>,i+<span class="number">1</span>,end,<span class="number">2</span>*index+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fill(level,level+<span class="number">10000</span>,<span class="number">-1</span>);</div><div class="line">    <span class="keyword">int</span> N;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;post[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</div><div class="line">    pre_order(N<span class="number">-1</span>,<span class="number">0</span>,N<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,level[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">10000</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(count==N)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(level[i]!=<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,level[i]);</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算是一种奇淫技巧吧~</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[语法陷阱]]></title>
      <url>https://www.prime666.com/2017/06/10/%E8%AF%AD%E6%B3%95%E9%99%B7%E9%98%B1/</url>
      <content type="html"><![CDATA[<p>在刷PAT的过程中发现，由于不常用c/c++，以及python和java的习惯，导致对c++风格代码细节的遗忘，特此总结。</p>
<a id="more"></a>
<h1 id="语法陷阱"><a href="#语法陷阱" class="headerlink" title="语法陷阱"></a>语法陷阱</h1><h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>c++11提供的范围for循环本质上要求序列能有<code>begin</code>和<code>end</code>成员，也就是可以迭代的。所以<code>set</code>、<code>map</code>也是可以的。</p>
<h2 id="cin的读取"><a href="#cin的读取" class="headerlink" title="cin的读取"></a>cin的读取</h2><p>看下面的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> G[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j&gt;&gt;G[i][j];</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>&lt;&lt;G[i][j];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看着似乎没什么问题，但是运行就崩溃。</p>
<p>这种输入是不可以的，必须先赋值好再使用。</p>
<h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memset</span> <span class="params">( <span class="keyword">void</span> * ptr, <span class="keyword">int</span> value, <span class="keyword">size_t</span> num )</span></span>;</div></pre></td></tr></table></figure>
<p>Sets the first <em>num</em> bytes of the block of memory pointed by <em>ptr</em> to the specified <em>value</em> (interpreted as an <code>unsigned char</code>).</p>
<p>由于是以<strong>字节</strong>为单位进行批量赋值，所以效率极高。其本身是对char类型使用的，因为char是一个字节。如果用于其它的比如int，只能填充0和-1，因为它们的补码分别是00000000 11111111</p>
<p>但是注意上面那一段英文，一般只有清零的时候才用这个函数，否则用下面的 。</p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> ForwardIterator, <span class="keyword">class</span> T&gt;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">fill</span> <span class="params">(ForwardIterator first, ForwardIterator last, <span class="keyword">const</span> T&amp; val)</span></span>;</div></pre></td></tr></table></figure>
<p>Assigns val to all the elements in the range <code>[first,last)</code>.</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder3</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="built_in">stack</span>.push_back(*root);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node *t=&amp;<span class="built_in">stack</span>.back();</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;t-&gt;val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        <span class="built_in">stack</span>.pop_back();</div><div class="line">        <span class="keyword">if</span>(t-&gt;right)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t-&gt;right);</div><div class="line">        <span class="keyword">if</span>(t-&gt;left)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t-&gt;left);</div><div class="line">        <span class="comment">/*先右孩子进栈，再左孩子进栈，才能满足先序。*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表面上，这里实现了先序遍历。实际不对！</p>
<p><strong>注意，当执行完右孩子分支后，栈中新加入了t的右孩子，此时t不再指向原来的最后一个，而是现在的最后一个即t的右孩子！换成stack也一样。原因在于它们都是返回的引用！！！所以，这里正确的方法是不用指针，如下：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder3</span><span class="params">(Node*root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(root== <span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">deque</span>&lt;Node&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="built_in">stack</span>.push_back(*root);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        Node t=<span class="built_in">stack</span>.back();</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;t.val&lt;&lt;<span class="string">" "</span>;</div><div class="line">        <span class="built_in">stack</span>.pop_back();</div><div class="line">        <span class="keyword">if</span>(t.right)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t.right);</div><div class="line">        <span class="keyword">if</span>(t.left)</div><div class="line">            <span class="built_in">stack</span>.push_back(*t.left);</div><div class="line">        <span class="comment">/*先右孩子进栈，再左孩子进栈，才能满足先序。*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，<em>老实说deque完全可以替代queue和stack两个函数适配器啊</em>。</p>
<h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p>永远记住，多留一个位置给<code>\0</code>。也许在本机上没区别，oj不这么认为！</p>
<h2 id="流加速"><a href="#流加速" class="headerlink" title="流加速"></a>流加速</h2><p>默认<code>cin</code>多做了以下两个额外的工作：</p>
<ul>
<li>与 <code>std::cout</code> 绑定，每次 <code>std::cin</code> 从缓冲区读入内容之前，确保已经执行过 <code>std::cout.flush()</code>；</li>
<li>与 <code>stdio</code> 同步（synchronize），确保混搭使用 C 风格的 I/O 操作不会引发问题。</li>
</ul>
<p>以下代码可以解决这些问题。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="comment">//可以通过tie(0)（0表示NULL）来解除cin与cout的绑定，进一步加快执行效率。</span></div><div class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//这个函数是一个“是否兼容stdio”的开关，C++为了兼容C，保证程序在使用了std::printf和std::cout的时候不发生混乱，将输出流绑到了一起。</span></div></pre></td></tr></table></figure>
<h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *lhs, <span class="keyword">const</span> <span class="keyword">char</span> *rhs )</span></span>;</div></pre></td></tr></table></figure>
<p>以字典序比较两个以<code>&#39;\0&#39;</code>结尾的字符串，如果第一个大于第二个返回正数，小于则返回负数，否则返回0。</p>
<p><em>为什么我记成了返回1表示大于，返回-1表示小于？/(ㄒoㄒ)/~~</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* lhs, <span class="keyword">const</span> <span class="keyword">char</span>* rhs, <span class="keyword">size_t</span> count )</span></span>;</div></pre></td></tr></table></figure>
<p>这个和上面的几乎一样，除了<code>count</code>表示最多比较多少个字符。</p>
<h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h2><p>以vector为例，原型如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>::<span class="function">push_back</span></div><div class="line"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">( <span class="keyword">const</span> T&amp; value )</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">( T&amp;&amp; value )</span></span>;</div></pre></td></tr></table></figure>
<p>第一个函数是添加一个新元素，<strong>其是value的拷贝</strong>。第二个是移动操作 ，属于c++11引入的，其是直接移动到新元素的位置。第二种算法题几乎用不到。。</p>
<h2 id="连"><a href="#连" class="headerlink" title="连=="></a>连==</h2><p>c++不能用连续<code>==</code>判断，但是可以用连续<code>=</code>赋值（非定义初始化时）。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,c;<span class="comment">//不能定义的时候直接a=b=c=5</span></div><div class="line">    a=b=c=<span class="number">5</span>;</div><div class="line">    <span class="keyword">if</span>(a==b==c)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;(a==b);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例如上面的程序，可以看到<code>a==b</code>结果是1，所以不会和c相等的。如果把c改成1就输出<code>YES</code>了。</p>
<h2 id="头文件cctype中工具函数"><a href="#头文件cctype中工具函数" class="headerlink" title="头文件cctype中工具函数"></a>头文件cctype中工具函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">toupper</span><span class="params">( <span class="keyword">int</span> ch )</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tolower</span><span class="params">( <span class="keyword">int</span> ch )</span></span>;</div></pre></td></tr></table></figure>
<p>这两个转换函数用的时候不必判断，直接用，如果不是可以转换的字符，就会原样返回。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">islower</span><span class="params">( <span class="keyword">int</span> ch )</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isupper</span><span class="params">( <span class="keyword">int</span> ch )</span></span>;</div></pre></td></tr></table></figure>
<p>返回非0表示满足，0表示不是。</p>
<h2 id="string-substr"><a href="#string-substr" class="headerlink" title="string.substr"></a>string.substr</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">basic_string <span class="title">substr</span><span class="params">( size_type pos = <span class="number">0</span>,size_type count = npos )</span> <span class="keyword">const</span></span>;</div></pre></td></tr></table></figure>
<p>很常用的求子串的函数。返回子串<code>[pos, pos+count)</code>，第二个参数省略的话，直接返回<code>[pos,size())</code></p>
<h2 id="map的插入"><a href="#map的插入" class="headerlink" title="map的插入"></a>map的插入</h2><p>习惯上，都是直接用<code>[]</code>运算符执行插入操作，不知在java里习惯了<code>put</code>还是怎么着，我每次用的时候都先用<code>find</code>判断是不是有这个值，其实完全多此一举。即使对应的值不存在，c++会建立一个新的键值对，且<strong>值进行默认初始化（类调用其默认构造函数，数字初始化0）</strong>！</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; s;</div><div class="line">    s[<span class="string">"hehe"</span>]=<span class="number">1</span>;</div><div class="line">    s[<span class="string">"a"</span>]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;e:s)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;e.first&lt;&lt;<span class="string">" "</span>&lt;&lt;e.second&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上两个输出都是1</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> BidirIt &gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">( BidirIt first, BidirIt last )</span></span>;</div></pre></td></tr></table></figure>
<p>在<code>algorithm</code>头文件中有很多好的工具函数，比如上面的翻转。它是原地翻转，参数要求是双向迭代器即可。<strong>不过记得越界检查！</strong></p>
<h2 id="自定义比较函数"><a href="#自定义比较函数" class="headerlink" title="自定义比较函数"></a>自定义比较函数</h2><p>写自定义比较函数时只需要定义&gt;或&lt;即可，不满足就返回false。不要啥都考虑。<strong>另外，不要用&gt;=这类，不大于也不小于就是等于喽（尤其是set等的find函数，就是根据不等定义的等于）。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Defined in header &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> RandomIt &gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stable_sort</span><span class="params">( RandomIt first, RandomIt last )</span></span>;</div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> RandomIt, <span class="keyword">class</span> Compare &gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stable_sort</span><span class="params">( RandomIt first, RandomIt last, Compare comp )</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Defined in header &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> RandomIt &gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">( RandomIt first, RandomIt last )</span></span>;</div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> RandomIt, <span class="keyword">class</span> Compare &gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">( RandomIt first, RandomIt last, Compare comp )</span></span>;</div><div class="line"><span class="comment">/*comp:</span></div><div class="line">returns true if the first argument is less than (i.e. is ordered before) the second. </div><div class="line">The signature of the comparison function should be equivalent to the following:</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Type1 &amp;a, <span class="keyword">const</span> Type2 &amp;b)</span></span>;</div></pre></td></tr></table></figure>
<h2 id="二分查找（要求有序）"><a href="#二分查找（要求有序）" class="headerlink" title="二分查找（要求有序）"></a>二分查找（要求有序）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Defined in header &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T &gt;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value )</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare &gt;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">binary_search</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value, Compare comp )</span></span>;</div></pre></td></tr></table></figure>
<p>在[first,last)内查找是否有元素等于value</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Defined in header &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T &gt;</div><div class="line"><span class="function">ForwardIt <span class="title">lower_bound</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value )</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare &gt;</div><div class="line"><span class="function">ForwardIt <span class="title">lower_bound</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value, Compare comp )</span></span>;</div></pre></td></tr></table></figure>
<p>在[first,last)范围内找一个<strong>大于等于</strong>value的元素，找到就返回迭代器，否则返回last</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Defined in header &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T &gt;</div><div class="line"><span class="function">ForwardIt <span class="title">upper_bound</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value )</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare &gt;</div><div class="line"><span class="function">ForwardIt <span class="title">upper_bound</span><span class="params">( ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value, Compare comp )</span></span>;</div></pre></td></tr></table></figure>
<p>在[first,last)范围内找第一个<strong>大于</strong>value的元素，找到就返回其迭代器，否则返回last</p>
<h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><p><del>按理说，不应该在pat这种算法题里用oop的，但是，偶尔有些题用一下显得思路清晰。</del></p>
<p>简单说，<strong>左值</strong>指的是既能够出现在等号左边也能出现在等号右边的变量(或表达式)，<strong>右值</strong>指的则是只能出现在等号右边的变量(或表达式)。也就是说，左值就是在程序中能够寻值的东西，右值就是没法取到它的地址的东西。</p>
<p>右值有两个特性：</p>
<ol>
<li>可以调用成员函数。</li>
<li>只能被const引用。</li>
</ol>
<p>所以，在pat 1088中，输出运算符重载时，遇到了问题，详情移步。</p>
<h2 id="getline和getchar"><a href="#getline和getchar" class="headerlink" title="getline和getchar"></a>getline和getchar</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> CharT, <span class="keyword">class</span> Traits, <span class="keyword">class</span> Allocator &gt;</div><div class="line">  <span class="built_in">std</span>::basic_istream&lt;CharT,Traits&gt;&amp; getline( <span class="built_in">std</span>::basic_istream&lt;CharT,Traits&gt;&amp;&amp; input,</div><div class="line">                                           <span class="built_in">std</span>::basic_string&lt;CharT,Traits,Allocator&gt;&amp; str,</div><div class="line">                                           CharT delim );</div><div class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> CharT, <span class="keyword">class</span> Traits, <span class="keyword">class</span> Allocator &gt;</div><div class="line"><span class="built_in">std</span>::basic_istream&lt;CharT,Traits&gt;&amp; getline( <span class="built_in">std</span>::basic_istream&lt;CharT,Traits&gt;&amp;&amp; input,</div><div class="line">                                           <span class="built_in">std</span>::basic_string&lt;CharT,Traits,Allocator&gt;&amp; str );</div></pre></td></tr></table></figure>
<p>函数的功能就是从输入流input里读取数据，放到字符串str里，默认分隔符是<code>\n</code>。其每执行一次，首先会把str先清空再写入。<strong>遇到分隔符时，它会把它从输入流中拿出来但是不会追加进str里</strong>。使用时需要<strong>注意</strong>，可能下一个字符正好是<code>\n</code>，所以，可以先用<code>getchar()</code>读取掉换行符。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">()</span></span>;<span class="comment">//从标准输入流中读取字符</span></div></pre></td></tr></table></figure>
<h2 id="sscanf和sprintf"><a href="#sscanf和sprintf" class="headerlink" title="sscanf和sprintf"></a>sscanf和sprintf</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* buffer, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</div><div class="line"><span class="comment">//Reads the data from null-terminated character string buffer and stores the results into given locations.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">( <span class="keyword">char</span>* buffer, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</div><div class="line"><span class="comment">//Loads the data from the given locations, converts them to character string equivalents and writes the results to a character string buffer.</span></div></pre></td></tr></table></figure>
<h2 id="格式化输出-d和-f"><a href="#格式化输出-d和-f" class="headerlink" title="格式化输出%d和%f"></a>格式化输出%d和%f</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//    freopen("test.in","w",stdout);</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %.0f %.0f %.0f"</span>,(<span class="keyword">int</span>)<span class="number">1.5</span>,<span class="number">1.5</span>,<span class="number">4.5</span>,round(<span class="number">4.5</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一个是强制类型转换，默认截断小数部分（不能直接用%d输出浮点数！），而第二个表面看指定小数不输出，实则比较复杂！建议<strong>四舍五入一定用round！</strong></p>
<p>上述程序输出<code>1 2 4 5</code></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pat（一）]]></title>
      <url>https://www.prime666.com/2017/06/09/pat%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>pat甲级做题笔记：1001——1010</p>
<a id="more"></a>
<h1 id="pat（一）"><a href="#pat（一）" class="headerlink" title="pat（一）"></a>pat（一）</h1><h2 id="1001-找规律"><a href="#1001-找规律" class="headerlink" title="1001[找规律]"></a>1001[找规律]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1001" target="_blank" rel="noopener">A+B Format </a></p>
<p>思路：<strong>字符串处理</strong></p>
<p><strong>如果可以得到<code>(i+1)%3==len%3</code>就输出一个<code>,</code>，利用这种公式就很简单了。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/9.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">    a+=b;</div><div class="line">    <span class="built_in">string</span> out=to_string(a);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;out.size();++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,out[i]);</div><div class="line">        <span class="keyword">if</span>(out[i]==<span class="string">'-'</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">3</span>==out.size()%<span class="number">3</span>&amp;&amp;i!=out.size()<span class="number">-1</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1002-多项式求和"><a href="#1002-多项式求和" class="headerlink" title="1002[多项式求和]"></a>1002[多项式求和]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1002" target="_blank" rel="noopener">A+B for Polynomials</a></p>
<p><strong>思路：直接用两个数组保存，下标表示指数，元素代表系数。累加即可。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> input[<span class="number">1001</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> k1,k2;</div><div class="line">    <span class="keyword">float</span> coefficient;</div><div class="line">    <span class="keyword">int</span> exponent;</div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(input,<span class="number">0</span>, <span class="keyword">sizeof</span>(input));</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k1);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k1;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>,&amp;exponent,&amp;coefficient);</div><div class="line">        input[exponent]=coefficient;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k2;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>,&amp;exponent,&amp;coefficient);</div><div class="line">        input[exponent]+=coefficient;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e:input)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(e!=<span class="number">0</span>)</div><div class="line">            total++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,total);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1000</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(total==<span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(input[i]!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,input[i]);</div><div class="line">            total--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1003-Dijkstra"><a href="#1003-Dijkstra" class="headerlink" title="1003[Dijkstra]"></a>1003[Dijkstra]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1003" target="_blank" rel="noopener">Emergency</a></p>
<p>思路：这道题要求最短路径有几条，同时还要求经过节点的权值尽可能大。用Dijkstra算法即可，只不过再附加一点特殊的处理。</p>
<p><strong>本道题很经典，需要多看看，包括定义的数据保存的数据等等。特别注意，松弛那一块必须是else if。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/9.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M,C1,C2;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;C1&gt;&gt;C2;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">99999999</span>;</div><div class="line">    <span class="keyword">int</span> G[N][N];</div><div class="line">    <span class="keyword">int</span> rescue[N];</div><div class="line">    <span class="keyword">int</span> dist[N];</div><div class="line">    <span class="keyword">bool</span> visited[N];</div><div class="line">    <span class="keyword">int</span> path_count[N];<span class="comment">//到每个结点的最短路径条数</span></div><div class="line">    <span class="keyword">int</span> rescue_total[N];<span class="comment">//到每个结点的救援队总数</span></div><div class="line"></div><div class="line">    fill(visited,visited+N, <span class="literal">false</span>);</div><div class="line">    fill(G[<span class="number">0</span>],G[<span class="number">0</span>]+N*N,inf);</div><div class="line">    fill(dist,dist+N,inf);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;rescue[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,u,v;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;G[u][v];</div><div class="line">        G[v][u]=G[u][v];</div><div class="line">    &#125;</div><div class="line">    dist[C1]=<span class="number">0</span>;<span class="comment">//起点</span></div><div class="line">    rescue_total[C1]=rescue[C1];</div><div class="line">    path_count[C1]=<span class="number">1</span>;<span class="comment">//初始化到起点的路径就1条</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> min_d=inf,u=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[j]&amp;&amp;dist[j]&lt;min_d)</div><div class="line">            &#123;</div><div class="line">                min_d=dist[j];</div><div class="line">                u=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(u==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        visited[u]=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;N;++v)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!visited[v]&amp;&amp;G[u][v]!=inf)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(G[u][v]+dist[u]&lt;dist[v])</div><div class="line">                &#123;</div><div class="line">                    dist[v]=G[u][v]+dist[u];</div><div class="line"></div><div class="line">                    path_count[v]=path_count[u];</div><div class="line">                    rescue_total[v]=rescue[v]+rescue_total[u];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[u][v]+dist[u]==dist[v])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(rescue[v]+rescue_total[u]&gt;rescue_total[v])</div><div class="line">                    &#123;</div><div class="line">                        rescue_total[v]=rescue[v]+rescue_total[u];</div><div class="line">                    &#125;</div><div class="line">                    path_count[v]=path_count[u]+path_count[v];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;path_count[C2]&lt;&lt;<span class="string">" "</span>&lt;&lt;rescue_total[C2];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1004-树的遍历DFS-BFS"><a href="#1004-树的遍历DFS-BFS" class="headerlink" title="1004[树的遍历DFS/BFS]"></a>1004[树的遍历DFS/BFS]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1004" target="_blank" rel="noopener"> Counting Leaves</a></p>
<p>简单说来，题目要求输入所有的父节点和其孩子节点，求这棵树每一层有几个叶子节点。</p>
<p>思路：DFS或者BFS</p>
<p><strong>注意这里的DFS，之所以求最大深度，是因为要在输出的时候用于确定输出的结果 范围。很经典的DFS，边界条件也很美观，值得好好学习。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/1.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100</span>];<span class="comment">//tree[i]存储编号为i的结点的孩子们的编号</span></div><div class="line"><span class="keyword">int</span> res[<span class="number">100</span>];<span class="comment">//某一层的叶子节点数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> depth)</span></span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> total_depth=<span class="number">-1</span>;<span class="comment">//最多有几层？从1开始</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;m ; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id,k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;id,&amp;k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> tmp;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</div><div class="line">            tree[id].push_back(tmp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//以上是输入，不必看</span></div><div class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;total_depth; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,res[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[total_depth]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> depth)</span></span></div><div class="line">&#123;<span class="comment">//index表示结点编号,经典的dfs</span></div><div class="line">    <span class="keyword">if</span>(tree[index].size()==<span class="number">0</span>)</div><div class="line">    &#123;<span class="comment">//如果没有孩子，那么这一层叶子结点数+1</span></div><div class="line">        res[depth]++;</div><div class="line">        total_depth=max(total_depth,depth);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;<span class="comment">//有孩子就递归调用</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;tree[index].size(); ++j) &#123;</div><div class="line">            dfs(tree[index][j],depth+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>至于BFS就简单一些了，或者说更容易想到吧。最早期的代码是用-1这个特殊值作为层与层的分割，但是还是打表更方便，即level数组。注意更新total_depth为了最后的输出。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/9/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> level[<span class="number">100</span>];<span class="comment">//打表记录每个id所在层数</span></div><div class="line"><span class="keyword">int</span> res[<span class="number">100</span>];<span class="comment">//记录每一层的叶子结点个数</span></div><div class="line"><span class="keyword">int</span> total_depth=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> N,M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> id,k,child_id;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;++j)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;child_id);</div><div class="line">            tree[id].push_back(child_id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    q.push_back(<span class="number">1</span>);</div><div class="line">    level[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!q.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> t=q[<span class="number">0</span>];</div><div class="line">        q.pop_front();</div><div class="line">        total_depth=max(level[t],total_depth);<span class="comment">//更新最大深度为了后面输出！且位置必须在这里，不然如就一层就错误了。</span></div><div class="line">        <span class="keyword">if</span>(tree[t].size()==<span class="number">0</span>)</div><div class="line">            res[level[t]]++;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;child:tree[t])</div><div class="line">            &#123;</div><div class="line">                q.push_back(child);</div><div class="line">                level[child]=level[t]+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=total_depth;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</div><div class="line">        <span class="keyword">if</span>(i!=total_depth)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1005-简单字符串处理"><a href="#1005-简单字符串处理" class="headerlink" title="1005[简单字符串处理]"></a>1005[简单字符串处理]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1005" target="_blank" rel="noopener">Spell It Right</a></p>
<p>题目要求：输入一个非负整数，求出各位和，用英语输出结果。</p>
<p>思路：读取时不要把它当整数了，直接<strong>读取一个字符串</strong>，这样更好求和。然后打个表，根据值是多少输出即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> s[<span class="number">10</span>] = &#123;<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>&#125;;</div><div class="line">    <span class="built_in">string</span> input;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;input;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;input.length(); ++i)</div><div class="line">    &#123;</div><div class="line">        sum+=input[i]-<span class="string">'0'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; output;</div><div class="line">    <span class="keyword">while</span>(sum&gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        output.push_back(sum%<span class="number">10</span>);</div><div class="line">        sum/=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(output.size()&gt;<span class="number">0</span>)</div><div class="line">    &#123;<span class="comment">//特殊情况判断</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = output.size()<span class="number">-1</span>; j&gt;<span class="number">0</span> ; --j)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;s[output[j]]&lt;&lt;<span class="string">" "</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;s[output[<span class="number">0</span>]];</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;s[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1006-简单比较"><a href="#1006-简单比较" class="headerlink" title="1006[简单比较]"></a>1006[简单比较]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1006" target="_blank" rel="noopener">Sign In and Sign Out </a></p>
<p>题目要求:找出最早和最晚的人。</p>
<p>思路：可以直接利用string的已经重载过的比较运算符，求出最早最晚即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;m;</div><div class="line">    <span class="built_in">string</span> first_in_id,last_out_id,first=<span class="string">"24:00:00"</span>,last=<span class="string">"00:00:00"</span>;</div><div class="line">    <span class="built_in">string</span> id,in,out;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;m; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;in&gt;&gt;out;</div><div class="line">        <span class="keyword">if</span>(in&lt;first)</div><div class="line">        &#123;</div><div class="line">            first_in_id=id;</div><div class="line">            first=in;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(out&gt;last)</div><div class="line">        &#123;</div><div class="line">            last_out_id=id;</div><div class="line">            last=out;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;first_in_id&lt;&lt;<span class="string">" "</span>&lt;&lt;last_out_id;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1007-DP"><a href="#1007-DP" class="headerlink" title="1007[DP]"></a>1007[DP]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1007" target="_blank" rel="noopener">Maximum Subsequence Sum</a></p>
<p>题目要求：经典DP问题，就不废话了。</p>
<p>思路：这道题我原本正常思路是根据以下递推公式。<code>b[j]</code>就是表示以<code>a[j]</code>结尾的最大连续和。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b[j]=max(a[i]+b[j<span class="number">-1</span>],a[j]);</div></pre></td></tr></table></figure>
<p>这个公司表达的意思倒是很清楚，但是翻译到程序上，我一开始就直接定义了个数组b[j]，然后为了记录下标，又弄了个数组<code>c[j]</code>表示以<code>a[j]</code>结尾的最大和的起始下标（结束下标就是j）。然后各种不能通过，后来发现是<strong>数组循环的时候没有能更新到初始值，也就是边界没弄好</strong>。<strong>其实，根本用不到这么麻烦，因为这里b数组的值只用了一次，也就是说，就要最大的就好了，就不必用一个数组记录全部了，用一个变量就好了啊。同理，c数组也是。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/3.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">int</span> a[n];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n ; ++i) &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> max_sum=<span class="number">-1</span>,left=<span class="number">0</span>,right=<span class="number">0</span>,tmp=<span class="number">0</span>,tmp_left=<span class="number">0</span>;<span class="comment">//tmp临时最大和，tmp_left临时起点下标</span></div><div class="line">    <span class="keyword">bool</span> all_negative= <span class="literal">true</span>;<span class="comment">//全是负数时特殊处理</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="number">0</span>)</div><div class="line">            all_negative= <span class="literal">false</span>;</div><div class="line">        tmp+=a[i];</div><div class="line">        <span class="keyword">if</span>(tmp&gt;max_sum)</div><div class="line">        &#123;<span class="comment">//及时更新</span></div><div class="line">            max_sum=tmp;</div><div class="line">            left=tmp_left;</div><div class="line">            right=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;=<span class="number">0</span>)</div><div class="line">        &#123;<span class="comment">/*只要不为负数，就默认加a[j]，也就是说，只要大于0，说明前面的还是对后续结果有贡献的*/</span></div><div class="line">            tmp=<span class="number">0</span>;</div><div class="line">            tmp_left=i+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//注意本题的输出，一开始理解错了</span></div><div class="line">    <span class="keyword">if</span>(all_negative)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;a[n<span class="number">-1</span>];</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;max_sum&lt;&lt;<span class="string">" "</span>&lt;&lt;a[left]&lt;&lt;<span class="string">" "</span>&lt;&lt;a[right];</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1008-模拟"><a href="#1008-模拟" class="headerlink" title="1008[模拟]"></a>1008[模拟]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1008" target="_blank" rel="noopener">Elevator</a></p>
<p>思路：模拟一下电梯即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,now=<span class="number">0</span>,in;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;   <span class="built_in">cin</span>&gt;&gt;in;</div><div class="line">        <span class="keyword">if</span>(in&gt;now)</div><div class="line">            sum+=<span class="number">6</span>*(in-now);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            sum+=<span class="number">4</span>*(now-in);</div><div class="line">        now=in;</div><div class="line">        sum+=<span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;sum;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1009-多项式乘积"><a href="#1009-多项式乘积" class="headerlink" title="1009[多项式乘积]"></a>1009[多项式乘积]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1009" target="_blank" rel="noopener">Product of Polynomials</a></p>
<p>题目要求：对1002的拓展，让求多项式的乘积了。</p>
<p><strong>思路：还是用数组。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/4.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> k1,k2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k1);</div><div class="line">    <span class="keyword">float</span> ans[<span class="number">2001</span>],input[<span class="number">1001</span>];<span class="comment">//ans数组要足够大，毕竟1000项*1000项最多需要二倍空间保存。</span></div><div class="line">    <span class="keyword">int</span> exponent;<span class="comment">//指数</span></div><div class="line">    <span class="keyword">float</span> coefficient;<span class="comment">//系数</span></div><div class="line">    <span class="keyword">int</span> total=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">    <span class="built_in">memset</span>(input,<span class="number">0</span>, <span class="keyword">sizeof</span>(input));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k1;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>,&amp;exponent,&amp;coefficient);</div><div class="line">        input[exponent]=coefficient;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k2;++i)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %f"</span>,&amp;exponent,&amp;coefficient);</div><div class="line">        <span class="keyword">if</span>(coefficient!=<span class="number">0</span>)</div><div class="line">        &#123;<span class="comment">//核心代码 </span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1000</span>;j++)</div><div class="line">            &#123;<span class="comment">//每当输入一项，就和上面的多项式每一项相乘，把结果加入ans数组</span></div><div class="line">                ans[j+exponent]+=input[j]*coefficient;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2000</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)</div><div class="line">            total++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,total);<span class="comment">//统计有几项</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2000</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(total==<span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,ans[i]);</div><div class="line">            total--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1010-进制转换-字符串处理"><a href="#1010-进制转换-字符串处理" class="headerlink" title="1010[进制转换+字符串处理]"></a>1010[进制转换+字符串处理]</h2><p><a href="https://www.patest.cn/contests/pat-a-practise/1010" target="_blank" rel="noopener">Radix</a></p>
<p>题目要求：进制转化，输入两个整数，求是否能找出一个基数使得在该进制下两个数相等。</p>
<p>思路：<strong>字符串处理，标准的按部就班，分函数处理。注意，此题二分法曾经卡了好几个月，由于我没考虑一点，就是溢出！！！</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @author prime on 2017/6/5.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;number,<span class="keyword">long</span> <span class="keyword">long</span> radix)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="built_in">string</span> &amp; input)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarysearch</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">const</span> <span class="built_in">string</span> &amp;b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">const</span> <span class="built_in">string</span> &amp; b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_largest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; b)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">string</span> n1,n2;</div><div class="line">    <span class="keyword">int</span> tag,radix;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;n2;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;tag,&amp;radix);</div><div class="line">    process(n1);</div><div class="line">    process(n2);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a;</div><div class="line">    <span class="built_in">string</span> b;</div><div class="line">    <span class="keyword">if</span>(tag==<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        a=sum(n1,radix);</div><div class="line">        b=n2;</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        a=sum(n2,radix);</div><div class="line">        b=n1;</div><div class="line">    &#125;</div><div class="line">    binarysearch(a,b);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarysearch</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">const</span> <span class="built_in">string</span> &amp; b)</span></span></div><div class="line">&#123;<span class="comment">//二分法</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> low=find_largest(b),mid,tmp;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> high=max(low,a)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low&lt;=high)</div><div class="line">    &#123;</div><div class="line">        mid=(low+high)/<span class="number">2</span>;</div><div class="line">        tmp=sum(b,mid);</div><div class="line">        <span class="keyword">if</span>(tmp&lt;<span class="number">0</span>)</div><div class="line">        &#123;<span class="comment">//溢出了，，及其重要！！！</span></div><div class="line">            high=mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(tmp&lt;a)</div><div class="line">        &#123;</div><div class="line">            low=mid+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp&gt;a)</div><div class="line">        &#123;</div><div class="line">            high=mid<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld"</span>,mid);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Impossible"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">const</span> <span class="built_in">string</span> &amp; b)</span></span></div><div class="line">&#123;<span class="comment">//暴力搜索</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">-1</span>,r=find_largest(b);</div><div class="line">    <span class="keyword">while</span>(tmp!=a)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(tmp&gt;a)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        tmp=sum(b,r);</div><div class="line">        r++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,r<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;number,<span class="keyword">long</span> <span class="keyword">long</span> radix)</span></span></div><div class="line">&#123;<span class="comment">//给定数字和基数求其值</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> bit=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i=number.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">    &#123;</div><div class="line">        res+=<span class="built_in">pow</span>(<span class="keyword">double</span>(radix),<span class="keyword">double</span>(bit))*number[i];</div><div class="line">        bit++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="built_in">string</span> &amp; input)</span></span></div><div class="line">&#123;<span class="comment">//对输入的字符串进行预处理</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i =input.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(input[i]&gt;=<span class="string">'0'</span>&amp;&amp;input[i]&lt;=<span class="string">'9'</span>)</div><div class="line">        &#123;</div><div class="line">            input[i]-=<span class="string">'0'</span>;</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            input[i]=input[i]-<span class="string">'a'</span>+(<span class="keyword">char</span>)<span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_largest</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; b)</span></span></div><div class="line">&#123;<span class="comment">//找出最小进制</span></div><div class="line">    <span class="keyword">int</span> largest=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it=b.cbegin();it!=b.cend();it++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(*it&gt;largest)</div><div class="line">            largest=*it;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> largest+<span class="number">1</span>;<span class="comment">//最大数为largest，最小进制为largest+1.比如110，进制最小是2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的字符驱动]]></title>
      <url>https://www.prime666.com/2017/06/08/%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E9%A9%B1%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p>一个简单的字符驱动，以及内核驱动有关的基础知识总结。</p>
<a id="more"></a>
<h1 id="字符驱动"><a href="#字符驱动" class="headerlink" title="字符驱动"></a>字符驱动</h1><h2 id="理论概述"><a href="#理论概述" class="headerlink" title="理论概述"></a>理论概述</h2><p>设备驱动程序（Device Driver）简称“驱动程序”，是一种可以使计算机和设备通信的特殊程序，可以说相当于硬件的接口。操作系统通过这个接口，才能控制硬件设备的工作。</p>
<ul>
<li>系统调用是<strong>操作系统内核</strong>和<strong>应用程序</strong>之间的接口。</li>
<li>设备驱动程序是<strong>操作系统内核</strong>和<strong>机器硬件</strong>之间的接口。</li>
<li>设备驱动程序作为内核模块<strong>动态加载</strong>。</li>
<li>设备驱动程序为应用程序<strong>屏蔽了硬件的细节。</strong><ul>
<li>在应用程序看来，硬件设备只是一个设备文件， 应用程序可以象操作普通文件一样对硬件设备进行操作。</li>
<li>从用户角度出发，用户希望能使用同样的应用程序接口和命令来访问设备和普通文件。</li>
</ul>
</li>
</ul>
<font color="C0FF3E">Linux抽象了对硬件的处理，所有的硬件设备都可以作为普通文件来看待；它们可以使用和操作文件相同的、标准的系统调用接口来完成打开、关闭、读写和I/O控制操作，而<strong>驱动程序的主要任务也就是要实现这些系统调用</strong>。（<strong>设备即文件</strong>）</font>

<h2 id="设备驱动程序的功能"><a href="#设备驱动程序的功能" class="headerlink" title="设备驱动程序的功能"></a>设备驱动程序的功能</h2><ul>
<li>对设备初始化和释放；</li>
<li>把数据从内核传送到硬件和从硬件读取数据；</li>
<li><em>读取</em>应用程序传送给设备文件的数据和<em>回送</em>应用程序请求的数据；</li>
<li>检测和处理设备出现的错误；</li>
</ul>
<h2 id="Linux设备分类"><a href="#Linux设备分类" class="headerlink" title="Linux设备分类"></a>Linux设备分类</h2><ol>
<li>字符设备<ul>
<li>字符设备以<strong>单个字节</strong>为单位进行顺序读写操作，通常不使用缓冲技术。典型的字符设备包括鼠标、键盘、串行口等。</li>
<li>字符设备驱动通常至少实现open、close、read和write等系统调用。</li>
<li>与普通文件的区别主要在于大部分字符设备只能<strong>顺序访问</strong>数据通道。</li>
</ul>
</li>
<li>块设备<ul>
<li>块设备是以固定大小的数据块进行存储和读写的设备，例如硬盘、软盘、CD-ROM等。</li>
<li>为提高效率，对于块设备，系统利用一块系统内存作为缓冲区，为块设备的读写提供了缓存机制，由于涉及缓冲区管理、调度和同步等问题，块设备实现起来比字符设备复杂得多。</li>
<li>块驱动程序，除了给内核提供和字符驱动一样的接口外，还提供了专门面向块设备的接口，块设备的接口必须支持挂载文件系统。</li>
</ul>
</li>
<li>网络设备<ul>
<li>Linux的网络系统主要是基于BSD UNIX的Socket机制。</li>
<li>在系统和驱动程序之间有专门的数据结构（sk_buff）进行数据的传递，负责发送和接收数据包。</li>
<li>系统支持对发送数据和接收数据的缓存，提供流量控制机制，提供对多协议的支持。</li>
</ul>
</li>
</ol>
<h2 id="Linux字符设备驱动原理"><a href="#Linux字符设备驱动原理" class="headerlink" title="Linux字符设备驱动原理"></a>Linux字符设备驱动原理</h2><h3 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h3><p>首先需要明确：<font color="FF00FF">用户进程运行在用户空间，设备驱动程序工作在内核空间</font>。</p>
<ul>
<li>系统调用是用户进程进入内核空间的唯一通道。</li>
<li>每当用户进程使用系统调用时，都自动地将运行模式从用户级转为内核级，此时进程在内核的地址空间中运行。</li>
<li>Linux抽象了对硬件的处理，各种设备都以文件的形式存放在/dev目录下，称为设备文件。</li>
<li>所有的硬件设备都可以作为普通文件来看待，应用程序可以打开、关闭和读写这些设备文件，完成对设备的操作，就像操作普通的数据文件一样。（设备及文件的思想）</li>
<li>驱动程序是直接驱动硬件设备的程序，因此，在驱动程序开发中，需要对开发的设备硬件非常熟悉，通常是对硬件设备的寄存器设置来完成，这些需要查看相关芯片手册。</li>
</ul>
<p>一图以蔽之~~~</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//Linux/%E5%9B%BE%E7%89%871.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="设备号与注册"><a href="#设备号与注册" class="headerlink" title="设备号与注册"></a>设备号与注册</h3><p>嵌入式Linux系统通过设备号来区分不同设备。设备号分为<strong>主设备号</strong>和<strong>次设备号</strong>两种。</p>
<p>内核通过<strong>主设备号将设备与相应的驱动程序对应起来，主设备号的取值范围是0～255</strong>；而当一个驱动程序要控制若干个设备时，就要用次设备号来区分它们。</p>
<p>对自定义的产品设备，用户需定义设备的主设备号，注意，自定义设备的主设备号不能与已存在的主设备号冲突。通过位于文件系统/dev目录下的设备文件，可查看每个设备的名称、主从设备号及文件属性等信息。</p>
<p>例如，输入<code>ls -l /dev</code>命令，即可查看文件设备号。在我的机器上，部分截图如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//Linux/2017-06-08_213400.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>也可以用<code>cat /proc/devices</code>查看,同时它也可以查看程序申请到的设备名，设备号（如果没有说明程序有BUG）。</p>
<p>而创建一个设备号有以下两种方式：</p>
<ol>
<li>静态指定</li>
<li>由系统动态分配</li>
</ol>
<p><strong>当然，不管是哪种方法获取设备号，都需要在/dev目录下用mknod命令建立相应设备的设备标识（mknod filename type major minor）。</strong>其实，也可以由程序创建设备文件，详情移步于<a href="http://blog.csdn.net/zqixiao_09/article/details/50849735" target="_blank" rel="noopener">此篇博客</a>。</p>
<p>在linux内核中，用<code>dev_t</code>类型表示设备号，在2.6内核中定义为无符号长整型，定义如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> u_long <span class="keyword">dev_t</span></div></pre></td></tr></table></figure>
<p>其中，<code>u_long</code>在32位上4字节(<strong>高12位表示主设备号，低20位表示次设备号。</strong>)，在64位机上是8字节。</p>
<p>预定义的宏:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MAJOR(<span class="keyword">dev_t</span> dev)取主设备号</div><div class="line">MINOR(<span class="keyword">dev_t</span> dev)取次设备号</div><div class="line">MKDEV(<span class="keyword">int</span> ma,<span class="keyword">int</span> mi)将主次设备号转换为设备号类型<span class="keyword">dev_t</span></div></pre></td></tr></table></figure>
<p>都是通过移位实现的，其实并不复杂。</p>
<p>具体方法位于<code>linux/fs.h</code>头文件中：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> first,<span class="keyword">unsigned</span> <span class="keyword">int</span> count,<span class="keyword">char</span> *name)</span></span>; </div><div class="line"><span class="comment">//first是分配的起始值，count是请求的连续设备编号的个数，name是设备的名字</span></div><div class="line"><span class="comment">//成功时返回0，失败返回负值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">alloc_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> *dev,<span class="keyword">unsigned</span> <span class="keyword">int</span> baseminor,<span class="keyword">unsigned</span> <span class="keyword">int</span> count,<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</div><div class="line"><span class="comment">//dev作为输出参数，baseminor表示第一个次设备号，通常设为0，count与name同上。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unregister_chrdev_region</span><span class="params">(<span class="keyword">dev_t</span> from,<span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;</div><div class="line"><span class="comment">//from表示要释放的设备号，count表示释放的个数</span></div></pre></td></tr></table></figure>
<h3 id="cdev结构体"><a href="#cdev结构体" class="headerlink" title="cdev结构体"></a>cdev结构体</h3><p>cdev结构体用于描述字符设备，该结构体是所有字符设备的抽象。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span>  </span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> cdev &#123;   </div><div class="line">    <span class="keyword">struct</span> kobject kobj;                  <span class="comment">//内嵌的内核对象.驱动开发人员一般不使用它</span></div><div class="line">    <span class="keyword">struct</span> <span class="keyword">module</span> *owner;                 <span class="comment">//该字符设备所在的内核模块的对象指针.</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> file_operations *ops;    <span class="comment">//该结构描述了字符设备所能实现的方法，是极为关键的一个结构体.  </span></div><div class="line">    <span class="keyword">struct</span> list_head <span class="built_in">list</span>;                <span class="comment">//用来将已经向内核注册的所有字符设备形成链表.  </span></div><div class="line">    <span class="keyword">dev_t</span> dev;                            <span class="comment">//字符设备的设备号，由主设备号和次设备号构成.  </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;                   <span class="comment">//隶属于同一主设备号的次设备号的个数.  </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>owner成员的存在体现了驱动程序与内核模块间的亲密关系，struct module是内核对于一个模块的抽象，该成员在字符设备中可以体现该设备隶属于哪个模块，在驱动程序的编写中一般由用户显式的初始化<code>.owner = THIS_MODULE</code></p>
<p>申请一个cdev结构，分配内存：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> cdev *<span class="title">cdev_alloc</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<p>申请完需要手动初始化ops。</p>
<p>初始化cdev结构体的方法：这个函数相当于上面的函数+手动初始化ops</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *, <span class="keyword">const</span> <span class="keyword">struct</span> file_operations *)</span></span>;</div><div class="line"><span class="comment">//该函数主要对struct cdev结构体做初始化，最重要的就是建立cdev 和 file_operations之间的连接</span></div></pre></td></tr></table></figure>
<p>通知内核设备以及可以使用了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cdev_add</span><span class="params">(<span class="keyword">struct</span> cdev *p, <span class="keyword">dev_t</span> dev, <span class="keyword">unsigned</span> count)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>该函数向内核注册一个struct cdev结构</strong>，即正式通知内核由struct cdev *p代表的字符设备已经可以使用了。</p>
<p>当然这里还需提供两个参数：第一个设备号 dev，和该设备关联的设备编号的数量。</p>
<p>通知内核设备已经被删除:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void cdev_del(struct cdev *p)；</div></pre></td></tr></table></figure>
<h3 id="file结构体"><a href="#file结构体" class="headerlink" title="file结构体"></a>file结构体</h3><p> 在设备驱动中，这也是个非常重要的数据结构，必须要注意一点，这里的file与用户空间程序中的FILE指针是不同的，用户空间FILE是定义在C库中，从来不会出现在内核中。而struct file，却是内核当中的数据结构，因此，它也不会出现在用户层程序中。</p>
 <font color="00FFFF">file结构体指示一个<strong>已经打开的文件（设备对应于设备文件）</strong>，其实系统中的每个打开的文件在内核空间都有一个相应的struct file结构体，它<strong>由内核在打开文件时创建，并传递给在文件上进行操作的任何函数，直至文件被关闭。如果文件被关闭，内核就会释放相应的数据结构。</strong></font><br> 在内核源码中，struct file要么表示为file，或者为filp(意指“file pointer”), 注意区分一点，file指的是struct file本身，而filp是指向这个结构体的指针。<br><br>几个重要成员如下:<br><br><em> loff_t f_pos<br><br>  <strong>当前读写文件的位置</strong>。为64位。如果想知道当前文件当前位置在哪，驱动可以读取这个值而不会改变其位置。<strong>对read,write来说，当其接收到一个loff_t型指针作为其最后一个参数时，他们的读写操作便更新文件指针的位置，而不需要直接执行filp -&gt;f_pos操作。而llseek方法的目的就是用于改变文件的位置。</strong>

</em> struct file_operations <em>f_op<br><br>  与文件相关的各种操作。当文件需要迅速进行各种操作时，内核分配这个指针作为它实现文件打开，读，写等功能的一部分。filp-&gt;f_op 其值从未被内核保存作为下次的引用，即你可以改变与文件相关的各种操作，这种方式效率非常高。

</em> void <em>private_data<br><br>  在驱动调用open方法之前，open系统调用设置此指针为NULL值。你可以很自由的将其做为你自己需要的一些数据域或者不管它，如，你可以将其指向一个分配好的数据，但是你必须记得在file struct被内核销毁之前在release方法中释放这些数据的内存空间。private_data用于在系统调用期间保存各种状态信息是非常有用的。

</em> unsigned int f_flags<br><br>  文件标志，如O_RDONLY, O_NONBLOCK以及O_SYNC。在驱动中还可以检查O_NONBLOCK标志查看是否有非阻塞请求。其它的标志较少使用。特别地注意的是，读写权限的检查是使用f_mode而不是f_flog。所有的标量定义在头文件<code>linux/fctnl.h</code>中。<br><br><em> mode_t f_mode<br><br>  此文件模式通过FMODE_READ, FMODE_WRITE识别了文件为可读的，可写的，或者是二者。在open或ioctl函数中可能需要检查此域以确认文件的读/写权限，你不必直接去检测读或写权限，因为在进行octl等操作时内核本身就需要对其权限进行检测。<br><br>### inode结构体<br><br>VFS inode 包含文件访问权限、属主、组、大小、生成时间、访问时间、最后修改时间等信息。它是Linux 管理文件系统的最基本单位，也是文件系统连接任何子目录、文件的桥梁。<br><br>​       <font color="DB7093"><strong>内核使用inode结构体在内核内部表示一个文件</strong>。因此，它与表示一个已经打开的文件描述符的结构体(即file 文件结构)是不同的，我们可以使用多个file 文件结构表示同一个文件的多个文件描述符，但此时，所有的这些file文件结构全部都<em>*必须只能指向一个inode结构体</em></font></em>。

<p>inode结构体包含了一大堆文件相关的信息，但是就针对驱动代码来说，我们只要关心其中的两个域即可：</p>
<ul>
<li><p><code>dev_t i_rdev</code>表示设备文件的结点，这个域实际上包含了设备号。</p>
</li>
<li><p><code>struct cdev *i_cdev</code></p>
<p>struct cdev是内核的一个内部结构，它是用来表示字符设备的，当inode结点指向一个字符设备文件时，此域为一个指向cdev结构的指针。</p>
</li>
</ul>
<h3 id="chardevs数组"><a href="#chardevs数组" class="headerlink" title="chardevs数组"></a>chardevs数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> char_device_struct &#123;  </div><div class="line">    <span class="keyword">struct</span> char_device_struct *next; <span class="comment">// 结构体指针  </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> major;              <span class="comment">// 主设备号  </span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> baseminor;          <span class="comment">// 次设备起始号  </span></div><div class="line">    <span class="keyword">int</span> minorct;                     <span class="comment">// 次备号个数  </span></div><div class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];  </div><div class="line">    <span class="keyword">struct</span> cdev *cdev; <span class="comment">/* will die */</span>  </div><div class="line">&#125; *chrdevs[CHRDEV_MAJOR_HASH_SIZE];      <span class="comment">// 只能挂255个字符主设备</span></div></pre></td></tr></table></figure>
<p>可以看到全局数组 chrdevs 包含了255(CHRDEV_MAJOR_HASH_SIZE 的值)个 struct char_device_struct的元素，每一个对应一个相应的主设备号。</p>
<p>​       <strong>如果分配了一个设备号,就会创建一个 struct char_device_struct 的对象,并将其添加到 chrdevs 中；这样,通过chrdevs数组,我们就可以知道分配了哪些设备号。</strong></p>
<h3 id="file-operations结构体"><a href="#file-operations结构体" class="headerlink" title="file_operations结构体"></a>file_operations结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> file_operations &#123;   </div><div class="line">  </div><div class="line">    <span class="keyword">struct</span> <span class="keyword">module</span> *owner;<span class="comment">//拥有该结构的模块的指针，一般为THIS_MODULES   </span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">loff_t</span> (*llseek) (<span class="keyword">struct</span> file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);<span class="comment">//用来修改文件当前的读写位置   </span></div><div class="line">  </div><div class="line">    <span class="keyword">ssize_t</span> (*read) (<span class="keyword">struct</span> file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);<span class="comment">//从设备中同步读取数据   </span></div><div class="line">  </div><div class="line">    <span class="keyword">ssize_t</span> (*write) (<span class="keyword">struct</span> file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);<span class="comment">//向设备发送数据  </span></div><div class="line">  </div><div class="line">    <span class="keyword">ssize_t</span> (*aio_read) (<span class="keyword">struct</span> kiocb *, <span class="keyword">const</span> <span class="keyword">struct</span> iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);<span class="comment">//初始化一个异步的读取操作   </span></div><div class="line">  </div><div class="line">    <span class="keyword">ssize_t</span> (*aio_write) (<span class="keyword">struct</span> kiocb *, <span class="keyword">const</span> <span class="keyword">struct</span> iovec *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">loff_t</span>);<span class="comment">//初始化一个异步的写入操作   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*readdir) (<span class="keyword">struct</span> file *, <span class="keyword">void</span> *, <span class="keyword">filldir_t</span>);<span class="comment">//仅用于读取目录，对于设备文件，该字段为NULL   </span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(<span class="keyword">struct</span> file *, <span class="keyword">struct</span> poll_table_struct *)</span></span>; <span class="comment">//轮询函数，判断目前是否可以进行非阻塞的读写或写入   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*ioctl) (<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>); <span class="comment">//执行设备I/O控制命令   </span></div><div class="line">  </div><div class="line">    <span class="keyword">long</span> (*unlocked_ioctl) (<span class="keyword">struct</span> file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>); <span class="comment">//不使用BLK文件系统，将使用此种函数指针代替ioctl   </span></div><div class="line">  </div><div class="line"> <span class="comment">//因为在kernel 2.6.36 中已经完全删除了ioctl 函数指针，取而代之的是unlocked_ioctl，注意后者没有inode参数！ </span></div><div class="line">    <span class="keyword">long</span> (*compat_ioctl) (<span class="keyword">struct</span> file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>); <span class="comment">//在64位系统上，32位的ioctl调用将使用此函数指针代替   </span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*mmap) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> vm_area_struct *); <span class="comment">//用于请求将设备内存映射到进程地址空间  </span></div><div class="line">   </div><div class="line">    <span class="keyword">int</span> (*open) (<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *); <span class="comment">//打开   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*flush) (<span class="keyword">struct</span> file *, <span class="keyword">fl_owner_t</span> id);   </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*release) (<span class="keyword">struct</span> inode *, <span class="keyword">struct</span> file *); <span class="comment">//关闭   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*fsync) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> dentry *, <span class="keyword">int</span> datasync); <span class="comment">//刷新待处理的数据   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*aio_fsync) (<span class="keyword">struct</span> kiocb *, <span class="keyword">int</span> datasync); <span class="comment">//异步刷新待处理的数据   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, <span class="keyword">struct</span> file *, <span class="keyword">int</span>); <span class="comment">//通知设备FASYNC标志发生变化   </span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*lock) (<span class="keyword">struct</span> file *, <span class="keyword">int</span>, <span class="keyword">struct</span> file_lock *);   </div><div class="line">  </div><div class="line">    <span class="keyword">ssize_t</span> (*sendpage) (<span class="keyword">struct</span> file *, <span class="keyword">struct</span> page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);   </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(<span class="keyword">struct</span> file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;   </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);   </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*flock) (<span class="keyword">struct</span> file *, <span class="keyword">int</span>, <span class="keyword">struct</span> file_lock *);  </div><div class="line">   </div><div class="line">    <span class="keyword">ssize_t</span> (*splice_write)(<span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">struct</span> file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);  </div><div class="line">   </div><div class="line">    <span class="keyword">ssize_t</span> (*splice_read)(<span class="keyword">struct</span> file *, <span class="keyword">loff_t</span> *, <span class="keyword">struct</span> pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);   </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> (*setlease)(<span class="keyword">struct</span> file *, <span class="keyword">long</span>, <span class="keyword">struct</span> file_lock **);   </div><div class="line">  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> Linux使用file_operations结构访问驱动程序的函数，这个结构的每一个成员的名字都对应着一个系统调用。</p>
<p>用户进程利用在对设备文件进行诸如read/write操作的时候，<strong>系统调用通过设备文件的主设备号找到相应的设备驱动程序，然后读取这个数据结构相应的函数指针，接着把控制权交给该函数，这是Linux的设备驱动程序工作的基本原理。</strong></p>
<p>编写设备驱动程序的主要工作就是<strong>编写子函数，并填充file_operations的各个域。</strong></p>
<p>具体解释如下：</p>
<ol>
<li><p><code>struct module *owner</code></p>
<p>第一个 file_operations 成员根本不是一个操作，它是一个指向拥有这个结构的模块的指针。</p>
<p>这个成员用来在它的操作还在被使用时阻止模块被卸载. 几乎所有时间中, 它被简单初始化为 THIS_MODULE, 一个在<code>&lt;linux/module.h&gt;</code> 中定义的宏.这个宏比较复杂，在进行简单学习操作的时候，一般初始化为THIS_MODULE。</p>
</li>
<li><p><code>loff_t (*llseek) (struct file * filp , loff_t p, int orig);</code></p>
<p> (指针参数filp为进行读取信息的目标文件结构体指针；<strong>参数 p 为文件定位的目标偏移量</strong>；<strong>参数orig为对文件定位的起始地址</strong>，这个值可以为文件开头（SEEK_SET，0),当前位置(SEEK_CUR,1)，文件末尾(SEEK_END,2))</p>
<p><strong>llseek 方法用作改变文件中的当前读/写位置, 并且新位置作为(正的)返回值.</strong></p>
<p>loff_t 参数是一个”long offset”, 并且就算在 32位平台上也至少 64 位宽. 错误由一个负返回值指示；如果这个函数指针是 NULL, seek 调用会以潜在地无法预知的方式修改 file 结构中的位置计数器( 在”file 结构” 一节中描述).</p>
</li>
<li><p><code>ssize_t (*read) (struct file * filp, char __user * buffer, size_t size, loff_t * p);</code></p>
<p>  (指针参数 <strong>filp 为进行读取信息的目标文件</strong>，<strong>指针参数buffer 为对应放置信息的缓冲区（即用户空间内存地址）</strong>，参数<strong>size为要读取的信息长度</strong>，参数 <strong>p 为读的位置相对于文件开头的偏移</strong>，在读取信息后，这个指针一般都会移动，移动的值为要读取信息的长度值）</p>
<p><strong>这个函数用来从设备中获取数据</strong>。在这个位置的一个空指针导致 read 系统调用以 -EINVAL(“Invalid argument”) 失败。<strong>一个非负返回值代表了成功读取的字节数( 返回值是一个 “signed size” 类型, 常常是目标平台本地的整数类型).</strong></p>
</li>
<li><p><code>ssize_t (*write) (struct file * filp, const char __user *   buffer, size_t count, loff_t * ppos);</code></p>
<p>(参数<strong>filp为目标文件结构体指针</strong>，<strong>buffer为要写入文件的信息缓冲区</strong>，<strong>count为要写入信息的长度</strong>，<strong>ppos为当前相对于文件头的偏移位置，这个值通常是用来判断写文件是否越界</strong>）</p>
<p> <strong>发送数据给设备</strong>。如果 NULL, -EINVAL 返回给调用 write 系统调用的程序. <strong>如果非负, 返回值代表成功写的字节数。</strong></p>
<p> <strong>(注：这个操作和上面的对文件进行读的操作均为阻塞操作</strong>）</p>
</li>
<li><p><code>int (*ioctl) (struct inode *inode, struct file *filp, unsigned int cmd, unsigned long arg);</code></p>
<p> (inode 和 filp 指针是对应应用程序传递的文件描述符 fd 的值, 和传递给 open 方法的相同参数.<strong>cmd 参数从用户那里不改变地传下来</strong>, 并且可选的参数 arg 参数以一个 unsigned long 的形式传递, 不管它是否由用户给定为一个整数或一个指针.如果调用程序不传递第 3 个参数, 被驱动操作收到的 arg 值是无定义的.因为类型检查在这个额外参数上被关闭, 编译器不能警告你如果一个无效的参数被传递给 ioctl, 并且任何关联的错误将难以查找.）</p>
</li>
</ol>
<p>​         <strong>ioctl 系统调用提供了发出设备特定命令的方法</strong>(例如格式化软盘的一个磁道, 这不是读也不是写). 另外, 几个 ioctl 命令被内核识别而不必引用 fops 表.如果设备不提供 ioctl 方法, 对于任何未事先定义的请求(-ENOTTY, “设备无这样的 ioctl”), 系统调用返回一个错误.</p>
<ol>
<li><p><code>int (*mmap) (struct file *, struct vm_area_struct *);</code></p>
<p>mmap 用来请求将设备内存映射到进程的地址空间。 如果这个方法是 NULL, mmap 系统调用返回 -ENODEV.</p>
</li>
<li><p><code>int (*open) (struct inode * inode , struct file * filp ) ;</code></p>
<p>(<strong>inode 为文件节点,这个节点只有一个</strong>，无论用户打开多少个文件，都只是对应着一个inode结构；但是filp就不同，只要打开一个文件，就对应着一个file结构体，<strong>file结构体通常用来追踪文件在运行时的状态信息</strong>）</p>
<p>尽管这常常是对设备文件进行的第一个操作, 不要求驱动声明一个对应的方法. <strong>如果这个项是 NULL, 设备打开一直成功, 但是你的驱动不会得到通知.</strong>与open()函数对应的是release()函数。</p>
</li>
<li><p><code>int (*release) (struct inode *, struct file *);</code></p>
<p><strong>release ()函数当最后一个打开设备的用户进程执行close()系统调用的时候</strong>，内核将调用驱动程序release()函数：</p>
<p>release函数的主要任务是清理未结束的输入输出操作，释放资源，用户自定义排他标志的复位等。在文件结构被释放时引用这个操作. 如同 open, release 可以为 NULL.</p>
</li>
</ol>
<p><strong>file、file_operations和inode都在<code>linux/fs.h</code>头文件中定义。</strong></p>
<h2 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h2><p>以下是一个简单的字符驱动程序，在open时申请1024字节空间，在release时释放。可以对其读和写~</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE    1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_CLEAR   0x1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> mayuan_dev</div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> cdev cdev; <span class="comment">//表示字符设备的内核内的数据结构</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> *mem;</div><div class="line">	<span class="keyword">int</span> count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> mayuan_dev *devp; <span class="comment">//自定义结构的指针</span></div><div class="line"><span class="keyword">dev_t</span> devno; <span class="comment">//设备号的结构</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span></div><div class="line">&#123;</div><div class="line">	devp-&gt;count++;</div><div class="line">	<span class="keyword">if</span>(devp-&gt;count==<span class="number">1</span>)</div><div class="line">	&#123;</div><div class="line">		devp-&gt;mem=kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*MAX_SIZE,GFP_KERNEL);<span class="comment">//为字符缓冲区进行空间预分配</span></div><div class="line">		printk(KERN_INFO <span class="string">"Apply 1024 bytes of memory！\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		printk(KERN_INFO <span class="string">"after add 1,count=%d\n"</span>,devp-&gt;count);</div><div class="line">	&#125;</div><div class="line">	filp-&gt;private_data = devp;<span class="comment">//private_data是file结构的一个域</span></div><div class="line">	try_module_get(devp-&gt;cdev.owner);<span class="comment">//int try_module_get(struct module *module);用于增加模块的引用计数</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">my_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span></div><div class="line">&#123;</div><div class="line">	devp-&gt;count--;</div><div class="line">	<span class="keyword">if</span>(devp-&gt;count==<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		kfree(devp-&gt;mem);</div><div class="line">		printk(KERN_INFO <span class="string">"Recycle memory space!!!\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		printk(KERN_INFO <span class="string">"after subtract 1,count=%d\n"</span>,devp-&gt;count);</div><div class="line">	&#125;</div><div class="line">	module_put(devp-&gt;cdev.owner);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">my_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> mayuan_dev *dev = filp-&gt;private_data;</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (cmd)</div><div class="line">	&#123;</div><div class="line">	<span class="keyword">case</span> MEM_CLEAR:<span class="comment">//自定义了一个命令清除内存。</span></div><div class="line">		<span class="built_in">memset</span>(dev-&gt;mem, <span class="number">0</span>, MAX_SIZE);</div><div class="line">		printk(KERN_INFO <span class="string">"mayuan is set to zero\n"</span>);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">my_read</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> size, <span class="keyword">loff_t</span> *ppos)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> p = *ppos;<span class="comment">//读的位置相对于文件头的偏移</span></div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> count = size;<span class="comment">//读的大小</span></div><div class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> mayuan_dev *dev = filp-&gt;private_data;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (p &gt;= MAX_SIZE)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (count &gt; MAX_SIZE - p)</div><div class="line">		count = MAX_SIZE - p;</div><div class="line">		</div><div class="line">	<span class="keyword">if</span> (copy_to_user(buf, dev-&gt;mem + p, count))<span class="comment">//拷贝数据到用户空间，buf是用户空间缓冲区的指针</span></div><div class="line">		ret = -EINVAL;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		*ppos += count;<span class="comment">//拷贝完数据记得把ppos指针偏移指定字节</span></div><div class="line">		ret = count;</div><div class="line">		printk(KERN_INFO <span class="string">"read %u byte(s) from %lu\n"</span>, count, p);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">my_write</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> size,<span class="keyword">loff_t</span> *ppos)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> p = *ppos;</div><div class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> count = size;</div><div class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">	<span class="keyword">struct</span> mayuan_dev *dev = filp-&gt;private_data;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (p &gt;= MAX_SIZE)</div><div class="line">		<span class="keyword">return</span> -EINVAL;</div><div class="line">	<span class="keyword">if</span> (count &gt; MAX_SIZE - p)</div><div class="line">		count = MAX_SIZE - p;</div><div class="line">		</div><div class="line">	<span class="keyword">if</span> (copy_from_user(dev-&gt;mem + p, buf, count))</div><div class="line">		ret = -EINVAL;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		*ppos += count;<span class="comment">//和read一样记得偏移指针</span></div><div class="line">		ret = count;</div><div class="line">		printk(KERN_INFO <span class="string">"write %u byte(s) from %lu\n"</span>, count, p);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> loff_t <span class="title">my_llseek</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="keyword">loff_t</span> offset, <span class="keyword">int</span> orig)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">loff_t</span> ret = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> (orig)</div><div class="line">	&#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//文件开头</span></div><div class="line">          <span class="keyword">if</span> (offset &lt; <span class="number">0</span>)</div><div class="line">          &#123;</div><div class="line">              ret = -EINVAL;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (offset &gt; MAX_SIZE)</div><div class="line">          &#123;</div><div class="line">              ret = -EINVAL;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          filp-&gt;f_pos = offset;</div><div class="line">          ret = filp-&gt;f_pos;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//当前位置</span></div><div class="line">          <span class="keyword">if</span> ((filp-&gt;f_pos + offset) &lt; <span class="number">0</span> )</div><div class="line">          &#123;</div><div class="line">              ret = -EINVAL;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> ((filp-&gt;f_pos + offset) &gt; MAX_SIZE)</div><div class="line">          &#123;</div><div class="line">              ret = -EINVAL;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          filp-&gt;f_pos += offset;</div><div class="line">          ret = filp-&gt;f_pos;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line"></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">          ret = -EINVAL;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct</span> file_operations virtdev_fops =</div><div class="line">&#123;</div><div class="line">	.owner  =  THIS_MODULE,</div><div class="line">	.llseek =  my_llseek,</div><div class="line">	.read   =  my_read,</div><div class="line">	.write  =  my_write,</div><div class="line">	.unlocked_ioctl = my_ioctl,</div><div class="line">	.open   =  my_open,</div><div class="line">	.release = my_release,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">init_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> ret;</div><div class="line">	<span class="keyword">int</span> err;</div><div class="line">	</div><div class="line">	ret = alloc_chrdev_region(&amp;devno, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"mayuan"</span>);</div><div class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">		</div><div class="line">	devp = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> mayuan_dev), GFP_KERNEL);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!devp)</div><div class="line">	&#123;</div><div class="line">		ret = -ENOMEM;</div><div class="line">		<span class="keyword">goto</span> fail_malloc;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	cdev_init(&amp;devp-&gt;cdev, &amp;virtdev_fops);<span class="comment">//初始化cdev结构，参数分别是cdev结构的指针和file ops的指针</span></div><div class="line">	devp-&gt;cdev.owner = THIS_MODULE;</div><div class="line"></div><div class="line">	err = cdev_add(&amp;devp-&gt;cdev, devno, <span class="number">1</span>);<span class="comment">//注册，参数分别是cdev的指针、主设备号、关联数量</span></div><div class="line">	<span class="comment">//在驱动程序还没准备好处理设备上的操作时，不要调用！！！</span></div><div class="line">	<span class="keyword">if</span> (err)</div><div class="line">		printk(KERN_NOTICE <span class="string">"Error %d adding mayuan"</span>, err);</div><div class="line">	printk(KERN_INFO <span class="string">"Initialize mayuan 's device!"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	</div><div class="line">fail_malloc:</div><div class="line">	unregister_chrdev_region(devno, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	cdev_del(&amp;devp-&gt;cdev);<span class="comment">//注销</span></div><div class="line">	kfree(devp);</div><div class="line">	unregister_chrdev_region(devno, <span class="number">1</span>);<span class="comment">//释放设备号</span></div><div class="line">	printk(KERN_INFO <span class="string">"exit mayuan 's device!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(init_my_module);</div><div class="line">module_exit(exit_my_module);</div><div class="line"></div><div class="line">MODULE_AUTHOR(<span class="string">"mayuan"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"A poor program by mayuan."</span>);</div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div></pre></td></tr></table></figure>
<p>PS：上面的程序我都用了<code>private_data</code>来保存我自定义的结构<code>mayuan_dev</code>，其实不需要这个也完全可以。直接用全局定义的<code>devp</code>。</p>
<h2 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h2><p>上述示例中，用到了一些其他知识点，补充如下O(∩_∩)O</p>
<ol>
<li><p>模块引用计数问题</p>
<p>2.4内核中，模块自身通过<code>MOD_INC_USE_COUNT, MOD_DEC_USE_COUNT</code>宏来管理自己被使用的计数。2.6内核提供了更健壮、灵活的模块计数管理接口<code>try_module_get(&amp;module)</code>, <code>module_put(&amp;module)</code>取代2.4中的模块使用计数管理宏。</p>
<p>其函数原型为</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">try_module_get</span><span class="params">(<span class="keyword">struct</span> <span class="keyword">module</span> *<span class="keyword">module</span>)</span></span>; 用于增加模块使用计数；若返回为<span class="number">0</span>，表示调用失败，希望使用的模块没有被加载或正在被卸载中。</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">module_put</span><span class="params">(<span class="keyword">struct</span> <span class="keyword">module</span> *<span class="keyword">module</span>)</span></span>; 减少模块使用计数。</div></pre></td></tr></table></figure>
<p>从设备使用的角度出发，当需要打开、开始使用某个设备时，使用<code>try_module_get(dev-&gt;owner)</code>去增加管理此设备的owner模块的使用计数；当关闭、不再使用此设备时，使用<code>module_put(dev-&gt;owner)</code>减少对管理此设备的owner模块的使用 计数。<strong>这样，当设备在使用时，管理此设备的模块就不能被卸载；只有设备不再使用时模块才能被卸载。(其中，dev是cdev类型)</strong></p>
</li>
<li><p><code>copy_to_user和copy_from_user</code></p>
<p>它们在头文件<code>&lt;asm/uaccess.h&gt;</code>中,由于内核空间与用户空间的内存不能直接互访，因此借助函数<code>copy_to_user()</code>内核空间到用户空间的复制完成，函数<code>copy_from_user()</code>完成用户空间到内核空间的复制。二者都是失败返回没有被拷贝的字节数，成功返回0。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="title">copy_to_user</span><span class="params">(<span class="keyword">void</span> __user *to, <span class="keyword">const</span> <span class="keyword">void</span> *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span>  <span class="title">copy_from_user</span><span class="params">(<span class="keyword">void</span> *to, <span class="keyword">const</span> <span class="keyword">void</span> __user *from, <span class="keyword">unsigned</span> <span class="keyword">long</span> n)</span></span></div></pre></td></tr></table></figure>
<p>二者参数相同：</p>
<p>to——Destination address, in kernel space.</p>
<p>from——Source address, in user space.</p>
<p>n——Number of bytes to copy.</p>
<p>注意，<strong>两个函数都有可能休眠</strong>。成功返回0，失败返回失败数目。</p>
</li>
<li><p>内存分配</p>
<p><code>kmalloc</code>：在物理内存中分配一个连续的空间，数据不会被清空。头文件<code>&lt;linux/slab.h&gt;</code>。函数原型如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">int</span> flags)</span></span></div></pre></td></tr></table></figure>
<p>标志位有很多：最常用的是<code>GFP_KERNEL</code>。</p>
<p>进程上下文，可以睡眠 <code>GFP_KERNEL</code><br>进程上下文，不可以睡眠 <code>GFP_ATOMIC</code></p>
<p>特别说明的是，<code>malloc</code>是c中的一个函数，其在堆中分配内存，十分灵活。但是<code>kmalloc</code>不同，Linux分配一系列大小不同的内存池，分配内存时，就将足够大的内存池传给<code>kmalloc</code>，预分配的内存池大小有32B、64B、128B……128KB。所以，如果不足32字节也会给你这么大的空间。</p>
<p><code>vmalloc</code>：用来分配虚拟地址连续但是物理地址不连续的内存。常用来申请较大的内存。头文件<code>mm/vmalloc.h</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">vmalloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> size)</span></span></div></pre></td></tr></table></figure>
<p><code>vfree</code>：释放内存</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vfree</span><span class="params">(<span class="keyword">void</span> *addr)</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>调试技术</p>
<p>printk()和C库中的printf()在使用上最主要的区别就是 printk()指定了<strong>日志级别</strong>。如下所示：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_EMERG <span class="meta-string">"&lt;0&gt;"</span>	 <span class="comment">/* 系统不可使用 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_ALERT <span class="meta-string">"&lt;1&gt;"</span> 	<span class="comment">/* 需要立即采取行动 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_CRIT <span class="meta-string">"&lt;2&gt;"</span> 	<span class="comment">/* 严重情况 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_ERR <span class="meta-string">"&lt;3&gt;"</span> 	<span class="comment">/* 错误情况 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_WARNING <span class="meta-string">"&lt;4&gt;"</span> <span class="comment">/* 警告情况 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_NOTICE <span class="meta-string">"&lt;5&gt;"</span> 	<span class="comment">/* 正常情况, 但是值得注意 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_INFO <span class="meta-string">"&lt;6&gt;"</span> 	<span class="comment">/* 信息型消息 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KERN_DEBUG <span class="meta-string">"&lt;7&gt;"</span> 	<span class="comment">/* 调试级别的信息 */</span></span></div><div class="line"></div><div class="line">KERN_EMERG          <span class="comment">/* 用于紧急事件消息，一般是系统崩溃消息 */</span></div><div class="line">KERN_ALERT           <span class="comment">/* 用于需要立即采取行动的情况 */</span></div><div class="line">KERN_CRIT          <span class="comment">/* 临界状态，通常涉及严重的硬件或软件操作失败 */</span></div><div class="line">KERN_ERR               <span class="comment">/* 用于报告错误状态 */</span></div><div class="line">KERN_WARNING  <span class="comment">/* 对可能出现问题的情况进行告警 */</span></div><div class="line">KERN_NOTICE       <span class="comment">/* 有必要进行提示的正常情况 */</span></div><div class="line">KERN_INFO            <span class="comment">/* 提示性信息 */</span></div><div class="line">KERN_DEBUG        <span class="comment">/* 用于调试级别的信息 */</span></div></pre></td></tr></table></figure>
<p>未指定优先级的<code>printk</code>语句采用的默认级别默认为<code>KERN_WARNING</code>。</p>
<p>可以通过<code>dmesg</code>或<code>cat /proc/kmsg</code>指令来查看内核调试输出。</p>
<p>​</p>
</li>
</ol>
<h2 id="用户态一些读写常用函数"><a href="#用户态一些读写常用函数" class="headerlink" title="用户态一些读写常用函数"></a>用户态一些读写常用函数</h2><p>对于Linux而言，所有对设备和文件的操作都是使用<font color="00F5FF">文件描述符</font>来进行的。<br><strong>文件描述符是一个非负的整数，它是一个索引值</strong>，并指向内核中每个进程打开文件的记录表。<br>当打开一个现存文件或创建一个新文件时，内核就向进程返回一个文件描述符；当需要读/写文件时，也需要把文件描述符作为参数传递给相应的函数。<br>通常，一个进程启动时，都会打开3个文件：标准输入、标准输出和标准出错处理。这3个文件分别对应的文件描述符为0，1，2</p>
<h3 id="open"><a href="#open" class="headerlink" title="open"></a>open</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</div></pre></td></tr></table></figure>
<p>打开一个文件，并指定访问该文件的方式，调用成功后返回一个文件描述符，发生错误时返回-1。</p>
<p><code>pathname</code>是要打开文件的完全路径名或相对路径名，是一个字符串指针。<br><code>flags</code>可以是<code>O_RDONLY</code>（只读）、<code>O_WRONLY</code>（只写）和<code>O_RDWR</code>（读写）3个值之一。</p>
<p>还有以下描述符：</p>
<p><code>O_CREAT</code>如果文件不存在，就创建它。</p>
<p><code>O_EXCL</code>保证创建文件，如果和<code>O_CREAT</code>的连用，如果文件已经存在open会失败。</p>
<p><code>O_NONBLOCK</code>以非阻塞形式打开，任何会引起阻塞的操作都会立刻返回。</p>
<p>对于第三个描述符 ：</p>
<p>当flags为<code>O_CREAT</code>时，mode可以使用，否则被忽略，其有以下值，用于定义文件权限。</p>
<blockquote>
<p>S_IRWXU  00700 user (file owner) has read, write, and execute permission</p>
<p>S_IRUSR  00400 user has read permission</p>
<p>S_IWUSR  00200 user has write permission</p>
<p>S_IXUSR  00100 user has execute permission</p>
<p>S_IRWXG  00070 group has read, write, and execute permission</p>
<p>S_IRGRP  00040 group has read permission</p>
<p>S_IWGRP  00020 group has write permission</p>
<p>S_IXGRP  00010 group has execute permission</p>
<p>S_IRWXO  00007 others have read, write, and execute permission</p>
<p>S_IROTH  00004 others have read permission</p>
<p>S_IWOTH  00002 others have write permission</p>
<p>S_IXOTH  00001 others have execute permission</p>
</blockquote>
<h3 id="close"><a href="#close" class="headerlink" title="close"></a>close</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</div></pre></td></tr></table></figure>
<p>使用完文件后调用close关闭相应的文件描述符。</p>
<p>fd是文件描述符，该文件描述符是在调用open时返回的。</p>
<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> count );</div></pre></td></tr></table></figure>
<p>从文件描述符对应的文件中读取数据，调用成功后返回读出的字节数，失败时返回-1。</p>
<p>fd是从open调用返回的文件描述符。buf是缓冲区的指针，读出的数据将被存放到该缓冲区中。count要读取的字节数。</p>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> count );</div></pre></td></tr></table></figure>
<p>向文件描述符对应的文件中写入数据，调用成功后返回写入的字节数，失败时返回-1。</p>
<p>fd是从open调用返回的文件描述符。buf是缓冲区的指针，用于存放要写入文件的数据。其大小必须满足能够放得下这些数据。count要写入的字节数。</p>
<h3 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, <span class="keyword">long</span> arg )</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd)</span></span>;</div></pre></td></tr></table></figure>
<p>设置或检索文件的有关参数并对文件进行一些其他的操作，涉及的设备不同，其参数也不同。</p>
<p>fd是从open调用返回的文件描述符。<br>cmd是命令<br>arg是特殊的命令参数</p>
<h3 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">off_t</span> lseek(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence);</div></pre></td></tr></table></figure>
<p>在文件描述符对应的文件里把文件指针设定到指定的位置，调用成功后返回新指针的位置offset。失败时返回-1。</p>
<p>offset所指的偏移位置与whence 有关， whence 有3个取值：<br><code>SEEK_SET</code>：从文件的开始处计算偏移。<br><code>SEEK_CUR</code>：从当前的文件偏移值计算偏移。<br><code>SEEK_END</code>：从文件的结束处计算偏移。</p>
<h2 id="模块加载有关知识"><a href="#模块加载有关知识" class="headerlink" title="模块加载有关知识"></a>模块加载有关知识</h2><p>应用程序一般有一个main 函数，从头到尾执行一个任务；驱动程序却不同，它没有main 函数，通过使用宏<code>module_init(初始化函数名)</code>，将初始化函数加入内核全局初始化函数列表中。通过宏<code>module_exit(退出处理函数名)</code>注册退出处理函数。<br>应用程序可以包含标准的头文件，比如<code>&lt;stdio.h&gt;、&lt;stdlib.h&gt;</code>等；在驱动程序中是不能使用标准C 库的，因此不能调用所有的C 库函数， 只能调用内核的函数，比如输出打印函数只能使用内核的printk 函数，包含的头文件只能是内核的头文件<code>&lt;linux/kernel.h&gt;</code>。</p>
<p>驱动加载的命令：</p>
<ul>
<li>加载设备驱动程序——insmod  &lt; 设备驱动程序.ko &gt;</li>
<li>查看当前加载的设备驱动程序——lsmod  </li>
<li>卸载驱动程序—— rmmod  &lt; 设备驱动程序 &gt;</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[定时器&&tasklet&&工作队列]]></title>
      <url>https://www.prime666.com/2017/06/03/%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>驱动实验之三——关于tasklet和工作队列的学习</p>
<a id="more"></a>
<h1 id="tasklet和工作队列"><a href="#tasklet和工作队列" class="headerlink" title="tasklet和工作队列"></a>tasklet和工作队列</h1><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>为了下面的实验，首先需要设置内核定时器。</p>
<p>在头文件<code>&lt;linux/timer.h&gt;</code>中定义了一个内核定时器。其是一个结构体，部分成员如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> timer_list</div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> list_head <span class="built_in">list</span>;</div><div class="line">　　<span class="keyword">unsigned</span> <span class="keyword">long</span> expires; <span class="comment">//定时器到期时间,节拍数</span></div><div class="line">　　<span class="keyword">unsigned</span> <span class="keyword">long</span> data; <span class="comment">//作为参数被传入定时器处理函数</span></div><div class="line">　　<span class="keyword">void</span> (*function)(<span class="keyword">unsigned</span> <span class="keyword">long</span>);<span class="comment">//定时处理函数</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>首先说明一下，<code>jiffies</code>在内核中是一个全局变量，它用来统计系统自启动以来系统中产生的总节拍(系统中连续两次时钟中断的间隔时间)数，这个变量定义在<code>&lt;linux/sched.h&gt;</code>中。该变量在系统启动时被初始化为0，接下来没进行一次时钟中断，jiffies自动加1。因此，知道了总的节拍数，然后再除以Hz，即可知系统的运行时间（jiffies/Hz）。</p>
<p>内核提供了一些方法进行转换:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/jiffies.h&gt;</span> </span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">jiffies_to_msecs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> j)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">jiffies_to_usecs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> j)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">msecs_to_jiffies</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> m)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">usecs_to_jiffies</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u)</span></span>;</div></pre></td></tr></table></figure>
<p>其余方法:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化定时器：</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_timer</span><span class="params">(<span class="keyword">struct</span> timer_list * timer)</span></span>;</div><div class="line"><span class="comment">//增加定时器：</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_timer</span><span class="params">(<span class="keyword">struct</span> timer_list * timer)</span></span>;</div><div class="line"><span class="comment">//删除定时器：</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">del_timer</span><span class="params">(<span class="keyword">struct</span> timer_list * timer)</span></span>;</div><div class="line"><span class="comment">//修改定时器的expire,可以用于重复计时</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mod_timer</span><span class="params">(<span class="keyword">struct</span> timer_list *timer, <span class="keyword">unsigned</span> <span class="keyword">long</span> expires)</span></span>;</div></pre></td></tr></table></figure>
<p>由此实现一个定时器如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span><span class="comment">//jiffies在此头文件中定义</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/timer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/jiffies.h&gt;</span></span></div><div class="line"><span class="keyword">struct</span> timer_list mytimer;<span class="comment">//定义一个定时器</span></div><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">mytimer_ok</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></div><div class="line">&#123;</div><div class="line">    mod_timer(&amp;mytimer,msecs_to_jiffies(<span class="number">1000</span>)+jiffies);</div><div class="line">    printk(<span class="string">"Mytimer is ok\n"</span>);</div><div class="line">    printk(<span class="string">"receive data from timer: %d\n"</span>,arg);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">hello_init</span> <span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"hello,world\n"</span>);</div><div class="line">    init_timer(&amp;mytimer);     <span class="comment">//初始化定时器</span></div><div class="line">    mytimer.expires = msecs_to_jiffies(<span class="number">1000</span>)+jiffies;<span class="comment">//设定超时时间，100代表1秒</span></div><div class="line">    mytimer.data = <span class="number">250</span>;    <span class="comment">//传递给定时器超时函数的值</span></div><div class="line">    mytimer.function = mytimer_ok;<span class="comment">//设置定时器超时函数</span></div><div class="line">    add_timer(&amp;mytimer); <span class="comment">//添加定时器，定时器开始生效</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">hello_exit</span> <span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    del_timer(&amp;mytimer);<span class="comment">//卸载模块时，删除定时器</span></div><div class="line">    printk(<span class="string">"Hello module exit\n"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">module_init(hello_init);</div><div class="line">module_exit(hello_exit);</div><div class="line">MODULE_AUTHOR(<span class="string">"prime"</span>);</div><div class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</div></pre></td></tr></table></figure>
<h2 id="tasklet"><a href="#tasklet" class="headerlink" title="tasklet"></a>tasklet</h2><h3 id="理论概述"><a href="#理论概述" class="headerlink" title="理论概述"></a>理论概述</h3><p>软中断、tasklet和工作队列并不是Linux内核中一直存在的机制，而是由更早版本的内核中的“下半部”（bottom half）演变而来。</p>
<ul>
<li>上半部和下半部的区别？</li>
</ul>
<blockquote>
<p><strong>上半部指的是中断处理程序，下半部则指的是一些虽然与中断有相关性但是可以延后执行的任务</strong>。举个例子：在网络传输中，网卡接收到数据包这个事件不一定需要马上被处理，适合用下半部去实现；但是用户敲击键盘这样的事件就必须马上被响应，应该用中断实现。</p>
<p>两者的主要区别在于：中断不能被相同类型的中断打断，而下半部依然可以被中断打断；中断对于时间非常敏感，而下半部基本上都是一些可以延迟的工作。由于二者的这种区别，所以对于一个工作是放在上半部还是放在下半部去执行，可以参考下面四条：</p>
<p>a）如果一个任务对时间非常敏感，将其放在中断处理程序中执行。</p>
<p>b）如果一个任务和硬件相关，将其放在中断处理程序中执行。</p>
<p>c）如果一个任务要保证不被其他中断（特别是相同的中断）打断，将其放在中断处理程序中执行。</p>
<p>d）其他所有任务，考虑放在下半部去执行。</p>
</blockquote>
<ul>
<li>为何使用软中断？</li>
</ul>
<blockquote>
<p>软中断作为下半部机制的代表，是随着SMP（share memory processor）的出现应运而生的，它也是tasklet实现的基础（tasklet实际上只是在软中断的基础上添加了一定的机制）。软中断一般是“<strong>可延迟函数</strong>”的总称，有时候也包括了tasklet（请读者在遇到的时候根据上下文推断是否包含tasklet）。它的出现就是因为要满足上面所提出的上半部和下半部的区别，使得对时间不敏感的任务延后执行，而且可以在多个CPU上并行执行，使得总的系统效率可以更高。它的特性包括：</p>
<p>a）产生后并不是马上可以执行，必须要等待内核的调度才能执行。软中断不能被自己打断，只能被硬件中断打断（上半部）。</p>
<p>b）可以并发运行在多个CPU上（即使同一类型的也可以）。所以软中断必须设计为可重入的函数（允许多个CPU同时操作），因此也需要使用自旋锁来保护其数据结构。</p>
</blockquote>
<ul>
<li>tasklet和软中断的区别</li>
</ul>
<blockquote>
<p>由于软中断必须使用可重入函数，这就导致设计上的复杂度变高，作为设备驱动程序的开发者来说，增加了负担。而如果某种应用并不需要在多个CPU上并行执行，那么软中断其实是没有必要的。因此诞生了弥补以上两个要求的tasklet。它具有以下特性：</p>
<p>a）一种特定类型的tasklet只能运行在一个CPU上，不能并行，只能串行执行。</p>
<p>b）多个不同类型的tasklet可以并行在多个CPU上。</p>
<p>c）软中断是静态分配的，在内核编译好之后，就不能改变。但tasklet就灵活许多，可以在运行时改变（比如添加模块时）。</p>
<p>tasklet是在两种软中断类型的基础上实现的，但是由于其特殊的实现机制，所以具有了这样不同于软中断的特性。而由于这种特性，所以降低了设备驱动程序开发者的负担，因此如果不需要软中断的并行特性，tasklet就是最好的选择。</p>
</blockquote>
<hr>
<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>其关键结构体定义如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> tasklet_struct</div><div class="line">&#123;</div><div class="line">      <span class="keyword">struct</span> tasklet_struct *next;<span class="comment">//将多个tasklet链接成单向循环链表</span></div><div class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> state;<span class="comment">//TASKLET_STATE_SCHED(Tasklet is scheduled for execution)  TASKLET_STATE_RUN(Tasklet is running (SMP only))</span></div><div class="line">      <span class="keyword">atomic_t</span> count;<span class="comment">//0:激活tasklet 非0:禁用tasklet</span></div><div class="line">      <span class="keyword">void</span> (*func)(<span class="keyword">unsigned</span> <span class="keyword">long</span>); <span class="comment">//用户自定义函数</span></div><div class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> data;  <span class="comment">//函数参数</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>定义<code>tasklet</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#define DECLARE_TASKLET(name, func, data) \</div><div class="line">struct tasklet_struct name = &#123; NULL, 0, ATOMIC_INIT(0), func, data &#125;</div><div class="line">//定义名字为name的激活tasklet</div><div class="line">#define DECLARE_TASKLET_DISABLED(name, func, data) \</div><div class="line">struct tasklet_struct name = &#123; NULL, 0, ATOMIC_INIT(1), func, data &#125; </div><div class="line">//定义名字为name的非激活tasklet</div><div class="line">void tasklet_init(struct tasklet_struct *t,void (*func)(unsigned long), unsigned long data)</div><div class="line">//动态初始化tasklet</div></pre></td></tr></table></figure>
<p>相关操作：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tasklet_disable</span><span class="params">(<span class="keyword">struct</span> tasklet_struct *t)</span></span></div><div class="line"><span class="comment">//函数暂时禁止给定的tasklet被tasklet_schedule调度，直到这个tasklet被再次被enable；若这个tasklet当前在运行, 这个函数忙等待直到这个tasklet退出</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tasklet_enable</span><span class="params">(<span class="keyword">struct</span> tasklet_struct *t)</span></div><div class="line"><span class="comment">//使能一个之前被disable的tasklet；若这个tasklet已经被调度, 它会很快运行。tasklet_enable和tasklet_disable必须匹配调用, 因为内核跟踪每个tasklet的"禁止次数"</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tasklet_schedule</span><span class="params">(<span class="keyword">struct</span> tasklet_struct *t)</span></div><div class="line"><span class="comment">//调度 tasklet 执行，如果tasklet在运行中被调度, 它在完成后会再次运行; 这保证了在其他事件被处理当中发生的事件受到应有的注意. 这个做法也允许一个 tasklet 重新调度它自己</span></div><div class="line"><span class="title">tasklet_hi_schedule</span><span class="params">(<span class="keyword">struct</span> tasklet_struct *t)</span></div><div class="line"><span class="comment">//和tasklet_schedule类似，只是在更高优先级执行。当软中断处理运行时, 它处理高优先级 tasklet 在其他软中断之前，只有具有低响应周期要求的驱动才应使用这个函数, 可避免其他软件中断处理引入的附加周期.</span></div><div class="line"><span class="title">tasklet_kill</span><span class="params">(<span class="keyword">struct</span> tasklet_struct *t)</span></div><div class="line"><span class="comment">//确保了 tasklet 不会被再次调度来运行，通常当一个设备正被关闭或者模块卸载时被调用。如果 tasklet 正在运行, 这个函数等待直到它执行完毕。若 tasklet 重新调度它自己，则必须阻止在调用 tasklet_kill 前它重新调度它自己，如同使用 del_timer_sync</span></div></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>如下实现了一个简单的tasklet，其每秒进行一次调度，10次之后停止。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span> <span class="comment">//模块参数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/stat.h&gt;</span> <span class="comment">//关于模块参数权限问题</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span> <span class="comment">// kmalloc</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/workqueue.h&gt;</span> <span class="comment">// workqueue_struct</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/timer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/jiffies.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span><span class="comment">//jiffies在此头文件中定义</span></span></div><div class="line"></div><div class="line"><span class="comment">//MODULE_LICENSE("GPL");</span></div><div class="line"><span class="comment">//MODULE_AURTHOR("mayuan");</span></div><div class="line"><span class="comment">//MODULE_DISCRIPTION("Maybe not a bad program?");</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> tasklet_millisecond=<span class="number">1000</span>;<span class="comment">//tasklet的计时间隔</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> workqueue_millisecond=<span class="number">5000</span>;<span class="comment">//工作队列的计时间隔</span></div><div class="line">module_param(tasklet_millisecond,<span class="keyword">int</span>,<span class="number">0644</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> tasklet_struct my_tasklet;<span class="comment">//tasklet结构体</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> number=<span class="number">0</span>;<span class="comment">//用于传给tasklet回调函数的参数</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> timer_list my_timer_tasklet;<span class="comment">//定时器</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_tasklet_callback</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_schedule(&amp;my_tasklet);</div><div class="line">    mod_timer(&amp;my_timer_tasklet,msecs_to_jiffies(tasklet_millisecond)+jiffies);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_timer_tasklet</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init_timer(&amp;my_timer_tasklet);</div><div class="line">    my_timer_tasklet.expires=msecs_to_jiffies(tasklet_millisecond)+jiffies;</div><div class="line">    my_timer_tasklet.function=timer_tasklet_callback;</div><div class="line">    add_timer(&amp;my_timer_tasklet);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tasklet_callback</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"number:%d ------ tasklet was schedule!\n"</span>,number);</div><div class="line">    number++;</div><div class="line">    <span class="keyword">if</span> (number==<span class="number">10</span>)</div><div class="line">    &#123;</div><div class="line">        del_timer(&amp;my_timer_tasklet);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function">init <span class="title">init_my_module</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_init(&amp;my_tasklet,tasklet_callback,<span class="number">0</span>);</div><div class="line">    printk(<span class="string">"load my module!\n"</span>);</div><div class="line">    init_timer_tasklet();</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_my_module</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_kill(&amp;my_tasklet);</div><div class="line">    printk(<span class="string">"unload my module!\n"</span>);</div><div class="line">&#125;</div><div class="line">module_init(init_my_module);</div><div class="line">module_exit(exit_my_module);</div></pre></td></tr></table></figure>
<h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><p><strong>软中断运行在中断上下文中，因此不能阻塞和睡眠，而tasklet使用软中断实现，当然也不能阻塞和睡眠。</strong></p>
<p>把推后执行的任务叫做工作（work），描述它的数据结构为work_struct ，这些工作以队列结构组织成工作队列（workqueue），其数据结构为workqueue_struct ，而工作线程就是负责执行工作队列中的工作。系统默认的工作者线程为events。<br>工作队列(work queue)是另外一种将工作推后执行的形式。工作队列可以把工作推后，交由一个内核线程去执行—这个下半部分总是会<strong>在进程上下文执行，但由于是内核线程，其不能访问用户空间</strong>。最重要特点的就是<strong>工作队列允许重新调度甚至是睡眠</strong>。</p>
<p>通常，在工作队列和软中断/tasklet中作出选择非常容易。可使用以下规则： </p>
<ul>
<li><p>如果推后执行的任务需要睡眠，那么只能选择工作队列，还支持获取信号量。 </p>
</li>
<li><p>如果推后执行的任务需要延时指定的时间再触发，那么使用工作队列，因为其可以利用timer延时(内核定时器实现)。 </p>
</li>
<li><p>如果推后执行的任务需要在一个tick之内处理，则使用软中断或tasklet，因为其可以抢占普通进程和内核线程，同时不可睡眠。 </p>
</li>
<li><p>如果推后执行的任务对延迟的时间没有任何要求，则使用工作队列，此时通常为无关紧要的任务。<br><u>实际上，工作队列的本质就是将工作交给内核线程处理，因此其可以用内核线程替换。但是内核线程的创建和销毁对编程者的要求较高，而工作队列实现了内核线程的封装，不易出错，所以我们也推荐使用工作队列。</u></p>
</li>
</ul>
<h3 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h3><p>“工作”的结构体</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> work_struct &#123;</div><div class="line">    <span class="keyword">atomic_long_t</span> data; <span class="comment">//传递给工作函数的参数</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> WORK_STRUCT_PENDING 0       <span class="comment">/* T if work item pending execution */</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> WORK_STRUCT_FLAG_MASK (3UL)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> WORK_STRUCT_WQ_DATA_MASK (~WORK_STRUCT_FLAG_MASK)</span></div><div class="line">    <span class="keyword">struct</span> list_head entry; <span class="comment">//链表结构，链接同一工作队列上的工作。</span></div><div class="line">    <span class="keyword">work_func_t</span> func; <span class="comment">//工作函数，用户自定义实现</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_LOCKDEP</span></div><div class="line">        <span class="keyword">struct</span> lockdep_map lockdep_map;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//工作队列执行函数的原型：</span></div><div class="line"><span class="keyword">void</span> (*<span class="keyword">work_func_t</span>)(<span class="keyword">struct</span> work_struct *work);</div><div class="line"><span class="comment">//该函数会由一个工作者线程执行，因此其在进程上下文中，可以睡眠也可以中断。但只能在内核中运行，无法访问用户空间。此函数就是我们欲做的工作</span></div></pre></td></tr></table></figure>
<p>延迟工作结构体</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> delayed_work &#123;</div><div class="line">    <span class="keyword">struct</span> work_struct work;</div><div class="line">    <span class="keyword">struct</span> timer_list timer; <span class="comment">//定时器，用于实现延迟处理</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>工作队列的结构体</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> workqueue_struct &#123;</div><div class="line">    <span class="keyword">struct</span> cpu_workqueue_struct *cpu_wq; <span class="comment">//指针数组，其每个元素为per-cpu的工作队列</span></div><div class="line">    <span class="keyword">struct</span> list_head <span class="built_in">list</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> singlethread; <span class="comment">//标记是否只创建一个工作者线程</span></div><div class="line">    <span class="keyword">int</span> freezeable;     <span class="comment">/* Freeze threads during suspend */</span></div><div class="line">    <span class="keyword">int</span> rt;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_LOCKDEP</span></div><div class="line">        <span class="keyword">struct</span> lockdep_map lockdep_map;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>相关API如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">静态创建 </div><div class="line">DECLARE_WORK(name,function); //定义正常执行的工作项</div><div class="line">DECLARE_DELAYED_WORK(name,function);//定义延后执行的工作项</div><div class="line"></div><div class="line">动态创建</div><div class="line">INIT_WORK(_work, _func) //创建正常执行的工作项</div><div class="line">INIT_DELAYED_WORK(_work, _func)//创建延后执行的工作项</div><div class="line"></div><div class="line">调度默认工作队列</div><div class="line">int schedule_work(struct work_struct *work）</div><div class="line"></div><div class="line">//对正常执行的工作进行调度，即把给定工作的处理函数提交给缺省的工作队列和工作者线程。工作者线程本质上是一个普通的内核线程，</div><div class="line">在默认情况下，每个CPU均有一个类型为“events”的工作者线程，当调用schedule_work时，这个工作者线程会被唤醒去执行工作链表上的所有工作。</div><div class="line"></div><div class="line">系统默认的工作队列名称是：keventd_wq,默认的工作者线程叫：events/n，这里的n是处理器的编号,每个处理器对应一个线程。</div><div class="line">比如，单处理器的系统只有events/0这样一个线程。而双处理器的系统就会多一个events/1线程。</div><div class="line">默认的工作队列和工作者线程由内核初始化时创建：</div><div class="line">start_kernel()--&gt;rest_init--&gt;do_basic_setup--&gt;init_workqueues</div><div class="line"></div><div class="line">调度延迟工作</div><div class="line">int schedule_delayed_work(struct delayed_work *dwork,unsigned long delay)</div><div class="line"></div><div class="line">刷新缺省工作队列</div><div class="line">void flush_scheduled_work(void)</div><div class="line">//此函数会一直等待，直到队列中的所有工作都被执行。</div><div class="line"></div><div class="line">取消延迟工作</div><div class="line">static inline int cancel_delayed_work(struct delayed_work *work)</div></pre></td></tr></table></figure>
<p><strong>以上均是采用缺省工作者线程来实现工作队列，其优点是简单易用，缺点是如果缺省工作队列负载太重，执行效率会很低，这就需要我们创建自己的工作者线程和工作队列。</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">create_workqueue(name) </div><div class="line"><span class="comment">//宏定义 返回值为工作队列，name为工作线程名称。创建新的工作队列和相应的工作者线程，name用于该内核线程的命名。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_work</span><span class="params">(<span class="keyword">struct</span> workqueue_struct *wq, <span class="keyword">struct</span> work_struct *work)</span></span></div><div class="line"><span class="comment">//类似于schedule_work，区别在于queue_work把给定工作提交给创建的工作队列wq而不是缺省队列。</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="title">queue_delayed_work</span><span class="params">(<span class="keyword">struct</span> workqueue_struct *wq,<span class="keyword">struct</span> delayed_work *dwork, <span class="keyword">unsigned</span> <span class="keyword">long</span> delay)</span></div><div class="line"><span class="comment">//调度延迟工作。</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">flush_workqueue</span><span class="params">(<span class="keyword">struct</span> workqueue_struct *wq)</span></div><div class="line"><span class="comment">//刷新指定工作队列。</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">destroy_workqueue</span><span class="params">(<span class="keyword">struct</span> workqueue_struct *wq)</span></div><div class="line"><span class="comment">//释放创建的工作队列。</span></div></pre></td></tr></table></figure>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面实现了每2秒，调度一次自定义工作队列，每一秒调度一次tasklet。每次调度时进行输出。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span> <span class="comment">//模块参数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/stat.h&gt;</span> <span class="comment">//关于模块参数权限问题</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/interrupt.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span> <span class="comment">// kmalloc</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/workqueue.h&gt;</span> <span class="comment">// workqueue_struct</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/timer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/jiffies.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span><span class="comment">//jiffies在此头文件中定义</span></span></div><div class="line"></div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"Mayuan"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"Maybe not a bad program?a~ha"</span>);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> tasklet_millisecond=<span class="number">1000</span>;<span class="comment">//tasklet的计时间隔</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> workqueue_millisecond=<span class="number">2000</span>;<span class="comment">//工作队列的计时间隔</span></div><div class="line">module_param(tasklet_millisecond,<span class="keyword">int</span>,<span class="number">0644</span>);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> tasklet_struct my_tasklet;<span class="comment">//tasklet结构体</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> number=<span class="number">0</span>;<span class="comment">//统计tasklet调用次数</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> timer_list my_timer_tasklet;<span class="comment">//定时器</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> timer_list my_timer_workqueue;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> workqueue_struct *my_workqueue;<span class="comment">//我的工作队列</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> work_struct work;<span class="comment">//代表正常工作的结构体</span></div><div class="line">    <span class="keyword">int</span> count;<span class="comment">//计数用</span></div><div class="line">&#125;my_work;</div><div class="line"></div><div class="line">my_work *mayuan_work;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_tasklet_callback</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_schedule(&amp;my_tasklet);</div><div class="line">    mod_timer(&amp;my_timer_tasklet,msecs_to_jiffies(tasklet_millisecond)+jiffies);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_workqueue_callback</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (mayuan_work-&gt;count==<span class="number">5</span>)</div><div class="line">    &#123;</div><div class="line">        del_timer(&amp;my_timer_workqueue);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"count:%d "</span>,mayuan_work-&gt;count);</div><div class="line">        mayuan_work-&gt;count++;</div><div class="line">        queue_work(my_workqueue,&amp;mayuan_work-&gt;work);</div><div class="line">        mod_timer(&amp;my_timer_workqueue,msecs_to_jiffies(workqueue_millisecond)+jiffies);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_timer_tasklet</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init_timer(&amp;my_timer_tasklet);</div><div class="line">    my_timer_tasklet.expires=msecs_to_jiffies(tasklet_millisecond)+jiffies;</div><div class="line">    my_timer_tasklet.function=timer_tasklet_callback;</div><div class="line">    add_timer(&amp;my_timer_tasklet);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_timer_workqueue</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init_timer(&amp;my_timer_workqueue);</div><div class="line">    my_timer_workqueue.expires=msecs_to_jiffies(workqueue_millisecond)+jiffies;</div><div class="line">    my_timer_workqueue.function=timer_workqueue_callback;</div><div class="line">    add_timer(&amp;my_timer_workqueue);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tasklet_callback</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> data)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"number:%d ------ tasklet was schedule!\n"</span>,number);</div><div class="line">    number++;</div><div class="line">    <span class="keyword">if</span> (number==<span class="number">10</span>)</div><div class="line">    &#123;</div><div class="line">        del_timer(&amp;my_timer_tasklet);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_function</span><span class="params">(<span class="keyword">struct</span> work_struct *work)</span></span></div><div class="line">&#123;</div><div class="line">    printk(<span class="string">"workqueue was schedule!\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_my_workqueue</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    my_workqueue=create_workqueue(<span class="string">"mayuan's workqueue"</span>);</div><div class="line">    <span class="keyword">if</span> (!my_workqueue)</div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"mmp.fuck!create workqueue failed!\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    mayuan_work=(my_work*)kmalloc(<span class="keyword">sizeof</span>(my_work),GFP_KERNEL);</div><div class="line">    <span class="keyword">if</span> (mayuan_work)</div><div class="line">    &#123;</div><div class="line">        INIT_WORK(&amp;mayuan_work-&gt;work,my_function);</div><div class="line">        mayuan_work-&gt;count=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        printk(<span class="string">"fuck*10086!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function">init <span class="title">init_my_module</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_init(&amp;my_tasklet,tasklet_callback,<span class="number">0</span>);</div><div class="line">    printk(<span class="string">"load my module! by prime\n"</span>);</div><div class="line">    init_timer_tasklet();</div><div class="line">    create_my_workqueue();</div><div class="line">    init_timer_workqueue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_my_module</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tasklet_kill(&amp;my_tasklet);</div><div class="line">    flush_workqueue(my_workqueue);</div><div class="line">    destroy_workqueue(my_workqueue);</div><div class="line">    printk(<span class="string">"unload my module! by prime\n"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line">module_init(init_my_module);</div><div class="line">module_exit(exit_my_module);</div></pre></td></tr></table></figure>
<p>本文参考自<a href="http://blog.csdn.net/godleading/article/details/52971179#t10" target="_blank" rel="noopener">CSDN博客</a>，并加以取舍。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用python进行网络编程]]></title>
      <url>https://www.prime666.com/2017/06/02/%E7%94%A8python%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>一些用Python实现的网络小程序。</p>
<a id="more"></a>
<h1 id="网络小程序——python"><a href="#网络小程序——python" class="headerlink" title="网络小程序——python"></a>网络小程序——python</h1><p>源码见我的<a href="https://github.com/mayuan1210/code_in_school/tree/master/network" target="_blank" rel="noopener">github</a>，实现过程为python3.52，并没有使用任何现有的第三方库，全是用的基础socket编程。</p>
<h2 id="编写www客户机"><a href="#编写www客户机" class="headerlink" title="编写www客户机"></a>编写www客户机</h2><h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><blockquote>
<p>要求实现的程序为图形化界面，可以输入访问WWW服务器需要的URL地址，输出交互过程中的HTTP命令与响应信息，以及从WWW服务器中获得的HTML文档信息。要求实现GET命令，不需要解析HTML文档内容。点击“Browse”按钮，实现GET命令。</p>
</blockquote>
<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>建立TCP连接</li>
<li>客户机调用socket()函数建立套接字</li>
<li>调用connect()函数请求与服务器建立连接</li>
<li>发送<code>GET</code>命令，并读取服务器的响应信息</li>
</ol>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">(url)</span>:</span></div><div class="line">    sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class="line">    sock.connect((url,<span class="number">80</span>))</div><div class="line">   <span class="comment">#以上建立基本socket连接，http端口80</span></div><div class="line">    request_text=<span class="string">b'GET / HTTP/1.1\r\nHost:'</span>+url.encode(<span class="string">'utf-8'</span>)+<span class="string">b'\r\nConnection: close\r\n\r\n'</span></div><div class="line">    <span class="comment">#以上就是GET的请求头，发送这个请求头，服务器就会给出应有的响应。</span></div><div class="line">    </div><div class="line">    sock.sendall(request_text)</div><div class="line">   </div><div class="line">    data=[]</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>: <span class="comment">#读取数据</span></div><div class="line">        more=sock.recv(<span class="number">4096</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> more:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        data.append(more)</div><div class="line">    sock.close()</div><div class="line">    reply=<span class="string">b''</span>.join(data)<span class="comment">#最终结果字符串</span></div><div class="line">    reply =reply.decode(<span class="string">'utf-8'</span>)</div><div class="line">    headers,body=reply.split(<span class="string">'\r\n\r\n'</span>,<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> headers,body</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    res=client(<span class="string">'www.sina.com.cn'</span>)</div><div class="line">    <span class="comment"># res=client('www.baidu.com')</span></div><div class="line">    print(res[<span class="number">0</span>])</div><div class="line">    print(res[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<p>代码如上，第一次实验思路是很简单的。关键就是<strong>根据http协议发送请求头</strong>，然后就等着收取服务器数据了。</p>
<h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_195752.png" alt="2017-05-19_195752" title="">
                </div>
                <div class="image-caption">2017-05-19_195752</div>
            </figure>
<h2 id="编写FTP客户端"><a href="#编写FTP客户端" class="headerlink" title="编写FTP客户端"></a>编写FTP客户端</h2><h3 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h3><blockquote>
<p>要求实现的程序为图形化界面，可以输入FTP服务的相关信息(包括IP地址、用户名与密码)，输出交互过程中的FTP命令与响应信息，以及从FTP服务器获得的文件(或目录)列表</p>
<p>要求实现USER、PASS、PASV、LIST与QUIT命令。点击“Connect”按钮，实现USER与PASS命令；点击“List”按钮，实现PASV 与LIST命令；点击“Quit”按钮，实现QUIT命令</p>
</blockquote>
<h3 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>FTP客户机调用socket()函数建立套接字</li>
<li>FTP客户机填充服务器的套接字地址</li>
<li>FTP客户机调用connect()函数请求与服务器建立连接</li>
<li>FTP客户机接收与分析服务器返回的响应信息</li>
<li>登录FTP服务器使用USER与PASS命令，分别用来输入用户名与密码</li>
<li>USER与PASS命令按规定顺序出现</li>
<li>FTP客户机向服务器发送USER命令</li>
<li>FTP客户机向服务器发送PASS命令</li>
<li>LIST命令用来返回当前目录中的信息，需要使用数据连接传输目录信息</li>
<li>FTP客户机向服务器发送QUIT命令。断开FTP客户机与服务器之间的控制连接</li>
<li>关闭套接字</li>
</ol>
<p><strong>这里欲实现FTP客户端，显然必须有服务器，所以我首先搭建了一个本地FTP服务器。利用了免费的服务器端FileZilla Server Interface。</strong></p>
<p>服务器后台如下：（现在我还没用客户端连接，所以没什么内容）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_200511.png" alt="2017-05-19_200511" title="">
                </div>
                <div class="image-caption">2017-05-19_200511</div>
            </figure>
<p>为了证明我服务器搭建正常，用浏览器查看当前服务器根目录文件如下:（我用了一个本地的tftp文件夹）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_200651.png" alt="2017-05-19_200651" title="">
                </div>
                <div class="image-caption">2017-05-19_200651</div>
            </figure>
<h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FTP</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,address)</span>:</span></div><div class="line">        self.sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class="line">        self.sock.connect((address,<span class="number">21</span>))</div><div class="line">        self.file=self.sock.makefile(<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</div><div class="line">        self.maxline=<span class="number">8192</span></div><div class="line">        print(self.getwelcome())</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,name,password)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.sendcmd(<span class="string">'USER %s'</span>%name)+<span class="string">'\r\n'</span>+self.sendcmd(<span class="string">'PASS %s'</span>%password)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">List</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.PASV(<span class="string">'LIST'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Quit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.PASV(<span class="string">'QUIT'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getsingelline</span><span class="params">(self)</span>:</span> <span class="comment">#从服务器读取一行，去除\r\n</span></div><div class="line">        line=self.file.readline(<span class="number">8192</span>+<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> line[<span class="number">-2</span>:]==<span class="string">'\r\n'</span>:</div><div class="line">            line=line[:<span class="number">-2</span>]</div><div class="line">        <span class="keyword">if</span> line[<span class="number">-1</span>:] <span class="keyword">in</span> (<span class="string">'\r'</span>,<span class="string">'\n'</span>):</div><div class="line">            line=line[:<span class="number">-1</span>]</div><div class="line">        <span class="keyword">return</span> line</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendcmd</span><span class="params">(self,cmd)</span>:</span> <span class="comment">#发送命令,返回得到的响应信息</span></div><div class="line">        cmd+=<span class="string">'\r\n'</span></div><div class="line">        self.sock.sendall(cmd.encode())</div><div class="line">        <span class="keyword">return</span> self.getresponse()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getwelcome</span><span class="params">(self)</span>:</span> <span class="comment">#获取服务器的欢迎信息</span></div><div class="line">        <span class="keyword">return</span> self.getresponse()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getmultiline</span><span class="params">(self)</span>:</span> <span class="comment">#从服务器读取多行，用\n分割</span></div><div class="line">        line=self.getsingelline()</div><div class="line">        <span class="keyword">if</span> line[<span class="number">3</span>:<span class="number">4</span>]==<span class="string">'-'</span>:</div><div class="line">            code=line[:<span class="number">3</span>]</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                nextline=self.getsingelline()</div><div class="line">                line+=<span class="string">'\n'</span>+nextline</div><div class="line">                <span class="keyword">if</span> nextline[:<span class="number">3</span>]==code <span class="keyword">and</span> nextline[<span class="number">3</span>:<span class="number">4</span>]!=<span class="string">'-'</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> line</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getresponse</span><span class="params">(self)</span>:</span> <span class="comment">#返回从服务器获取的响应,这个只是针对于21端口即命令通道</span></div><div class="line">        <span class="keyword">return</span> self.getmultiline()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsePASV</span><span class="params">(self,response)</span>:</span> <span class="comment">#从服务器响应中取出pasv的ip和端口号</span></div><div class="line">        <span class="keyword">if</span> response[:<span class="number">3</span>]!=<span class="string">'227'</span>:<span class="comment">#服务器没有做好准备</span></div><div class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'服务器尚未进入被动模式，无法切换'</span>)</div><div class="line">        <span class="keyword">import</span> re</div><div class="line">        pattern=re.compile(<span class="string">r'(\d+),(\d+),(\d+),(\d+),(\d+),(\d+)'</span>,re.ASCII)</div><div class="line">        tmp=pattern.search(response) <span class="comment">#match是只从头部匹配，因而这里用search</span></div><div class="line">        numbers=tmp.groups()</div><div class="line">        host=<span class="string">'.'</span>.join(numbers[:<span class="number">4</span>])</div><div class="line">        port=(int(numbers[<span class="number">4</span>])&lt;&lt;<span class="number">8</span>)+int(numbers[<span class="number">5</span>])</div><div class="line">        <span class="keyword">return</span> host,port</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PASV</span><span class="params">(self,cmd)</span>:</span> <span class="comment">#返回被动模式传输的数据,这是数据通道</span></div><div class="line">        address,port=self.parsePASV(self.sendcmd(<span class="string">'PASV'</span>))</div><div class="line">        print(<span class="string">'现在进入PASV模式,欲连接的地址&#123;&#125;端口&#123;&#125;'</span>.format(address,port))</div><div class="line">        self.sendcmd(<span class="string">'TYPE A'</span>) <span class="comment">#以ascll模式进行数据传输</span></div><div class="line">        <span class="keyword">with</span> socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="keyword">as</span> so,so.makefile(<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            so.connect((address,port))</div><div class="line">            print(<span class="string">'现在已连接&#123;&#125;'</span>.format(so.getpeername()))</div><div class="line">            msg = self.sendcmd(cmd)</div><div class="line">            print(msg)</div><div class="line">            <span class="keyword">if</span> cmd==<span class="string">'QUIT'</span>:</div><div class="line">                <span class="keyword">return</span> ([],msg)</div><div class="line">            data_res=[]</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                line=f.readline(self.maxline+<span class="number">1</span>)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> line[<span class="number">-2</span>:] == <span class="string">'\r\n'</span>:</div><div class="line">                    line = line[:<span class="number">-2</span>]</div><div class="line">                <span class="keyword">elif</span> line[<span class="number">-1</span>:] == <span class="string">'\n'</span>:</div><div class="line">                    line = line[:<span class="number">-1</span>]</div><div class="line">                print(line)</div><div class="line">                data_res.append(line)</div><div class="line">        <span class="keyword">return</span> (data_res,self.getresponse()) <span class="comment">#返回数据通道和命令通道的响应值</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    client=FTP(<span class="string">'192.168.229.1'</span>)</div><div class="line">    client.login(<span class="string">'prime'</span>,<span class="string">'123'</span>)</div><div class="line">    print(client.Quit())</div></pre></td></tr></table></figure>
<p><strong>这里和第一次实验套路一样，都是从建立套接字，发送命令到接受响应。不同的是，第一次只用一个套接字即可，但是FTP分为命令端口和数据端口，这里命令端口是21，数据端口是20000（自己在服务器设置的）。程序中当发送PASV命令后，命令通道会发送服务器的另一个地址，客户端主动连接，这就是数据通道，LIST命令的结果是从数据通道返回的！这个过程也就是传说中的被动模式了。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201322.png" alt="2017-05-19_201322" title="">
                </div>
                <div class="image-caption">2017-05-19_201322</div>
            </figure>
<h3 id="程序运行-1"><a href="#程序运行-1" class="headerlink" title="程序运行"></a>程序运行</h3><p><img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201400.png" alt="2017-05-19_201400"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201422.png" alt="2017-05-19_201422" title="">
                </div>
                <div class="image-caption">2017-05-19_201422</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201433.png" alt="2017-05-19_201433" title="">
                </div>
                <div class="image-caption">2017-05-19_201433</div>
            </figure>
<p>最后两张是客户端后台和服务器端后台日志，一目了然。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201442.png" alt="2017-05-19_201442" title="">
                </div>
                <div class="image-caption">2017-05-19_201442</div>
            </figure>
<p><img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_201631.png" alt="2017-05-19_201631"></p>
<hr>
<h2 id="实现POP客户端"><a href="#实现POP客户端" class="headerlink" title="实现POP客户端"></a>实现POP客户端</h2><h3 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h3><blockquote>
<p>要求实现的程序为图形化界面，可以输入POP服务的相关信息(包括POP服务器名、用户名与密码)，输出交互过程中的POP命令与响应信息，以及从POP服务器的邮箱中获得的邮件信息 </p>
<p>要求实现USER、PASS、STAT、RETR与QUIT命令。点击“Connect”按钮，实现USER与PASS命令；点击“Receive”按钮，实现STAT与RETR命令；点击“Quit”按钮，实现QUIT命令</p>
</blockquote>
<h3 id="设计思路-2"><a href="#设计思路-2" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>POP客户机调用socket()函数建立套接字</li>
<li>POP客户机填充服务器的套接字地址</li>
<li>POP客户机调用connect()函数请求与服务器建立连接</li>
<li>POP客户机接收与分析服务器返回的响应信息</li>
<li>登录POP服务器使用USER与PASS命令，分别用来输入用户名与密码,USER与PASS命令按规定顺序出现</li>
<li>STAT命令用来返回邮箱的统计信息，包括邮件数量与字节总数</li>
<li>RETR命令用来返回邮箱中的指定邮件，包括邮件头与邮件正文</li>
<li>POP客户机向服务器发送QUIT命令</li>
<li>释放套接字</li>
</ol>
<p><strong>这道题最令人无语之处就是编码，邮件每当经过一个服务器，就会加上一个头部，于是就很冗余，况且编码问题也是很麻烦，无奈，这里我用了email模块解析邮件内容，注意email和网络无关，这不能算作弊O(∩_∩)O哈！</strong></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">from</span> email.parser <span class="keyword">import</span> Parser</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</div><div class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr,parsedate</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">CR=<span class="string">b'\r'</span></div><div class="line">LF=<span class="string">b'\n'</span></div><div class="line">CRLF=CR+LF</div><div class="line"></div><div class="line">_maxline=<span class="number">2048</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">POP</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,hostname,port=<span class="number">110</span>)</span>:</span></div><div class="line">        self.host=hostname</div><div class="line">        self.port=port</div><div class="line">        self.sock=socket.create_connection((self.host,self.port))</div><div class="line">        self.file=self.sock.makefile(<span class="string">'rb'</span>)</div><div class="line">        self.welcome=self._getlines()[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getresp</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getlines</span><span class="params">(self)</span>:</span> <span class="comment">#从服务器读取一行信息，全局最耗时的担当</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        :return: 返回（信息，长度），信息是只保留LF</div><div class="line">        '''</div><div class="line">        line=self.file.readline(_maxline+<span class="number">1</span>)  <span class="comment"># ..LF</span></div><div class="line">        octets=len(line) <span class="comment">#有几个字节?</span></div><div class="line">        <span class="keyword">if</span> line[:<span class="number">-2</span>]==CRLF: <span class="comment"># ...CRLF</span></div><div class="line">            <span class="keyword">return</span> line[:<span class="number">-2</span>],octets</div><div class="line">        <span class="keyword">if</span> line[:<span class="number">1</span>]==CR: <span class="comment">#CR..LF</span></div><div class="line">            <span class="keyword">return</span> line[<span class="number">1</span>:<span class="number">-1</span>],octets</div><div class="line">        <span class="keyword">return</span> line[:<span class="number">-1</span>],octets <span class="comment"># ...LF</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getmultilines</span><span class="params">(self)</span>:</span>  <span class="comment">#返回['response', ['mesg_num octets', ...], octets].</span></div><div class="line">        resp=self._getlines()[<span class="number">0</span>]</div><div class="line">        List=[]; octets=<span class="number">0</span></div><div class="line">        line,num=self._getlines()</div><div class="line">        <span class="keyword">while</span> line !=<span class="string">b'.\r'</span>:</div><div class="line">            <span class="keyword">if</span> line.startswith(<span class="string">b'..'</span>):</div><div class="line">                num = num - <span class="number">1</span></div><div class="line">                line = line[<span class="number">1</span>:]</div><div class="line">            octets+=num</div><div class="line">            List.append(line)</div><div class="line">            <span class="comment"># print(line)</span></div><div class="line">            line, num = self._getlines()</div><div class="line">        <span class="comment"># t=b'\r\n'.join(List).decode('gbk')</span></div><div class="line">        <span class="keyword">return</span> (resp, List, octets)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sendcmd</span><span class="params">(self,cmd)</span>:</span> <span class="comment">#把命令cmd发送到服务器,然后返回响应</span></div><div class="line">        cmd=bytes(cmd,encoding=<span class="string">'utf-8'</span>)</div><div class="line">        self.sock.sendall(cmd+CRLF)</div><div class="line">        <span class="keyword">return</span> self._getlines()[<span class="number">0</span>].decode()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sendlongcmd</span><span class="params">(self,cmd)</span>:</span></div><div class="line">        cmd = bytes(cmd, encoding=<span class="string">'utf-8'</span>)</div><div class="line">        self.sock.sendall(cmd + CRLF)</div><div class="line">        <span class="keyword">return</span> self._getmultilines()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">STAT</span><span class="params">(self)</span>:</span> <span class="comment">#返回邮箱的状态 (信件总数,信件大小)</span></div><div class="line">        source=self._sendcmd(<span class="string">'STAT'</span>)</div><div class="line">        tmp=source.split()</div><div class="line">        <span class="keyword">return</span> (int(tmp[<span class="number">1</span>]),int(tmp[<span class="number">2</span>]))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">USER</span><span class="params">(self,user)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._sendcmd(<span class="string">'USER &#123;&#125;'</span>.format(user))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PASS</span><span class="params">(self,password)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._sendcmd(<span class="string">'PASS &#123;&#125;'</span>.format(password))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LIST</span><span class="params">(self)</span>:</span> <span class="comment">#列出信件列表</span></div><div class="line">        <span class="keyword">return</span> self._sendlongcmd(<span class="string">'LIST'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">RETR</span><span class="params">(self,index)</span>:</span> <span class="comment">#下载信件</span></div><div class="line">        <span class="keyword">return</span> self._sendlongcmd(<span class="string">'RETR &#123;&#125;'</span>.format(index))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">QUIT</span><span class="params">(self)</span>:</span>  <span class="comment">#关闭并退出</span></div><div class="line">        res=self._sendcmd(<span class="string">'QUIT'</span>)</div><div class="line">        self.sock.close()</div><div class="line">        <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_to_str</span><span class="params">(s)</span>:</span></div><div class="line">    data,charset=decode_header(s)[<span class="number">0</span>]  <span class="comment">#返回[(字符串，编码符号)]</span></div><div class="line">    <span class="keyword">if</span> charset:</div><div class="line">        data.decode(charset)</div><div class="line">    <span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_mail</span><span class="params">(msg)</span>:</span> <span class="comment">#用于打印邮件</span></div><div class="line">    <span class="keyword">for</span> header <span class="keyword">in</span> (<span class="string">'From'</span>,<span class="string">'To'</span>,<span class="string">'Date'</span>,<span class="string">'Subject'</span>):</div><div class="line">        value=msg.get(header,<span class="string">''</span>)</div><div class="line">        <span class="keyword">if</span> value:</div><div class="line">            <span class="keyword">if</span> header==<span class="string">'Subject'</span>:</div><div class="line">                value=decode_to_str(value)</div><div class="line">            <span class="keyword">elif</span> header==<span class="string">'Date'</span>:</div><div class="line">                value=parsedate(value)[:<span class="number">6</span>] <span class="comment">#解析时间字段，返回9-tuple</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                realname,mailaddr=parseaddr(value) <span class="comment">#解析地址，必须是包含地址的域，比如To或Cc，返回元组（真实姓名，邮箱地址）</span></div><div class="line">                value=<span class="string">"&#123;&#125;"</span>.format(mailaddr)</div><div class="line">            print(header + <span class="string">' : '</span>,value)</div><div class="line">            </div><div class="line">    <span class="keyword">if</span> (msg.is_multipart()):</div><div class="line">        <span class="comment">#Return True if the message’s payload is a list of sub-Message objects, otherwise return False.</span></div><div class="line"></div><div class="line">        parts = msg.get_payload() <span class="comment">#此时parts是一个message的列表</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        Return the current payload, which will be a list of Message objects when is_multipart() is True,</div><div class="line">         or a string when is_multipart() is False.</div><div class="line">        默认参数i=None, decode=False，第一个表示列表索引；第二个表示是否解码，当然只能对非multipart有效</div><div class="line">        '''</div><div class="line">        <span class="keyword">for</span> n, part <span class="keyword">in</span> enumerate(parts):</div><div class="line">            print(<span class="string">'part %s'</span> % n)</div><div class="line">            print_mail(part) <span class="comment">#递归打印文本信息</span></div><div class="line">           </div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        content_type = msg.get_content_type()  <span class="comment">#Return the message’s content type.类型强制为小写的mime类型</span></div><div class="line">        <span class="keyword">if</span> content_type == <span class="string">'text/plain'</span> <span class="keyword">or</span> content_type == <span class="string">'text/html'</span>:  <span class="comment">#这些都是mime类型</span></div><div class="line">            content = msg.get_payload(decode=<span class="keyword">True</span>)</div><div class="line">            charset = guess_charset(msg)</div><div class="line">            <span class="keyword">if</span> charset:</div><div class="line">                content = content.decode(charset)</div><div class="line">            print(<span class="string">'Text: %s'</span> % content)</div><div class="line">           </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'Attachment: %s'</span> % content_type)</div><div class="line">          </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_charset</span><span class="params">(msg)</span>:</span></div><div class="line">    charset = msg.get_charset() <span class="comment">#Return the Charset instance associated with the message’s payload.</span></div><div class="line">    <span class="keyword">if</span> charset <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        content_type = msg.get(<span class="string">'Content-Type'</span>, <span class="string">''</span>).lower()</div><div class="line">        pos = content_type.find(<span class="string">'charset='</span>) <span class="comment">#找到下标</span></div><div class="line">        <span class="keyword">if</span> pos &gt;= <span class="number">0</span>:</div><div class="line">            charset = content_type[pos + <span class="number">8</span>:].strip() <span class="comment">#取出编码。</span></div><div class="line">        <span class="string">'''</span></div><div class="line">         strip([chars])：</div><div class="line">        #Return a copy of the string with the leading and trailing characters removed.</div><div class="line">        # The chars argument is a string specifying the set of characters to be removed</div><div class="line">        #Characters are removed from the leading end until reaching a string character that is not</div><div class="line">        # contained in the set of characters in chars. A similar action takes place on the trailing end.</div><div class="line">        默认去除空格</div><div class="line">        '''</div><div class="line">    <span class="keyword">return</span> charset</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p=POP(<span class="string">'pop.163.com'</span>)</div><div class="line">    print(p.welcome)</div><div class="line">    print(p.USER(<span class="string">'13173370316@163.com'</span>))</div><div class="line">    print(p.PASS(<span class="string">'my951210'</span>))</div><div class="line">    print(p.STAT())</div><div class="line">    print(<span class="string">b'\n'</span>.join(p.LIST()[<span class="number">1</span>]).decode(<span class="string">'gb18030'</span>))</div><div class="line">    tmp=p.RETR(<span class="string">'11'</span>)</div><div class="line">    text=Parser().parsestr(<span class="string">b''</span>.join(tmp[<span class="number">1</span>]).decode())</div><div class="line">    print_mail(text)</div><div class="line">    print(p.QUIT())</div></pre></td></tr></table></figure>
<h3 id="程序运行-2"><a href="#程序运行-2" class="headerlink" title="程序运行"></a>程序运行</h3><p>首先，看一下我网易的邮箱。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_202534.png" alt="2017-05-19_202534" title="">
                </div>
                <div class="image-caption">2017-05-19_202534</div>
            </figure>
<p>为了方便测试，我特地用了别的邮箱发了一封邮件。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_202633.png" alt="2017-05-19_202633" title="">
                </div>
                <div class="image-caption">2017-05-19_202633</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_202649.png" alt="2017-05-19_202649" title="">
                </div>
                <div class="image-caption">2017-05-19_202649</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-05-19_202705.png" alt="2017-05-19_202705" title="">
                </div>
                <div class="image-caption">2017-05-19_202705</div>
            </figure>
<hr>
<h2 id="主机扫描程序（即Ping）"><a href="#主机扫描程序（即Ping）" class="headerlink" title="主机扫描程序（即Ping）"></a>主机扫描程序（即Ping）</h2><h3 id="题目要求-3"><a href="#题目要求-3" class="headerlink" title="题目要求"></a>题目要求</h3><blockquote>
<p>编写一个网络主机扫描程序，具体要求如下:<br>要求实现的程序为图形化界面，可以输入扫描的目的主机的IP地址，输出目的主机的状态(Open或Close)<br>要求扫描支持ICMP协议的单台目的主机。点击“Scan”按钮，实现对目的主机的扫描过程 </p>
</blockquote>
<h3 id="设计思路-3"><a href="#设计思路-3" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>调用socket()函数创建原始套接字，SOCK_RAW表示原始套接字，IPPROTO_ICMP表示ICMP协议</li>
<li>调用setsockopt()函数设置发送与接收超时时间，SO_SNDTIMEO表示发送超时，SO_RCVTIMEO表示接收超时</li>
<li>构造ICMP头部的数据结构，包括1字节的类型、1字节的代码、2字节的头部校验和、2字节的标识符与2字节的序号</li>
<li>构造IP头部的数据结构</li>
<li>填充ICMP头部的各个字段，包括类型、代码、校验和、标识符与序号，回送请求类型为8，回送请求代码为0 </li>
<li>调用sendto()函数来发送ICMP数据包</li>
<li>用recvfrom()函数来接收ICMP数据包。依次解析ICMP头部的各个字段，包括类型、代码、校验和、标识符与序号，回送响应类型为0，回送响应代码为0 </li>
</ol>
<p>ICMP详细介绍参考<a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#ICMP_datagram_structure" target="_blank" rel="noopener">Wikipedia</a></p>
<p>这里截图如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-06-02_193614.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>题目本质上就是实现Ping命令，所以我们需要填充类型码为0表示回送请求，code也是0。校验和部分需要特殊的算法，这里就不再重复了，代码中注释很清晰。头部的剩余部分无所谓了，我填充了当前的时间戳，这样收到回复之时用现在时间戳-报文中的时间戳就是传输时间了。</strong></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> select</div><div class="line"></div><div class="line">ICMP_ECHO_REQUEST=<span class="number">8</span>  <span class="comment">#ping的icmp报文类型编码</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ping</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,host_name,timeout=<span class="number">2</span>,times=<span class="number">4</span>)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        :param host_name: 主机名</div><div class="line">        :param timeout: 单次最大超时时间</div><div class="line">        :param times: 发送几次响应</div><div class="line">        '''</div><div class="line">        self.host=host_name</div><div class="line">        self.sock=socket.socket(socket.AF_INET,socket.SOCK_RAW,socket.getprotobyname(<span class="string">'icmp'</span>)) <span class="comment">#创建icmp的原始套接字</span></div><div class="line">        self.timeout=timeout</div><div class="line">        self.times=times</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_sum</span><span class="params">(self,source)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        :param source: 待计算的字符串</div><div class="line">        :return: 校验和</div><div class="line">        以16bit（2个字节）为一组，并将所有组相加（二进制求和）</div><div class="line">        若高16bit不为0，则将高16bit与低16bit反复相加，直到高16bit的值为0，从而获得一个只有16bit长度的值</div><div class="line">        将此16bit值进行按位求反操作，将所得值替换到校验和字段</div><div class="line">        '''</div><div class="line">        length=len(source)//<span class="number">2</span>*<span class="number">2</span> <span class="comment">#求长度的偶数值，即有多少个32位组</span></div><div class="line">        res=<span class="number">0</span></div><div class="line">        count=<span class="number">0</span></div><div class="line">        <span class="keyword">while</span> count&lt;length:</div><div class="line">            val=source[count+<span class="number">1</span>]*<span class="number">256</span>+source[count]</div><div class="line">            res+=val</div><div class="line">            res&amp;=<span class="number">0xffffffff</span> <span class="comment">#二进制加法，高位丢弃，只留32位</span></div><div class="line">            count+=<span class="number">2</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> count&lt;len(source): <span class="comment">#长度为奇数，有单独的一个字符</span></div><div class="line">            res+=ord(source[<span class="number">-1</span>])</div><div class="line">            res&amp;=<span class="number">0xffffffff</span></div><div class="line">        <span class="comment">#把32bit转换成16bit的校验和</span></div><div class="line">        res=(res&gt;&gt;<span class="number">16</span>)+(res&amp;<span class="number">0xffff</span>) <span class="comment">#将高16位和低16位相加</span></div><div class="line">        res+=(res&gt;&gt;<span class="number">16</span>)  <span class="comment">#将上述过程的进位再次加到低位</span></div><div class="line">        res=~res</div><div class="line">        res=res &amp; <span class="number">0xffff</span></div><div class="line">        res=res&gt;&gt;<span class="number">8</span>|(res&lt;&lt;<span class="number">8</span>&amp;<span class="number">0xFF00</span>) <span class="comment">#高八位低八位互换</span></div><div class="line">        <span class="keyword">return</span> res</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_ping</span><span class="params">(self,ID)</span>:</span> <span class="comment">#伪造数据包</span></div><div class="line">        my_checksum=<span class="number">0</span></div><div class="line">        <span class="comment">#b:signed char, h:short 2, H:unsigned short 2 小写有符号，大写无符号</span></div><div class="line">        header=struct.pack(<span class="string">'bbHHh'</span>,ICMP_ECHO_REQUEST,<span class="number">0</span>,my_checksum,ID,<span class="number">1</span>) <span class="comment">#对应icmp报文头部的8个字节 1 1 2 2 2</span></div><div class="line">        bytes_in_float=struct.calcsize(<span class="string">'d'</span>)    <span class="comment">#8位</span></div><div class="line">        data = (<span class="number">192</span> - bytes_in_float) * <span class="string">b"A"</span>   <span class="comment">#正文瞎填充</span></div><div class="line">        data=struct.pack(<span class="string">'d'</span>,time.time())+data <span class="comment">#正文加入8bit,表示发送时的时间,time.time()返回浮点数，表示累计秒数</span></div><div class="line">        my_checksum=self.check_sum(header+data)</div><div class="line">        header = struct.pack(<span class="string">"bbHHh"</span>, ICMP_ECHO_REQUEST, <span class="number">0</span>, socket.htons(my_checksum), ID, <span class="number">1</span>)</div><div class="line">        packet=header+data <span class="comment">#要发送的包包</span></div><div class="line">        self.sock.sendto(packet,(self.host,<span class="number">1</span>))</div><div class="line">        print(<span class="string">'已经发送给&#123;&#125;,发送的数据包的校验和:&#123;&#125;'</span>.format(self.host,my_checksum))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_receive</span><span class="params">(self,ID)</span>:</span> <span class="comment">#返回得到响应的用时，或者None表示超时未收到连接</span></div><div class="line">        what_ready = select.select([self.sock], [], [], self.timeout)  <span class="comment"># 超时时间单位s</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        select.select(rlist, wlist, xlist[, timeout])</div><div class="line">        wait until ready for read / write / exceptional condition</div><div class="line">        The return value is a triple of lists of objects that are ready: subsets of the first three arguments.</div><div class="line">         When the time-out is reached without a file descriptor becoming ready, three empty lists are returned.</div><div class="line">        '''</div><div class="line">        <span class="keyword">if</span> what_ready[<span class="number">0</span>] == []:<span class="comment">#表明timeout了，程序返回即可</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        rec_packet, addr = self.sock.recvfrom(<span class="number">1024</span>)<span class="comment"># The return value is a pair (message, address)</span></div><div class="line">        icmp_header = rec_packet[<span class="number">20</span>: <span class="number">28</span>] <span class="comment">#8bit的报文头部</span></div><div class="line">        ip_type, code, checksum, packet_ID, sequence = struct.unpack(<span class="string">"bbHHh"</span>, icmp_header)</div><div class="line">        print(<span class="string">'ICMP响应报文头部信息————ICMP类型:&#123;&#125;,代码:&#123;&#125;,校验和:&#123;&#125;,id:&#123;&#125;,序号:&#123;&#125;'</span>.format(ip_type,code,checksum,packet_ID,sequence))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> packet_ID == ID <span class="keyword">and</span> ip_type==<span class="number">0</span>:</div><div class="line">            bytes_In_double = struct.calcsize(<span class="string">"d"</span>)</div><div class="line">            time_sent = struct.unpack(<span class="string">"d"</span>, rec_packet[<span class="number">28</span>:<span class="number">28</span> + bytes_In_double])[<span class="number">0</span>]  <span class="comment">#把发送时候添加的时间取出来</span></div><div class="line">            <span class="keyword">return</span> time.time()-time_sent</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span><span class="params">(self)</span>:</span></div><div class="line">        ID=os.getpid()&amp;<span class="number">0xFFFF</span> <span class="comment">#把进程id当做报文id</span></div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(self.times):</div><div class="line">            self.send_ping(ID)</div><div class="line">            delay=self.get_receive(ID)</div><div class="line">            <span class="keyword">if</span> delay:</div><div class="line">                print(<span class="string">'用时&#123;&#125;秒收到响应'</span>.format(delay))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'&#123;&#125;秒内未收到回复，站点可能关闭'</span>.format(self.timeout))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    t=Ping(<span class="string">'www.baidu.com'</span>)</div><div class="line">    t.ping()</div></pre></td></tr></table></figure>
<h3 id="程序运行-3"><a href="#程序运行-3" class="headerlink" title="程序运行"></a>程序运行</h3><p>运行截图如下:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com//ICMP/2017-06-02_194750.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="题目要求-4"><a href="#题目要求-4" class="headerlink" title="题目要求"></a>题目要求</h3><blockquote>
<p>通过TCP协议以及UDP协议，判断端口是否开启</p>
</blockquote>
<h3 id="设计思路-4"><a href="#设计思路-4" class="headerlink" title="设计思路"></a>设计思路</h3><ol>
<li>端口扫描程序调用socket()函数建立套接字，SOCK_STREAM表示流式套接字</li>
<li>调用connect()函数请求与目的主机的指定端口建立连接</li>
<li>根据TCP连接是否成功建立，判断目的主机中的端口状态 </li>
</ol>
<hr>
<ol>
<li>端口扫描程序调用socket()函数建立套接字，SOCK_DGRAM表示数据报套接字</li>
<li>调用ioctlsocket()函数将套接字设置为非阻塞</li>
<li>调用sendto()函数发送UDP数据包</li>
<li>调用recvfrom()函数接收返回的错误码，判断目的主机的端口状态 </li>
</ol>
<p><strong>最后一次实验比较简单，实现无非就是tcp去尝试connect，连上就是开启中；udp就是发送个报文，等着收响应信息。但是，对于后者好多服务器不会响应udp报文，处于安全考虑，它们甚至ICMP报文都不会回复，所以udp端口扫描程序这里实现的效果并不好。</strong></p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="comment">#用tcp的connect做端口扫描</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(address)</span>:</span></div><div class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="keyword">as</span> s:</div><div class="line">        <span class="comment"># s.settimeout(1) #设置超时时间，不设置就是阻塞模式，否则就是非阻塞模式，超时未响应会引发socket.timeout异常</span></div><div class="line">        <span class="keyword">if</span> s.connect_ex((address[<span class="number">0</span>],address[<span class="number">1</span>]))==<span class="number">0</span>: <span class="comment">#和connect一样，不过连接失败不会引发异常而是返回一个指示器，为0表示连接成功</span></div><div class="line">            print(<span class="string">'port &#123;&#125; open'</span>.format(address[<span class="number">1</span>]))</div><div class="line">            <span class="keyword">return</span> <span class="string">'port &#123;&#125; open'</span>.format(address[<span class="number">1</span>])</div><div class="line">        <span class="comment"># else:</span></div><div class="line">        <span class="comment">#     print('port &#123;&#125; close'.format(address[1]))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcp_scan</span><span class="params">(host)</span>:</span></div><div class="line">    p=ProcessPoolExecutor(max_workers=<span class="number">8</span>)</div><div class="line">    p.map(scan,[(host,port) <span class="keyword">for</span> port <span class="keyword">in</span> [<span class="number">53</span>,<span class="number">80</span>,<span class="number">8080</span>,<span class="number">3128</span>,<span class="number">8081</span>,<span class="number">9080</span>,<span class="number">1080</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">443</span>,<span class="number">69</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">110</span>,<span class="number">7001</span>,<span class="number">9090</span>,<span class="number">3389</span>,<span class="number">1521</span>,<span class="number">1158</span>,<span class="number">2100</span>,<span class="number">1433</span>]],chunksize=<span class="number">100</span>) <span class="comment">#把任务分块提交</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tcp_scan(<span class="string">'127.0.0.1'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">udp_scan</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,hostname,timeout=<span class="number">3</span>)</span>:</span></div><div class="line">        self.host=hostname</div><div class="line">        self.sock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</div><div class="line">        self.sock.settimeout(timeout)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> [<span class="number">53</span>]:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                self.sock.sendto(<span class="string">b""</span>,(socket.gethostbyname(self.host),port))</div><div class="line">                self.sock.recvfrom(<span class="number">256</span>)</div><div class="line">            <span class="keyword">except</span> socket.timeout:</div><div class="line">                print(<span class="string">'端口&#123;&#125;没有回复udp报文'</span>.format(port))</div><div class="line">                self.icmp_receive(port)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">icmp_receive</span><span class="params">(self,port)</span>:</span></div><div class="line">        icmp=socket.socket(socket.AF_INET,socket.SOCK_RAW,socket.IPPROTO_ICMP)</div><div class="line">        icmp.settimeout(<span class="number">5</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            recPacket, addr = icmp.recvfrom(<span class="number">256</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'端口&#123;&#125;没有回复ICMP报文'</span>.format(port))</div><div class="line">            <span class="keyword">return</span></div><div class="line">        icmpHeader = recPacket[<span class="number">20</span>:<span class="number">28</span>]  <span class="comment">#IP数据包头部20个字节</span></div><div class="line">        head_type, code, checksum, packetID, sequence = struct.unpack(<span class="string">"bbHHh"</span>, icmpHeader)</div><div class="line">        print(<span class="string">'ICMP报文类型:&#123;&#125;,返回代码:&#123;&#125;'</span>.format(head_type,code))</div><div class="line">        icmp.close()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    t=udp_scan(<span class="string">'www.baidu.com'</span>)</div><div class="line">    t.scan()</div></pre></td></tr></table></figure>
<h3 id="程序运行-4"><a href="#程序运行-4" class="headerlink" title="程序运行"></a>程序运行</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-06-02_195713.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-06-02_195808.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[proc文件系统]]></title>
      <url>https://www.prime666.com/2017/06/01/proc%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>关于/proc文件系统的读写和创建操作。</p>
<a id="more"></a>
<h1 id="proc文件系统"><a href="#proc文件系统" class="headerlink" title="proc文件系统"></a>proc文件系统</h1><p><strong>/proc</strong>文件系统是一个虚拟文件系统，每个文件都绑定于一个内核函数，用户读取其中的文件时，该函数动态生成文件内容。例如，<code>/proc/modules</code>列出的就是当前载入模块的列表。所有使用<strong>/proc</strong>的模块必须包含<code>&lt;linux/proc_fs.h&gt;</code>。</p>
<p>/proc 文件系统并不是 GNU/Linux 系统中的惟一一个虚拟文件系统。在这种系统上，sysfs 是一个与 /proc 类似的文件系统，但是它的组织更好（从 /proc 中学习了很多教训）。不过 /proc 已经确立了自己的地位，因此即使 sysfs 与 /proc 相比有一些优点，/proc 也依然会存在。还有一个 debugfs 文件系统，不过（顾名思义）它提供的更多是调试接口。debugfs 的一个优点是它将一个值导出给用户空间非常简单（实际上这不过是一个调用而已）。</p>
<h2 id="proc目录概述"><a href="#proc目录概述" class="headerlink" title="proc目录概述"></a>proc目录概述</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-06-01_184557.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如上所示是该文件夹下的一个快照。其文件解释如下：</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cmdline：系统启动时输入给内核命令行参数 </div><div class="line">cpuinfo：CPU的硬件信息 (型号, 家族, 缓存大小等)  </div><div class="line">devices：主设备号及设备组的列表，当前加载的各种设备（块设备/字符设备） </div><div class="line">dma：使用的DMA通道 </div><div class="line">filesystems：当前内核支持的文件系统，当没有给 mount(1) 指明哪个文件系统的时候， mount(1) 就依靠该文件遍历不同的文件系统</div><div class="line">interrupts ：中断的使用及触发次数，调试中断时很有用 </div><div class="line">ioports I/O：当前在用的已注册 I/O 端口范围 </div><div class="line">kcore：该伪文件以 core 文件格式给出了系统的物理内存映象(比较有用)，可以用 GDB 查探当前内核的任意数据结构。该文件的总长度是物理内存 (RAM) 的大小再加上 4KB</div><div class="line">kmsg：可以用该文件取代系统调用 syslog(2) 来记录内核日志信息，对应dmesg命令</div><div class="line">kallsym：内核符号表，该文件保存了内核输出的符号定义, modules(X)使用该文件动态地连接和捆绑可装载的模块</div><div class="line">loadavg：负载均衡，平均负载数给出了在过去的 1、 5,、15 分钟里在运行队列里的任务数、总作业数以及正在运行的作业总数。</div><div class="line">locks：内核锁 。</div><div class="line">meminfo物理内存、交换空间等的信息，系统内存占用情况，对应df命令。</div><div class="line">misc：杂项 。</div><div class="line">modules：已经加载的模块列表，对应lsmod命令 。</div><div class="line">mounts：已加载的文件系统的列表，对应mount命令，无参数。</div><div class="line">partitions：系统识别的分区表 。</div><div class="line">slabinfo：sla池信息。</div><div class="line">stat：全面统计状态表，CPU内存的利用率等都是从这里提取数据。对应ps命令。</div><div class="line">swaps：对换空间的利用情况。 </div><div class="line">version：指明了当前正在运行的内核版本。</div></pre></td></tr></table></figure>
<hr>
<h2 id="常用基本函数介绍"><a href="#常用基本函数介绍" class="headerlink" title="常用基本函数介绍"></a>常用基本函数介绍</h2><p>  proc文件系统属性文件和驱动中创建的设备属性文件很相识，它们都可以达到同样的目的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> proc_dir_entry &#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *name;			<span class="comment">// virtual file name</span></div><div class="line">	<span class="keyword">mode_t</span> mode;				<span class="comment">// mode permissions</span></div><div class="line">	<span class="keyword">uid_t</span> uid;				<span class="comment">// File's user id</span></div><div class="line">	<span class="keyword">gid_t</span> gid;				<span class="comment">// File's group id</span></div><div class="line">	<span class="keyword">struct</span> inode_operations *proc_iops;	<span class="comment">// Inode operations functions</span></div><div class="line">	<span class="keyword">struct</span> file_operations *proc_fops;	<span class="comment">// File operations functions</span></div><div class="line">	<span class="keyword">struct</span> proc_dir_entry *parent;		<span class="comment">// Parent directory</span></div><div class="line">	...</div><div class="line">	<span class="keyword">read_proc_t</span> *read_proc;			<span class="comment">// /proc read function</span></div><div class="line">	<span class="keyword">write_proc_t</span> *write_proc;		<span class="comment">// /proc write function</span></div><div class="line">	<span class="keyword">void</span> *data;				<span class="comment">// Pointer to private data</span></div><div class="line">	<span class="keyword">atomic_t</span> count;				<span class="comment">// use count</span></div><div class="line">	...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>创建目录</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> proc_dir_entry *<span class="title">proc_mkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">struct</span> proc_dir_entry *parent)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>创建proc文件</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> proc_dir_entry *<span class="title">create_proc_entry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">mode_t</span> mode,<span class="keyword">struct</span> proc_dir_entry *parent)</span></span>;</div></pre></td></tr></table></figure>
<p>create_proc_entry函数用于创建一个一般的proc文件，其中<strong>name是文件名</strong>，比如“hello”，<strong>mode是文件权限</strong>，比如<code>0666</code>就是<code>rwrwrw</code>，<strong>parent是要创建的proc文件的父目录。</strong></p>
<p>parent 参数可以为 NULL（表示 /proc 根目录），也可以是很多其他值，这取决于我们希望将这个文件放到什么地方。下面列出了可以使用的其他一些父 <code>proc_dir_entry</code>，以及它们在这个文件系统中的位置。</p>
<table>
<thead>
<tr>
<th>proc_dir_entry</th>
<th>在文件系统中的位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>proc_root_fs</td>
<td>/proc</td>
</tr>
<tr>
<td>proc_net</td>
<td>/proc/net</td>
</tr>
<tr>
<td>proc_bus</td>
<td>/proc/bus</td>
</tr>
<tr>
<td>proc_root_driver</td>
<td>/proc/driver</td>
</tr>
</tbody>
</table>
<ul>
<li>删除文件/目录</li>
<li>​</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_dir_entry</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">struct</span> proc_dir_entry *parent)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>proc文件实际上是一个叫做proc_dir entry的struct(定义在proc_fs.h)，该struct中有int read_proc和int write_proc两个元素，要实现proc的文件的读写就要给这两个元素赋值。但这里不是简单地将一个整数赋值过去就行了，需要实现两个回调函数。在用户或应用程序访问该proc文件时，就会调用这个函数，实现这个函数时只需将想要让用户看到的内容放入page即可。</strong></p>
<ol>
<li><p>写回调函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*proc_write)( <span class="keyword">struct</span> file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buff, <span class="keyword">unsigned</span> <span class="keyword">long</span> len, <span class="keyword">void</span> *data );</div></pre></td></tr></table></figure>
<p>filp 参数实际上是一个打开文件结构（我们可以忽略这个参数）。<strong>buff 参数是传递给您的字符串数据</strong>。缓冲区地址实际上是一个用户空间的缓冲区，因此我们不能直接读取它( 得用<code>copy_from_user</code> 函数)。<strong>len 参数定义了在 buff 中有多少数据要被写入</strong>。data 参数是一个指向私有数据的指针。</p>
</li>
<li><p>读回调函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*proc_read)(<span class="keyword">char</span> *page, <span class="keyword">char</span> **start,  <span class="keyword">off_t</span> off, <span class="keyword">int</span> count,  <span class="keyword">int</span> *eof, <span class="keyword">void</span> *data)；</div></pre></td></tr></table></figure>
<p><strong><code>page</code> 参数是这些数据写入到的位置</strong>，其中 <code>count</code> 定义了可以写入的最大字符数。在返回多页数据（通常一页是 4KB）时，我们需要使用 <code>start</code> 和 <code>off</code> 参数。当所有数据全部写入之后，就需要设置 <code>eof</code>（文件结束参数）。与 <code>write</code> 类似，<code>data</code> 表示的也是私有数据。<strong>此处提供的 <code>page</code> 缓冲区在内核空间中。因此，我们可以直接写入，而不用调用 <code>copy_to_user</code>。</strong></p>
</li>
<li><p>其它可能用到的函数原型</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Create a directory in the proc filesystem */</span></div><div class="line"><span class="function"><span class="keyword">struct</span> proc_dir_entry *<span class="title">proc_mkdir</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">struct</span> proc_dir_entry *parent )</span></span>;</div><div class="line"><span class="comment">/* Create a symlink in the proc filesystem */</span></div><div class="line"><span class="function"><span class="keyword">struct</span> proc_dir_entry *<span class="title">proc_symlink</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">struct</span> proc_dir_entry *parent,<span class="keyword">const</span> <span class="keyword">char</span> *dest )</span></span>;</div><div class="line"><span class="comment">/* Create a proc_dir_entry with a read_proc_t in one call */</span></div><div class="line"><span class="function"><span class="keyword">struct</span> proc_dir_entry *<span class="title">create_proc_read_entry</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">mode_t</span> mode,</span></span></div><div class="line">                                                  <span class="keyword">struct</span> proc_dir_entry *base,</div><div class="line">                                                  <span class="keyword">read_proc_t</span> *read_proc,</div><div class="line">                                                  <span class="keyword">void</span> *data );</div><div class="line"><span class="comment">/* Copy buffer to user-space from kernel-space */</span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">copy_to_user</span><span class="params">( <span class="keyword">void</span> __user *to,</span></span></div><div class="line">                              <span class="keyword">const</span> <span class="keyword">void</span> *from,</div><div class="line">                              <span class="keyword">unsigned</span> <span class="keyword">long</span> n );</div><div class="line"><span class="comment">/* Copy buffer to kernel-space from user-space */</span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">copy_from_user</span><span class="params">( <span class="keyword">void</span> *to,</span></span></div><div class="line">                                <span class="keyword">const</span> <span class="keyword">void</span> __user *from,</div><div class="line">                                <span class="keyword">unsigned</span> <span class="keyword">long</span> n );</div><div class="line"><span class="comment">/* Allocate a 'virtually' contiguous block of memory */</span></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">vmalloc</span><span class="params">( <span class="keyword">unsigned</span> <span class="keyword">long</span> size )</span></span>;</div><div class="line"><span class="comment">/* Free a vmalloc'd block of memory */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vfree</span><span class="params">( <span class="keyword">void</span> *addr )</span></span>;</div><div class="line"><span class="comment">/* Export a symbol to the kernel (make it visible to the kernel) */</span></div><div class="line">EXPORT_SYMBOL( symbol );</div><div class="line"><span class="comment">/* Export all symbols in a file to the kernel (declare before module.h) */</span></div><div class="line">EXPORT_SYMTAB</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span> <span class="comment">//proc相关</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/vmalloc.h&gt;</span><span class="comment">//vmalloc需要</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span> <span class="comment">//模块参数</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/stat.h&gt;</span> <span class="comment">//关于模块参数权限问题</span></span></div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"A poor program."</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"prime"</span>);</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> BUFFER_SIZE;</div><div class="line"></div><div class="line">module_param(BUFFER_SIZE,uint,S_IRUGO);</div><div class="line"></div><div class="line"><span class="keyword">struct</span> proc_dir_entry *proc_entry;</div><div class="line"></div><div class="line"><span class="comment">/*proc文件系统的重要结构体。</span></div><div class="line">name： 节点的名称，也就是该proc文件的名称</div><div class="line">mode： 文件的类型和权限</div><div class="line">nlink：    该文件的链接数</div><div class="line">read_proc： 读操作函数</div><div class="line">write_proc：写操作函数</div><div class="line">owner：  该文件的拥有者模块 </div><div class="line">parent：  创建节点的父目录</div><div class="line">*/</div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span>* cookie;<span class="comment">//指向分配的空间。</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> next_read;<span class="comment">//下一个可以读的字节</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> next_write;<span class="comment">//下一个可以写的字节</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">ssize_t</span> my_write( <span class="keyword">struct</span> file *filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buff,<span class="keyword">unsigned</span> <span class="keyword">long</span> len, <span class="keyword">void</span> *data)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> space_available = (BUFFER_SIZE-next_write)+<span class="number">1</span>;<span class="comment">//还可以使用的空间大小</span></div><div class="line">    <span class="keyword">if</span> (len &gt; space_available) &#123;</div><div class="line">      printk(KERN_INFO <span class="string">"prime: cookie is full!\n"</span>);</div><div class="line">      len=space_available;<span class="comment">//超出就截断</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (copy_from_user(&amp;cookie[next_write], buff, len)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    next_write+= len;</div><div class="line">    cookie[next_write<span class="number">-1</span>] = <span class="number">0</span>; <span class="comment">//添加换行?</span></div><div class="line">    printk(KERN_INFO <span class="string">"write%ldbytes"</span>,len);</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_read</span><span class="params">( <span class="keyword">char</span> *page, <span class="keyword">char</span> **start, <span class="keyword">off_t</span> off,<span class="keyword">int</span> count, <span class="keyword">int</span> *eof, <span class="keyword">void</span> *data )</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> len;</div><div class="line">  <span class="keyword">if</span> (off &gt; <span class="number">0</span>) &#123;</div><div class="line">    *eof = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (next_read &gt;= next_write) next_read = <span class="number">0</span>;<span class="comment">//读的指针超过写的，读指针归零</span></div><div class="line">  len = <span class="built_in">sprintf</span>(page, <span class="string">"%s\n"</span>, &amp;cookie[next_read]);<span class="comment">//sprintf的返回值就是写了多少字节</span></div><div class="line">  next_read += len;</div><div class="line">  printk(KERN_INFO <span class="string">"read%dbytes"</span>,len);</div><div class="line">  <span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">init_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	cookie=(<span class="keyword">char</span>*)vmalloc(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*BUFFER_SIZE);</div><div class="line">	<span class="keyword">if</span> (!cookie)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(cookie,<span class="number">0</span>,BUFFER_SIZE*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">//清空数据</span></div><div class="line">		proc_entry=create_proc_entry(<span class="string">"prime"</span>,<span class="number">0666</span>,<span class="literal">NULL</span>);<span class="comment">//创建文件</span></div><div class="line">		<span class="comment">/*原型struct proc_dir_entry *create_proc_entry( const char *name,  mode_t mode,  </span></div><div class="line">                struct proc_dir_entry *parent );</div><div class="line">		*/</div><div class="line">		<span class="keyword">if</span> (proc_entry==<span class="literal">NULL</span>)</div><div class="line">		&#123;</div><div class="line">			printk(KERN_INFO <span class="string">"prime: Couldn't create proc entry\n"</span>);</div><div class="line">			vfree(cookie);</div><div class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">//proc_entry-&gt;owner=THIS_MODULE;</span></div><div class="line">			proc_entry-&gt;read_proc=my_read;<span class="comment">//回调接口</span></div><div class="line">			proc_entry-&gt;write_proc=my_write;</div><div class="line">			next_read=<span class="number">0</span>;</div><div class="line">			next_write=<span class="number">0</span>;</div><div class="line">			printk(KERN_INFO <span class="string">"prime: Module loaded successful.\n"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">exit_my_module</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	remove_proc_entry(<span class="string">"prime"</span>,<span class="literal">NULL</span>);</div><div class="line">	printk(KERN_INFO <span class="string">"prime: Module unloaded.\n"</span>);</div><div class="line">&#125;</div><div class="line">module_init(init_my_module);</div><div class="line">module_exit(exit_my_module);</div></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>随着对/proc代码的整理，现在出现了<code>seq_file</code>接口，在新版本内核中，上述创建文件的方法也已被舍弃。引入了<strong>proc_create() </strong>方法。</p>
<p>以下是额外两篇博文，第二篇尤其要看看。</p>
<ol>
<li><a href="http://blog.csdn.net/hunanchenxingyu/article/details/8102956#" target="_blank" rel="noopener">部分</a></li>
<li><a href="http://blog.csdn.net/armwind/article/details/52261262" target="_blank" rel="noopener">点我</a></li>
</ol>
<h1 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h1><p>在加载模块时可以添加参数，它主要使用module_param宏定义来实现这一功能。</p>
<p>module_param的定义可以在<code>include/Linux/moduleparam.h</code>文件里面查看到。</p>
<h2 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module_param(name, type, perm);</div></pre></td></tr></table></figure>
<p>其中module_param是用来传递<strong>变量</strong>参数的，name是在模块中定义的变量名称，type是变量的类型，module_param支持传递的参数类型有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">bool：布尔型</div><div class="line"></div><div class="line">invbool：布尔型  invbool 类型颠倒了值, 所以真值变成 false, 反之亦然.</div><div class="line"></div><div class="line">charp ：字符指针值</div><div class="line"></div><div class="line">int：整形</div><div class="line"></div><div class="line">long：长整形</div><div class="line"></div><div class="line">short：短整形</div><div class="line"></div><div class="line">uint：无符号整形</div><div class="line"></div><div class="line">ulong：无符号长整形</div><div class="line"></div><div class="line">ushort：无符号短整形</div><div class="line"></div><div class="line">基本的变长整型值. 以 u 开头的是无符号值.</div></pre></td></tr></table></figure>
<p>perm 指定了在sysfs中相应文件的访问权限。访问权限与linux文件访问权限相同的方式管理，如0644。应当使用 <code>&lt;linux/stat.h&gt;</code> 中定义的值，它指定了在sysfs中相应文件的访问权限。当perm为0时，表示此参数不存在 sysfs文件系统下对应的文件节点。 否则, 模块被加载后，在/sys/module/ 目录下将出现以此模块名命名的目录, 带有给定的权限.。</p>
<p>下面是用法示例</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> int_var = <span class="number">0</span>;</div><div class="line">module_param(int_var, uint, S_IRUGO);</div><div class="line">insmod xxxx.ko int_var=x</div></pre></td></tr></table></figure>
<h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module_param_array(para , type , nump , perm)</div></pre></td></tr></table></figure>
<p>前面参数同上，指针nump指向一个整数，其值表示有多少个参数存放在数组para中（只要perm数组大小够大,在插入模块的时候,输入的参数个数会改变nump的值）。 para:参数数组; 数组的大小才是决定能输入多少个参数的决定因素。</p>
<p>典型用法:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> para[MAX_FISH];</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> n_para;</div><div class="line">module_param_array(para , <span class="keyword">int</span> , &amp;n_para , S_IRUGO); </div><div class="line">insmod xxxx.ko para=<span class="number">5</span>,<span class="number">1</span>,<span class="number">3.</span>..</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java IO]]></title>
      <url>https://www.prime666.com/2017/05/30/Java-IO/</url>
      <content type="html"><![CDATA[<p>IO类的小小总结</p>
<a id="more"></a>
<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="基本IO流"><a href="#基本IO流" class="headerlink" title="基本IO流"></a>基本IO流</h2><h3 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h3><p>输入流分为字节流和字符流，其<strong>抽象基类</strong>分别是<code>InputStream</code>和<code>Reader</code></p>
<p>其包含方法如下：</p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-30_214307.png" alt=""></p>
<p><img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-30_214431.png" alt=""></p>
<h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><p>输出流的同样分为字节流和字符流，其<strong>抽象基类</strong>分别是<code>OutputStream</code>和<code>Writer</code></p>
<p>方法如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-30_214452.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-30_214521.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<hr>
<p>上面就是基本的输入输出流的抽象基类，下面介绍一些常用的节点流（即与物理节点相关联）。</p>
<h2 id="节点流"><a href="#节点流" class="headerlink" title="节点流"></a>节点流</h2><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><ul>
<li>访问文件<code>FileInputStream</code></li>
<li>访问数组<code>ByteArrayInputStream</code></li>
<li>访问管道<code>PipedInputStream</code></li>
</ul>
<h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><ul>
<li>访问文件<code>FileOutputStream</code></li>
<li>访问数组<code>ByteArrayOutputStream</code></li>
<li>访问管道<code>PipedOutputStream</code></li>
</ul>
<h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><ul>
<li>访问文件<code>FileReader</code></li>
<li>访问数组<code>ByteArrayReader</code></li>
<li>访问管道<code>PipedReader</code></li>
</ul>
<h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><ul>
<li>访问文件<code>FileWriter</code></li>
<li>访问数组<code>ByteArrayWriter</code></li>
<li>访问管道<code>PipedWriter</code></li>
</ul>
<h2 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h2><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><table>
<thead>
<tr>
<th>字节输入流</th>
<th>字节输出流</th>
<th>字符输入流</th>
<th>字符输出流</th>
</tr>
</thead>
<tbody>
<tr>
<td>BufferedInputStream</td>
<td>BufferedOutputStream</td>
<td>BufferedReader</td>
<td>BufferedWriter</td>
</tr>
</tbody>
</table>
<p><code>BufferedReader</code>加入了<code>readLine()</code>方法，可以方便的一次读出一行字符。</p>
<h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><ul>
<li>字节输出流<code>PrintStream</code></li>
<li>字符输出流<code>PrintWriter</code></li>
</ul>
<p>平时常用的<code>System.out</code>就是<code>System</code>类中的一个静态成员，即<code>PrintStream</code>类的引用变量。</p>
<p>打印流也是一种处理流，可以理解为将原有输出进行格式化加工再输出。</p>
<p>在<code>System</code>中，也有三个静态方法用于重定向标准流：</p>
<ol>
<li><code>setErr(PrintStream err)</code>重定向标准错误流</li>
<li><code>setIn(InputStream in)</code>重定向标准输入流</li>
<li><code>setOut(PrintStream out)</code>重定向标准输出流</li>
</ol>
<p>特别说明:<strong>IO属于物理资源，JVM不会自动进行回收，所以需要自己显式调用<code>close</code>方法来关闭。在用处理流包装了底层结点流后，关闭时只需要关闭最上层的处理流即可，系统会自动关闭被该处理流包装的结点流</strong>。</p>
<h3 id="文件访问类"><a href="#文件访问类" class="headerlink" title="文件访问类"></a>文件访问类</h3><p><code>RandomAccessFile</code>是一个功能完备的文件内容访问类，其可随机访问文件内容，也只能读写文件。</p>
<p>打开模式分为如下情况：</p>
<ul>
<li><code>r</code>只读</li>
<li><code>rw</code>读写</li>
<li><code>rws</code>相对于<code>rw</code>，要求对文件内容或元数据的每个更新都同步写入底层设备</li>
<li><code>rwd</code>相对于<code>rw</code>,要求对文件内容的每个更新都同步写入到 底层设备</li>
</ul>
<p>其主要方法是:</p>
<ul>
<li>完全类似于<code>InputStream</code>中的三个<code>read</code>方法</li>
<li>完全类似 于<code>OutputStream</code>中的三个<code>write</code>方法</li>
<li>一系列的<code>readxxx</code>和<code>writexxx</code>方法</li>
<li>定位文件指针的<code>getFilePointer()</code></li>
<li>移动文件指针的<code>seek(long pos)</code></li>
</ul>
<p>特别说明:<strong>一般情况，包括上面所有的文件相关操作流，都是以一种覆盖的形式写入。这里的<code>RandomAccessFile</code>也不例外，如果想在中间插入，应该先保存后面的数据，再重新写入。如果只是末尾追加就直接移动指针好了。</strong></p>
<h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>序列化是指把java对象转换成字节序列，反序列化反其道而行之。</p>
<p>为了让一个类可以序列化，必须实现以下两个接口之一：</p>
<ul>
<li><code>Serializable</code></li>
<li><code>Externalizable</code></li>
</ul>
<p>一般前者使用较简单，其只是一个标记型接口，实现它不需要做任何额外的工作。</p>
<p>序列化操作步骤如下:</p>
<ol>
<li>创建<code>ObjectOutputStream</code>，其是一个处理流。</li>
<li>调用它的<code>WriteObject（）</code>方法即可。</li>
</ol>
<p>反序列化步骤:</p>
<ol>
<li>创建<code>ObjectInputStream</code>，其是一个处理流。</li>
<li>调用它的<code>readObject()</code>方法即可。</li>
</ol>
<p>序列化只会序列化<code>non-transient</code> 和 <code>non-static</code> fields。</p>
<p>注意:<strong>序列化的顺序应该和反序列化的顺序相同。当一个可序列化类有多个父类时，这些父类要么有无参数的构造器，要么也是可序列化的，否则会引发<code>InvalidClassException</code>异常。如果父类不是可序列化的只是有无参数构造器，那么父类中定义的变量不会序列化到二进制流中（这时由子类负责保存和恢复状态，通常情况下，该类的字段是可访问的（public，package或protected），或者可以使用get和set方法来恢复状态。）。同样，当一个对象某些实例变量引用其它对象时，也会把它们序列化（递归序列化）。</strong></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[typora]]></title>
      <url>https://www.prime666.com/2017/05/30/typora/</url>
      <content type="html"><![CDATA[<p><strong>转载</strong>了一下typora的用法。</p>
<a id="more"></a>
<h1 id="Typora-For-Markdown-语法"><a href="#Typora-For-Markdown-语法" class="headerlink" title="Typora For Markdown 语法"></a>Typora For Markdown 语法</h1><p>转载自<a href="http://www.jianshu.com/p/092de536d948" target="_blank" rel="noopener">简书</a></p>
<p>[TOC]</p>
<h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹Tex命令，例如：<code>$lim_{x \to \infty} \ exp(-x)=0$</code>将产生如下的数学表达式：</p>
<p>$\lim_{x \to \infty} \exp(-x)=0$</p>
<h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h3><p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生H~2~O, 即水的分子式。</p>
<h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式y^2^ = 4</p>
<h3 id="插入表情-happy"><a href="#插入表情-happy" class="headerlink" title="插入表情:happy:"></a>插入表情:happy:</h3><p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>用HTML的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>使用`包裹的内容将会以代码样式显示，例如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">使用`printf()`</div></pre></td></tr></table></figure>
<p>则会产生<code>printf()</code>样式。</p>
<ul>
<li><p>输入<code>~~~</code>或者<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">-</div></pre></td></tr></table></figure></p>
<p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Class HelloWorld&#123;</div><div class="line">  System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">将会产生</div><div class="line"></div><div class="line">```java</div><div class="line">public Class HelloWorld&#123;</div><div class="line">  System.out.println(&quot;Hello World!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**使用两个*号强调内容**</div><div class="line">__使用两个下划线强调内容__</div></pre></td></tr></table></figure>
<p>将会输出</p>
<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\*</div></pre></td></tr></table></figure>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>
<p><img src="http://typora.io/img/drag-img.gif" alt="drag and drop image"></p>
<p>​</p>
<p>​</p>
</li>
</ul>
<h3 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h3><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:<www.baidu.com>.</www.baidu.com></p>
<p>如果是标准的url，则会自动产生连接，例如:www.google.com</p>
<h3 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>
<hr>
<h3 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">某些人用过了才知道[^注释]</div><div class="line">[^注释]:Somebody that I used to know.</div></pre></td></tr></table></figure>
<p>将产生：</p>
<p>某些人用过了才知道[^注释]</p>
<p>[^注释]: Somebody that I used to know.</p>
<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|姓名|性别|毕业学校|工资|</div><div class="line">|:---|:---:|:---:|---:|</div><div class="line">|杨洋|男|重庆交通大学|3200|</div><div class="line">|峰哥|男|贵州大学|5000|</div><div class="line">|坑货|女|北京大学|2000|</div></pre></td></tr></table></figure>
<p>将产生:</p>
<table>
<thead>
<tr>
<th style="text-align:left">姓名</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">毕业学校</th>
<th style="text-align:right">工资</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">杨洋</td>
<td style="text-align:center">男</td>
<td style="text-align:center">重庆交通大学</td>
<td style="text-align:right">3200</td>
</tr>
<tr>
<td style="text-align:left">峰哥</td>
<td style="text-align:center">男</td>
<td style="text-align:center">贵州大学</td>
<td style="text-align:right">5000</td>
</tr>
<tr>
<td style="text-align:left">坑货</td>
<td style="text-align:center">女</td>
<td style="text-align:center">北京大学</td>
<td style="text-align:right">2000</td>
</tr>
</tbody>
</table>
<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>
<h3 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$</div></pre></td></tr></table></figure>
<p>将会产生:</p>
<p> $$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$</p>
<h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- [ ] 吃饭</div><div class="line">- [ ] 逛街</div><div class="line">- [ ] 看电影</div><div class="line">- [ ] 约泡</div></pre></td></tr></table></figure>
<ul>
<li><p>[x] 吃饭</p>
<pre><code>​
</code></pre></li>
<li><p>[x] 逛街</p>
<pre><code>​
</code></pre></li>
<li><p>[x] 看电影</p>
<pre><code>​
</code></pre></li>
<li><p>[x] 约泡</p>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">**无序的列表**</div><div class="line">* tfboys</div><div class="line">* 杨洋</div><div class="line">* 我爱你</div></pre></td></tr></table></figure>
<p><strong>无序的列表</strong></p>
<ul>
<li>tfboys</li>
<li>杨洋</li>
<li>我爱你</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">**有序的列表**</div><div class="line">1. 苹果</div><div class="line">6. 香蕉</div><div class="line">10. 我都不喜欢</div></pre></td></tr></table></figure>
<p><strong>有序的列表</strong></p>
<ol>
<li>苹果</li>
<li>香蕉</li>
<li>我都不喜欢</li>
</ol>
<h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;这是一个块引用！</div></pre></td></tr></table></figure>
<p>将产生：</p>
<blockquote>
<p>这是一个块引用！</p>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p>
]]></content>
      
        <categories>
            
            <category> 效率工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基本语法]]></title>
      <url>https://www.prime666.com/2017/05/30/Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>java基本语法概述，类比c++。</p>
<p>前言：java是纯面向对象的编程语言，这意味着所有的函数都是属于某个类的方法（c++称作成员函数），因此java中的 main方法必须有一个外壳类且main方法必须是public和static的。</p>
<a id="more"></a>
<h1 id="Java基本语法and错误笔记"><a href="#Java基本语法and错误笔记" class="headerlink" title="Java基本语法and错误笔记"></a>Java基本语法and错误笔记</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>java有三种注释形式，前两种<code>/* */</code>和<code>//</code>完全类似c++自不必再言，第三种是<code>/**       */</code>会生成文档，应该和python的文档差不多。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><strong>java中整型的范围与运行java代码的机器无关</strong>（这一点比c/c++强喽），整型有：</p>
<table>
<thead>
<tr>
<th>int</th>
<th>short</th>
<th>long</th>
<th>byte</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>2</td>
<td>8</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>长整型后缀L，十六进制前缀0x，八进制前缀0，二进制前缀0b。数字字面量可以加下划线如<code>1_000_000</code>只是为了方便读，编译器自动忽略它们。<strong>java没有任何无符号类型。</strong></p>
<h3 id="浮点类型："><a href="#浮点类型：" class="headerlink" title="浮点类型："></a>浮点类型：</h3><table>
<thead>
<tr>
<th>float</th>
<th>double</th>
</tr>
</thead>
<tbody>
<tr>
<td>4</td>
<td>8</td>
</tr>
</tbody>
</table>
<p>float类型后缀F，没有默认是double，也可以加后缀D表示double。常量Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY、Double.NaN分别表示正无穷大、负无穷大和不是一个数字。可以用Double.isNaN()判断是不是非数值，不能用<code>==</code>因为所有非数值的值都认为是不相同的。</p>
<h3 id="布尔boolean类型："><a href="#布尔boolean类型：" class="headerlink" title="布尔boolean类型："></a>布尔boolean类型：</h3><p>和c++一样两个值true和false，但是<strong>整型值和布尔值之间不能进行相互转换。</strong>c++中数值或指针可以代替boolean值。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>用关键字<code>final</code>标识一个数值变量，表示这个变量只能被赋值一次，java中<code>final</code>如果修饰引用变量，代表这个引用变量的<em>指向不能变，但是内容可以变</em>！</p>
<p>建议常量名全大写。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>这部分和c++很像，&amp;与、|或、^异或、~非，<code>&gt;&gt;</code>右移和<code>&lt;&lt;</code>左移，<code>&gt;&gt;&gt;</code>用0填充高位，<code>&gt;&gt;</code>用符号位填充高位。这些位运算符都工作在位模式下，操作的是补码。移位只会在1到32或64之间，多于这个区间的会先求余，取决于操作数是long还是int。左移是乘，右移是除。</p>
<h3 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h3><p>Math类有很多方法，可以用于计算。数值类型之间会发生自动转换，当然也可以强制类型转换：比如<code>（int）x</code>。如果想对浮点数求其最接近的整数，可以用<code>Math.round(x)</code>，返回的结果是long类型。</p>
<h2>字符串</h2>

<p>java中没有字符串类型，只有一个预定义类String。这个类有很多成员函数可以完成各种操作，比如substring求子串。String类重载了<code>+</code>运算符，java本身不支持运算符重载，这也是唯一的一个。String本质上算是一个不可变对象，类比python的字符串。==不能用于判断字符串相等，意为判断两个字符串是否在同一位置上，应该用equals（）。此外，compareTo方法与c的strcmp一样。</p>
<p>注意，空串“”是长度为0的字符串，<code>str.length==0且str.equals(&quot;&quot;)</code></p>
<p>如果需要由较短的字符串构建字符串，那么每次连接字符串耗时又浪费空间。可以用StringBuild类。</p>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">study</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</div><div class="line">        System.out.println(<span class="string">"your name?"</span>);</div><div class="line">        String name=in.nextLine();</div><div class="line">        System.out.println(<span class="string">"your age"</span>);</div><div class="line">        <span class="keyword">int</span> age=in.nextInt();</div><div class="line">        System.out.print(<span class="string">"hello "</span>+name+<span class="string">"your age is "</span>+age);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过控制台输入，需要构造一个Scanner对象，并且与标准输入流<code>System.in</code>进行关联。<em>Scanner类定义在java.util包中</em>。</p>
<h3 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h3><p>要对文件进行读取，可以用一个File对象构造一个Scanner对象。<br><code>Scanner in=new Scanner(new File(&quot;e:\\hehe.txt&quot;));</code><br>写文件需要构造一个PrintWriter对象，如下：<br><code>PrintWriter out=new PrintWriter(&quot;hehe.txt&quot;);</code></p>
<h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><p>大部分和c++相同，只陈述不同的部分。</p>
<h3 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h3><p>java不能在嵌套的两个块中声明同名的变量，虽然在c++中会内部屏蔽外部。</p>
<h3 id="中断控制语句"><a href="#中断控制语句" class="headerlink" title="中断控制语句"></a>中断控制语句</h3><p>java中break和continue除了像c++一样使用之外，还可以加标签。<br>​    </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">label:</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(condition) <span class="keyword">break</span> label;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果break语句执行，会跳转到这里即标签的语句块末尾。continue会跳转到和标签匹配的循环首部。</span></div></pre></td></tr></table></figure>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>​<br>java中有一个for循环形式如下：<br>​<br><code>for（variable:collection） statement</code><br>定义一个变量用于暂存集合中的每一个元素并执行相应的语句，collection必须是数组或实现了Iterable接口的类对象。这种形式可以让你不必操心边界问题，c++11也有这种。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建一个数组需要和创建对象一样用new操作符，如果不进行初始化，数字数组所有元素都初始化为0，boolean数组的元素会初始化为false，对象数组的元素则初始化为null。</p>
<p><code>int[] a=new int[10]</code></p>
<p>java创建数组变量时不能只能大小，即<code>int a[10]</code>这种是错误的！</p>
<p>java和c++一样，对于数组来说没有多维数组，二维数组只是一维数组的数组，而且不同维度长度可以变化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] a=&#123;&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">8</span>&#125;,&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] e:a)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s:e)</div><div class="line">        System.out.print(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一些错误记录"><a href="#一些错误记录" class="headerlink" title="一些错误记录"></a>一些错误记录</h2><h3 id="关于包装类"><a href="#关于包装类" class="headerlink" title="关于包装类"></a>关于包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> 马源 14130110069 email:1977786930@qq.com on 2017/5/30.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t1</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Integer n1=<span class="keyword">new</span> Integer(<span class="number">47</span>);</div><div class="line">        Integer n2=<span class="keyword">new</span> Integer(<span class="number">47</span>);</div><div class="line">        out.println(n1==n2);</div><div class="line"></div><div class="line">        Integer a1=<span class="number">47</span>;</div><div class="line">        Integer a2=<span class="number">47</span>;</div><div class="line">        out.println(a1==a2);</div><div class="line"></div><div class="line">        Integer b1=<span class="number">128</span>;</div><div class="line">        Integer b2=<span class="number">128</span>;</div><div class="line">        out.println(b1==b2);</div><div class="line"></div><div class="line">        Value v1=<span class="keyword">new</span> Value();</div><div class="line">        Value v2=<span class="keyword">new</span> Value();</div><div class="line">        v1.i=v2.i=<span class="number">100</span>;</div><div class="line">        out.println(v1.equals(v2));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">输出：</div><div class="line">false</div><div class="line">true</div><div class="line">false</div><div class="line">false</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>很诧异？java 1.5引入的自动装箱机制，目的是提供基本类型包装类。但是，它们毕竟是对象而不是基本类型。</p>
<p>所以第一种情况，毋庸置疑，<code>==</code>对于引用变量永远是判断<strong>它们是不是指向同一个对象</strong>。它的构造器如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>对于第二种情况，如果看一下JDK源码也会了解，源码实现部分如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>简单说，java内部把<strong>[-128,127]</strong>这个范围内的数字进行缓存了，自动装箱这个范围的数字时总是从缓存中取出对应的对象，所以47不论创建多少次始终指向同一个对象。</p>
<p>最后的情况很显然，虽然调用了<code>equals</code>方法，但是它并没有被重写，还是<code>Object</code>对象的方法，即和<code>==</code>一样的效果。</p>
<p>ps：</p>
<p>java7开始为所有的包装类提供了静态的<code>compare(xxx val1,xxx val2)</code>方法，用他们比较即可。注意，<code>true</code>&gt;<code>false</code>。</p>
<p>更多方法查阅文档吧。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java多线程]]></title>
      <url>https://www.prime666.com/2017/05/28/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>关于java多线程机制的总结</p>
<a id="more"></a>
<h1 id="java多线程"><a href="#java多线程" class="headerlink" title="java多线程"></a>java多线程</h1><h2 id="创建多线程的方式"><a href="#创建多线程的方式" class="headerlink" title="创建多线程的方式"></a>创建多线程的方式</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><p>​    第一种是最简单的，只需要继承Thread类，并重写<code>run</code>方法即可，这个方法即时线程执行体。然后，创建实例调用<code>start</code>方法来让线程处于就绪状态。</p>
<p>这种方式<strong>主要问题在于，多个线程之间不能共享线程类的实例变量，因为它们是不同的实例。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过继承Thread类来创建线程类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i ;</div><div class="line">	<span class="comment">// 重写run方法，run方法的方法体就是线程执行体</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> ( ; i &lt; <span class="number">100</span> ; i++ )</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 当线程类继承Thread类时，直接使用this即可获取当前线程</span></div><div class="line">			<span class="comment">// Thread对象的实例方法getName()返回当前该线程的名字</span></div><div class="line">			<span class="comment">// 因此可以直接调用getName()方法返回当前线程的名</span></div><div class="line">			System.out.println(getName() +  <span class="string">" "</span> + i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>;  i++)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 调用Thread的currentThread方法获取当前线程</span></div><div class="line">			System.out.println(Thread.currentThread().getName()</div><div class="line">				+  <span class="string">" "</span> + i);</div><div class="line">			<span class="keyword">if</span> (i == <span class="number">20</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// 创建、并启动第一条线程</span></div><div class="line">				<span class="keyword">new</span> FirstThread().start();</div><div class="line">				<span class="comment">// 创建、并启动第二条线程</span></div><div class="line">				<span class="keyword">new</span> FirstThread().start();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>getName</code>可以得到线程的名字，<code>setName</code>可以自己给线程命名。</p>
<p><strong>这里需要说明一下，java中main方法也是一个单独的线程，或者说叫主线程。所以这里实际上是三个线程。另外，线程必须用<code>start</code>调用使其处于就绪状态，如果直接调用<code>run</code>方法，那就会当做普通方法了。</strong></p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>​    第二种方式就麻烦一些了，需要定义<code>Runnable</code>接口的实现类，然后重写该接口的<code>run</code>方法，该接口是函数式接口。同样，<code>run</code>方法的方法体就是线程执行的方法体。然后，创建实例，作为<code>Thread</code>的构造器参数，即由<code>Thread</code>执行。最后调用<code>Thread</code>实例的<code>start</code>方法即可。</p>
<p><strong>这种方式最大好处在于可以多个线程共享数据。</strong></p>
<p>比如下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArray</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> t=(<span class="keyword">int</span>)Thread.currentThread().getId()%<span class="number">100</span>;</div><div class="line">        list.add(t);</div><div class="line">        System.out.printf(<span class="string">"线程%s执行完成\n"</span>,Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(list);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        SimpleArray target=<span class="keyword">new</span> SimpleArray();</div><div class="line">        Thread t1=<span class="keyword">new</span> Thread(target,<span class="string">"1号"</span>);</div><div class="line">        Thread t2=<span class="keyword">new</span> Thread(target,<span class="string">"2号"</span>);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            t1.join();</div><div class="line">            t2.join();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (InterruptedException e)</div><div class="line">        &#123;</div><div class="line">            System.out.println(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        target.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码让两个线程分别把自己的id号后两位加入集合<code>list</code>中，即共享<code>list</code>这一数据。这里<code>join</code>方法会让调用的线程阻塞，直到被调用的线程执行完即必须等到<code>t1``t2</code>执行完，<code>main线程</code>才会继续执行。</p>
<h3 id="使用Callable和Future接口"><a href="#使用Callable和Future接口" class="headerlink" title="使用Callable和Future接口"></a>使用Callable和Future接口</h3><p>​    接口<code>Callable</code>提供了比接口<code>Runnable</code>更强大的功能，其也是函数式接口，有一个方法<code>call</code>,其强大之处在于可以有<strong>返回值和抛出异常</strong>。</p>
<p>这里创建线程的思路和上面大体相同，不过，查阅一下文档就会发现，<code>Thread</code>的构造器并不能接受<code>Callable</code>接口的实例，只能接受<code>Runnable</code>接口的实例，所以需要一个同时实现<code>Runnable</code>和<code>Callable</code>接口的实现类。这里用了<code>Future</code>接口，其代表执行的结果，这里就是线程返回值了。它包含一系列方法如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-28_221948.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里，选择了<code>Futuretask</code>实现类，其构造器可以接受<code>Callable</code>接口，而且其又实现了<code>Runnable</code>和<code>Future</code>接口。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/2017-05-28_222147.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>示例代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> 马源 14130110069 email:1977786930@qq.com on 2017/5/28.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">future</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        future target=<span class="keyword">new</span> future();</div><div class="line">        FutureTask&lt;Integer&gt; task =<span class="keyword">new</span> FutureTask&lt;Integer&gt;(()-&gt;&#123;</div><div class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (i++&lt;<span class="number">50</span>)</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"变量i的值是"</span>+i);</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</div><div class="line">        &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"变量i的值是"</span>+i);</div><div class="line">            <span class="keyword">if</span> (i==<span class="number">20</span>)</div><div class="line">            &#123;</div><div class="line">                Thread t=<span class="keyword">new</span> Thread(task,<span class="string">"子线程"</span>);</div><div class="line">                t.start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"子线程的返回值是"</span>+task.get());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e)</div><div class="line">        &#123;</div><div class="line">            System.out.println(e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有两个线程，<code>main</code>线程和自己创建的线程。</p>
<h2 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h2><p>​    前面讨论的都是普通的线程，还有一种线程主要是为其它线程提供服务，称作<strong>守护线程</strong>。</p>
<p>其特点在于，前台线程全部死亡时，后台线程自动死亡，JVM的垃圾回收器就是典型的守护线程。</p>
<p>通过<code>Thread</code>的<code>setDaemon(true)</code>可以设置，但必须在<code>start</code>之前调用。</p>
<h2 id="join、sleep和yield"><a href="#join、sleep和yield" class="headerlink" title="join、sleep和yield"></a>join、sleep和yield</h2><p><code>join</code>让一个线程等待另一个线程，通常有以下两种形式：</p>
<ol>
<li><code>join()</code>等待被join的线程执行完</li>
<li><code>join(long millis)</code>等待被join的线程执行millis毫秒，如果还没有结束，就不再等待</li>
</ol>
<p><code>sleep(long millis)</code>让当前正在执行的线程暂停一段时间，并进入<strong>阻塞状态</strong>，它是<code>Thread</code>中的静态方法。调用这个方法之后，线程会进入休眠，在此期间不会得到执行的机会，常常用于暂停程序执行。</p>
<p><code>yield()</code>方法也是<code>Thread</code>中的一个静态方法，它会让调用它的线程重新转入就绪状态，即让<strong>线程调度器再次调度一次</strong>，也就是说让优先级比它更高或者同级的线程有执行机会。当然，完全有可能还是执行当前线程。在多cpu的情况下，效果可能不明显。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YieldTest</span><span class="params">(String name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 定义run方法作为线程执行体</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span> ; i++ )</div><div class="line">        &#123;</div><div class="line">            System.out.println(getName() + <span class="string">"  "</span> + i);</div><div class="line">            <span class="comment">// 当i等于20时，使用yield方法让当前线程让步</span></div><div class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>)</div><div class="line">            &#123;</div><div class="line">                Thread.yield();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 启动两条并发线程</span></div><div class="line">        YieldTest yt1 = <span class="keyword">new</span> YieldTest(<span class="string">"高级"</span>);</div><div class="line">        <span class="comment">// 将ty1线程设置成最高优先级</span></div><div class="line">        yt1.setPriority(Thread.MAX_PRIORITY);</div><div class="line">        yt1.start();</div><div class="line">        YieldTest yt2 = <span class="keyword">new</span> YieldTest(<span class="string">"低级"</span>);</div><div class="line">        <span class="comment">// 将yt2线程设置成最低优先级</span></div><div class="line">        yt2.setPriority(Thread.MIN_PRIORITY);</div><div class="line">        yt2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：<code>sleep</code>抛出了<code>InterruptedException</code>，而<code>yield</code>没有抛出任何异常。</p>
]]></content>
      
        <categories>
            
            <category> 多线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最短路径]]></title>
      <url>https://www.prime666.com/2017/05/18/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>最短路径问题总结。</p>
<a id="more"></a>
<h1 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h1><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p><strong>适用于单源点、非负权值的图。</strong></p>
<p>基本思想是基于<strong>贪心法</strong>，执行过程描述如下:</p>
<p>​    <strong>初始化字典dist表示源点到任一顶点的距离。dist[源点]=0,其余INF。然后用一个集合set保存已经被访问的元素。从源点开始，对该顶点所有的出边进行松弛，然后加入到被访问集合中，然后在dist字典中寻找下一个值最小的顶点，依次进行直到所有顶点已经加入被访问集合中。</strong></p>
<p>以上是最朴素的思想，可以用一个<strong>优先级队列</strong>进行优化。</p>
<p>代码实现如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dijkstra</span><span class="params">(G, vo)</span>:</span></div><div class="line">    old = set()</div><div class="line">    view = vo</div><div class="line"></div><div class="line">    INF = float(<span class="string">'inf'</span>)</div><div class="line"></div><div class="line">    dis = dict((k, INF) <span class="keyword">for</span> k <span class="keyword">in</span> G.keys())  <span class="comment"># dis[k]表示到k的最短距离</span></div><div class="line">    dis[vo] = <span class="number">0</span></div><div class="line"></div><div class="line">    path=&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> len(old) &lt; len(G):</div><div class="line">        old.add(view)  <span class="comment"># 当前考虑的节点</span></div><div class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> G[view]:<span class="comment">#遍历view周围的节点，进行松弛</span></div><div class="line">            <span class="keyword">if</span> dis[w] &gt; dis[view] + G[view][w]:</div><div class="line">                dis[w] = dis[view] + G[view][w]</div><div class="line">                path[w]=view<span class="comment">#path[w]记录w的上一个结点的下标</span></div><div class="line"></div><div class="line">        new =INF</div><div class="line"></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> dis.keys():<span class="comment">#找下一个节点k，要求dis[k]最小且k未被松弛过。</span></div><div class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> old:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> dis[n]&lt;=new: <span class="comment">#必须小于等于，因为如果一个顶点没出边，for循环转一圈没有意义，view会一直是这个顶点.</span></div><div class="line">                view=n</div><div class="line">                new=dis[n]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> path:</div><div class="line">        print(<span class="string">'到顶点'</span>,x,<span class="string">'的路径为'</span>,end=<span class="string">': '</span>)</div><div class="line">        t=x</div><div class="line">        <span class="keyword">while</span> t!=<span class="keyword">None</span>:</div><div class="line">            print(t,<span class="string">"&lt;-"</span>,end=<span class="string">' '</span>)</div><div class="line">            t=path.get(t)</div><div class="line">        print(<span class="string">'总长度为'</span>,dis[x])</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dis,path</div></pre></td></tr></table></figure>
<p>这里G代表图，vo代表起点。图的表示使用嵌套的字典表示的，即{‘A’:{‘B’:3}}表示顶点A有A到B的边，权值为3.</p>
<h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h2><p><strong>适用于单源非负环图。</strong></p>
<p>思想描述如下：</p>
<p>​    <strong>初始化dist字典同上，松弛每条边（等价于松弛所有顶点）顶点-1轮，如果之后松弛还能成功，表明有负环存在，无法求解。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bellman_Ford</span><span class="params">(G,v)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    每一轮对所有顶点进行松弛，如果哪一轮松弛后最短距离都不变化就提前结束。否则，如果执行n</div><div class="line">    轮之后还在变化则说明存在负环。最多n-1次松弛就可以得到答案。（n为顶点个数）</div><div class="line">    :param G: 图的邻接表</div><div class="line">    :param v: 起点</div><div class="line">    :return: dis,path</div><div class="line">    '''</div><div class="line">    dis=dict((k,float(<span class="string">'inf'</span>))<span class="keyword">for</span> k <span class="keyword">in</span> G)</div><div class="line">    dis[v]=<span class="number">0</span></div><div class="line">    path=&#123;&#125;</div><div class="line">    <span class="keyword">for</span> rounds <span class="keyword">in</span> G:<span class="comment">#一共执行n次，如果n次之后最短路径还没求出来说明有负环</span></div><div class="line">        changed=<span class="keyword">False</span></div><div class="line">        <span class="comment">#对所有顶点进行松弛</span></div><div class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> G:</div><div class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> G[u]:</div><div class="line">                <span class="keyword">if</span> dis[w] &gt; dis[u] + G[u][w]:</div><div class="line">                    dis[w] = dis[u] + G[u][w]</div><div class="line">                    path[w] = u</div><div class="line">                    changed=<span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> changed:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        sys.exit(<span class="string">'存在负环，算法求不出来'</span>)</div><div class="line">    <span class="keyword">return</span> dis,path</div></pre></td></tr></table></figure>
<h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p>即<strong>用队列优化的Bellman-Ford算法，考虑上述算法，显然只有前面的边松弛成功，后面的边松弛才会成功。所以上面的实现用了个标志用于提前结束，这里用一个队列，把松弛成功的顶点的所有邻接顶点加入其中，每次从队列取出顶点进行松弛。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SPFA</span><span class="params">(G,v)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    利用 spfa 算法判断负环有两种方法：</div><div class="line"></div><div class="line">      1） spfa 的 dfs 形式，判断条件是存在一点在一条路径上出现多次。</div><div class="line"></div><div class="line">      2） spfa 的 bfs 形式，判断条件是存在一点入队次数大于总顶点数。</div><div class="line">    :param G: 图</div><div class="line">    :param v: 起点</div><div class="line">    :return: dis,path</div><div class="line">    '''</div><div class="line">    <span class="comment">#用队列优化Bellman-Ford算法，这里不能有负环，程序中没有判断。</span></div><div class="line">    q=deque()</div><div class="line">    path=&#123;&#125;<span class="comment">#用于打印路径</span></div><div class="line">    dis=dict((k,float(<span class="string">'inf'</span>))<span class="keyword">for</span> k <span class="keyword">in</span> G)<span class="comment">#记录距离</span></div><div class="line">    dis[v]=<span class="number">0</span></div><div class="line">    times=dict((k,<span class="number">0</span>) <span class="keyword">for</span> k <span class="keyword">in</span> G)<span class="comment">#用于记录每个顶点入队列的次数，如果大于顶点个数表明有负环</span></div><div class="line">    q.append(v)<span class="comment">#起始把起点入队</span></div><div class="line">    <span class="keyword">while</span> len(q)!=<span class="number">0</span>:</div><div class="line">        x=q.popleft()<span class="comment">#出队一个</span></div><div class="line">        <span class="comment">#对该顶点所有的邻边进行松弛</span></div><div class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> G[x]:</div><div class="line">            <span class="keyword">if</span> dis[w]&gt;dis[x]+G[x][w]:</div><div class="line">                dis[w]=dis[x]+G[x][w]</div><div class="line">                path[w]=x <span class="comment">#记录此顶点的上一个顶点</span></div><div class="line">                <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> q:</div><div class="line">                    <span class="keyword">if</span> times[w]&gt;len(G):</div><div class="line">                        sys.exit(<span class="string">'存在负环，嗝屁了'</span>)</div><div class="line">                    q.append(w)</div><div class="line">                    times[w]+=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> dis,path</div></pre></td></tr></table></figure>
<h2 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h2><p>基于DP的一个算法，代码即是递推式。</p>
<p><strong>思想就是u到v的最短路径经不经过k，这也解释了为什么k是最外层循环（自底向上运算，后面的需要用到前面的结果）</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Folyd_Warshall</span><span class="params">(G)</span>:</span></div><div class="line">    G2=deepcopy(G)</div><div class="line">    <span class="comment">#强行补成邻接矩阵的形式</span></div><div class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> G2:</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> G2:</div><div class="line">            <span class="keyword">if</span> u==v:</div><div class="line">                G2[u][v]=<span class="number">0</span></div><div class="line">            <span class="keyword">if</span> G2[u].get(v)==<span class="keyword">None</span>:</div><div class="line">                G2[u][v]=float(<span class="string">'inf'</span>)</div><div class="line">	<span class="comment">#算法开始</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> G:</div><div class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> G:</div><div class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> G:</div><div class="line">                <span class="keyword">if</span> G2[u][v]&gt;G2[u][k]+G2[k][v]:</div><div class="line">                    G2[u][v]=G2[u][k]+G2[k][v]</div><div class="line">    <span class="keyword">return</span> G2</div></pre></td></tr></table></figure>
<h2 id="Johnson"><a href="#Johnson" class="headerlink" title="Johnson"></a>Johnson</h2><p>这个算法利用了Bellman和Dijkstra算法。</p>
<p>由于Bellman算法限制，同样<strong>不能用于负环图</strong>。</p>
<p>其本质思想是:</p>
<p>​    <strong>给图加上一个顶点s，然后令s到其所有顶点距离为0，利用Bellman-Ford算法，求出s到其它顶点的最短距离记为h（h[a]表示s到a的最短距离），然后对图中所有的边进行重新赋权（目的消除负权，好使用Dijkstra算法），具体体现为若有顶点u、v和边<code>G[u][v]</code>，则<code>G[u][v]+=h[u]-h[v]</code>。之后，去除顶点s即可。然后对所有顶点执行Dijkstra算法。最后在已经求解的结果上别忘了恢复原来的权值，即<code>Dist[u][v]+=h[v]-h[u]</code>，这里Dist表示u到v的最短距离。</strong></p>
<p>可以证明，<strong>重新赋权图求得的最短路径和原始图一样，（值不一样可以通过恢复操作来求出）。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">johnson</span><span class="params">(G)</span>:</span></div><div class="line">    G=deepcopy(G)</div><div class="line">    s=object()</div><div class="line">    G[s]=&#123;v:<span class="number">0</span> <span class="keyword">for</span> v <span class="keyword">in</span> G&#125; <span class="comment">#新节点到所有其它顶点距离为0</span></div><div class="line">    h,_=Bellman_Ford(G,s) <span class="comment">#h表示s到其它节点的最短路径值</span></div><div class="line">    <span class="keyword">del</span> G[s] <span class="comment">#可以删除s节点了</span></div><div class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> G:  <span class="comment">#对于从u到v的边，进行重新赋权</span></div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> G[u]:</div><div class="line">            G[u][v]+=h[u]-h[v]</div><div class="line">    D=&#123;&#125;</div><div class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> G:</div><div class="line">        D[u]=Dijstra(G,vo=u)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> G:</div><div class="line">            D[u][v]+=h[v]-h[u]</div><div class="line">    <span class="keyword">return</span> D</div></pre></td></tr></table></figure>
<h2 id="附上测试用例和打印路径的函数"><a href="#附上测试用例和打印路径的函数" class="headerlink" title="附上测试用例和打印路径的函数"></a>附上测试用例和打印路径的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_path</span><span class="params">(dis,path)</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> path:</div><div class="line">        print(<span class="string">'到顶点'</span>,x,<span class="string">'的总长度为:'</span>,dis[x],<span class="string">'具体的路径为'</span>,end=<span class="string">': '</span>)</div><div class="line">        t=x</div><div class="line">        <span class="keyword">while</span> t!=<span class="keyword">None</span>:</div><div class="line">            print(t,<span class="string">"&lt;-"</span>,end=<span class="string">' '</span>)</div><div class="line">            t=path.get(t)</div><div class="line">        print()</div><div class="line">        </div><div class="line">      G1=&#123;<span class="string">'B'</span>: &#123;<span class="string">'D'</span>: <span class="number">3</span>, <span class="string">'E'</span>: <span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>&#125;,</div><div class="line">        <span class="string">'D'</span>: &#123;<span class="string">'B'</span>: <span class="number">0</span>, <span class="string">'C'</span>: <span class="number">2</span>&#125;,</div><div class="line">        <span class="string">'E'</span>: &#123;<span class="string">'D'</span>: <span class="number">0</span>&#125;,</div><div class="line">        <span class="string">'C'</span>: &#123;&#125;,</div><div class="line">        <span class="string">'A'</span>: &#123;<span class="string">'B'</span>: <span class="number">1</span>, <span class="string">'C'</span>: <span class="number">3</span>&#125;&#125;</div><div class="line"></div><div class="line">    G=&#123;<span class="number">0</span>:&#123;<span class="number">1</span>:<span class="number">5</span>,<span class="number">2</span>:<span class="number">3</span>&#125;,</div><div class="line">       <span class="number">1</span>:&#123;<span class="number">0</span>:<span class="number">5</span>,<span class="number">3</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="number">3</span>,<span class="number">5</span>:<span class="number">6</span>&#125;,</div><div class="line">       <span class="number">2</span>:&#123;<span class="number">0</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">8</span>,<span class="number">5</span>:<span class="number">7</span>,<span class="number">6</span>:<span class="number">6</span>&#125;,</div><div class="line">       <span class="number">3</span>:&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">7</span>:<span class="number">6</span>,<span class="number">8</span>:<span class="number">8</span>&#125;,</div><div class="line">       <span class="number">4</span>:&#123;<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">8</span>,<span class="number">7</span>:<span class="number">3</span>,<span class="number">8</span>:<span class="number">5</span>&#125;,</div><div class="line">       <span class="number">5</span>:&#123;<span class="number">1</span>:<span class="number">6</span>,<span class="number">2</span>:<span class="number">7</span>,<span class="number">8</span>:<span class="number">3</span>,<span class="number">9</span>:<span class="number">3</span>&#125;,<span class="comment">#5</span></div><div class="line">       <span class="number">6</span>:&#123;<span class="number">2</span>:<span class="number">6</span>,<span class="number">8</span>:<span class="number">8</span>,<span class="number">9</span>:<span class="number">4</span>&#125;,<span class="comment">#6</span></div><div class="line">       <span class="number">7</span>:&#123;<span class="number">3</span>:<span class="number">6</span>,<span class="number">4</span>:<span class="number">3</span>,<span class="number">10</span>:<span class="number">2</span>,<span class="number">11</span>:<span class="number">2</span>&#125;,<span class="comment">#7</span></div><div class="line">       <span class="number">8</span>:&#123;<span class="number">3</span>:<span class="number">8</span>,<span class="number">4</span>:<span class="number">5</span>,<span class="number">5</span>:<span class="number">3</span>,<span class="number">6</span>:<span class="number">8</span>,<span class="number">11</span>:<span class="number">1</span>,<span class="number">12</span>:<span class="number">2</span>&#125;,<span class="comment">#8</span></div><div class="line">       <span class="number">9</span>:&#123;<span class="number">5</span>:<span class="number">3</span>,<span class="number">6</span>:<span class="number">4</span>,<span class="number">11</span>:<span class="number">3</span>,<span class="number">12</span>:<span class="number">3</span>&#125;,<span class="comment">#9</span></div><div class="line">       <span class="number">10</span>:&#123;<span class="number">7</span>:<span class="number">2</span>,<span class="number">13</span>:<span class="number">3</span>,<span class="number">14</span>:<span class="number">5</span>&#125;,<span class="comment">#10</span></div><div class="line">       <span class="number">11</span>:&#123;<span class="number">7</span>:<span class="number">2</span>,<span class="number">8</span>:<span class="number">1</span>,<span class="number">9</span>:<span class="number">3</span>,<span class="number">13</span>:<span class="number">5</span>,<span class="number">14</span>:<span class="number">2</span>&#125;,<span class="comment">#11</span></div><div class="line">       <span class="number">12</span>:&#123;<span class="number">8</span>:<span class="number">2</span>,<span class="number">9</span>:<span class="number">3</span>,<span class="number">13</span>:<span class="number">6</span>,<span class="number">14</span>:<span class="number">6</span>&#125;,<span class="comment">#12</span></div><div class="line">       <span class="number">13</span>:&#123;<span class="number">10</span>:<span class="number">3</span>,<span class="number">11</span>:<span class="number">5</span>,<span class="number">12</span>:<span class="number">6</span>,<span class="number">15</span>:<span class="number">4</span>&#125;,<span class="comment">#13</span></div><div class="line">       <span class="number">14</span>:&#123;<span class="number">10</span>:<span class="number">5</span>,<span class="number">11</span>:<span class="number">2</span>,<span class="number">12</span>:<span class="number">6</span>,<span class="number">15</span>:<span class="number">3</span>&#125;,<span class="comment">#14</span></div><div class="line">       <span class="number">15</span>:&#123;<span class="number">13</span>:<span class="number">4</span>,<span class="number">14</span>:<span class="number">3</span>&#125;<span class="comment">#15</span></div><div class="line">       &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Huffman]]></title>
      <url>https://www.prime666.com/2017/05/18/Huffman/</url>
      <content type="html"><![CDATA[<p>霍夫曼编码的实现</p>
<a id="more"></a>
<h1 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h1><h2 id="理论概述"><a href="#理论概述" class="headerlink" title="理论概述"></a>理论概述</h2><p>引用维基百科中的描述如下：</p>
<p><strong>霍夫曼编码</strong>（英语：Huffman Coding），又译为<strong>哈夫曼编码</strong>、<strong>赫夫曼编码</strong>，是一种用于无损<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9" target="_blank" rel="noopener">数据压缩</a>的<a href="https://zh.wikipedia.org/wiki/%E7%86%B5%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">熵编码</a>（权编码）<a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">算法</a>。由<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E8%A1%9B%C2%B7%E9%9C%8D%E5%A4%AB%E6%9B%BC" target="_blank" rel="noopener">大卫·霍夫曼</a>在1952年发明。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noopener">计算机</a><a href="https://zh.wikipedia.org/w/index.php?title=%E8%B3%87%E6%96%99%E8%99%95%E7%90%86&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">数据处理</a>中，霍夫曼编码使用<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%8A%E9%95%B7%E7%B7%A8%E7%A2%BC%E8%A1%A8&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">变长编码表</a>对源符号（如文件中的一个字母）进行编码，其中<a href="https://zh.wikipedia.org/w/index.php?title=%E8%AE%8A%E9%95%B7%E7%B7%A8%E7%A2%BC%E8%A1%A8&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">变长编码表</a>是通过一种评估来源符号出现概率的方法得到的，出现概率高的字母使用较短的编码，反之出现概率低的则使用较长的编码，这便使编码之后的字符串的平均长度、<a href="https://zh.wikipedia.org/wiki/%E6%9C%9F%E6%9C%9B%E5%80%BC" target="_blank" rel="noopener">期望值</a>降低，从而达到<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E6%8D%9F%E5%8E%8B%E7%BC%A9" target="_blank" rel="noopener">无损压缩</a>数据的目的。</p>
<p>例如，在英文中，e的出现<a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E7%8E%87" target="_blank" rel="noopener">概率</a>最高，而z的出现概率则最低。当利用霍夫曼编码对一篇英文进行压缩时，e极有可能用一个<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83" target="_blank" rel="noopener">比特</a>来表示，而z则可能花去25个<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83" target="_blank" rel="noopener">比特</a>（不是26）。用普通的表示方法时，每个英文字母均占用一个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>，即8个<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83" target="_blank" rel="noopener">比特</a>。二者相比，e使用了一般编码的1/8的长度，z则使用了3倍多。倘若我们能实现对于英文中各个字母出现概率的较准确的估算，就可以大幅度提高无损压缩的比例。</p>
<p>霍夫曼树又称最优二叉树，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为WPL=（W1<em>L1+W2</em>L2+W3<em>L3+…+Wn</em>Ln），N个权值Wi（i=1,2,…n）构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li（i=1,2,…n）。可以证明霍夫曼树的WPL是最小的。</p>
<h2 id="霍夫曼算法"><a href="#霍夫曼算法" class="headerlink" title="霍夫曼算法"></a>霍夫曼算法</h2><p>计算霍夫曼编码首先需要创建一棵霍夫曼树，而创建树的算法基于<strong>贪心</strong>的思想：</p>
<ol>
<li>将所有叶子节点加入优先级队列中（频率从小到大排序）</li>
<li>每次从队列头部取出两个节点，然后创建 一个新的节点，其孩子为这两个节点，值为二者频率的和。依次进行直到只剩下一个根节点即可。</li>
</ol>
<p>注意，最优二叉树不是唯一的，为了编码解码唯一，所以，我在实现过程中加了一个判断条件，保证左子树永远小于等于右子树，另外比如对于2,3,5的情况，2和3作为孩子的父节点作为左子树，右子树是5。</p>
<p>有了以上规定，并且编码左子树为0，右子树为1.这样的解是唯一的。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Huffman;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">code</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">node</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">node</span>&gt;</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        node left;</div><div class="line">        node right;</div><div class="line">        <span class="keyword">int</span> position; <span class="comment">//为了保证huffman树的唯一性</span></div><div class="line">        node()</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.val=-<span class="number">1</span>;</div><div class="line">            <span class="keyword">this</span>.left=<span class="keyword">null</span>;</div><div class="line">            <span class="keyword">this</span>.right=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        node(<span class="keyword">int</span> val)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">this</span>.val=val;</div><div class="line">            <span class="keyword">this</span>.left=<span class="keyword">null</span>;</div><div class="line">            <span class="keyword">this</span>.right=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(node o)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.val!=o.val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.val-o.val;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.position-o.position;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        Queue&lt;node&gt; q=<span class="keyword">new</span> PriorityQueue&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> n=in.nextInt();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            node tmp=<span class="keyword">new</span> node();</div><div class="line">            tmp.val=in.nextInt();</div><div class="line">            tmp.position=i;</div><div class="line">            q.add(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (q.size()&gt;<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            node L=q.poll();</div><div class="line">            node R=q.poll();</div><div class="line">            node tmp=<span class="keyword">new</span> node(L.val+R.val);</div><div class="line">            tmp.left=L;</div><div class="line">            tmp.right=R;</div><div class="line">            tmp.position=L.position;</div><div class="line">            q.add(tmp);</div><div class="line">        &#125;</div><div class="line">        res=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        encode(q.peek(),<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">        <span class="keyword">for</span> (Integer e:res.keySet())</div><div class="line">            System.out.println(e+<span class="string">"编码为:"</span>+res.get(e));</div><div class="line">        List&lt;Integer&gt; tobedecode=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        System.out.println(<span class="string">"请输入欲解码的编码"</span>);</div><div class="line">        String tmp=in.next();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tmp.length();i++)</div><div class="line">            tobedecode.add(tmp.charAt(i)-<span class="string">'0'</span>);</div><div class="line"><span class="comment">//        System.out.println(tobedecode);</span></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            decode(q.peek(),tobedecode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (AssertionError e)</div><div class="line">        &#123;</div><div class="line">            System.out.println(e.getMessage());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,List&lt;Integer&gt;&gt; res;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(node root,List&lt;Integer&gt; prefix)</span></span></div><div class="line">    &#123;<span class="comment">//回溯法打印编码</span></div><div class="line">        <span class="keyword">if</span> (root.right==<span class="keyword">null</span>&amp;&amp;root.left==<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            res.put(root.val,<span class="keyword">new</span> ArrayList&lt;&gt;(prefix));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            prefix.add(<span class="number">0</span>);</div><div class="line">            encode(root.left,prefix);</div><div class="line">            prefix.remove(prefix.size()-<span class="number">1</span>);</div><div class="line"></div><div class="line">            prefix.add(<span class="number">1</span>);</div><div class="line">            encode(root.right,prefix);</div><div class="line">            prefix.remove(prefix.size()-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(node root,List&lt;Integer&gt; prefix)</span></span></div><div class="line">    &#123;<span class="comment">//解码prefix</span></div><div class="line">        <span class="keyword">if</span> (prefix.size()==<span class="number">0</span>&amp;&amp;root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)</div><div class="line">            System.out.println(<span class="string">"该编码表示字符的优先级为"</span>+root.val);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (prefix.size()&gt;<span class="number">0</span>&amp;&amp;prefix.get(<span class="number">0</span>)==<span class="number">0</span>&amp;&amp;root.left!=<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            prefix.remove(<span class="number">0</span>);</div><div class="line">            decode(root.left,prefix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (prefix.size()&gt;<span class="number">0</span>&amp;&amp;prefix.get(<span class="number">0</span>)==<span class="number">1</span>&amp;&amp;root.right!=<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            prefix.remove(<span class="number">0</span>);</div><div class="line">            decode(root.right,prefix);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"未能识别的编码"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(node root)</span></span></div><div class="line">    &#123;<span class="comment">//先序遍历huffman树，debug用</span></div><div class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            System.out.print(root.val+<span class="string">"  "</span>);</div><div class="line">            print(root.left);</div><div class="line">            print(root.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路很简单，最后加了个先序遍历是为了debug。可以不实现它。</p>
<p>编码过程用了回溯的思想（说白了就是DFS），解码就很简单了，直接从根出发即可。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DP-java版本]]></title>
      <url>https://www.prime666.com/2017/05/01/DP-java%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>常见dp问题的java叙述总结。</p>
<a id="more"></a>
<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><p>对于0-1背包问题，运用dp的思想可以有两种常见状态转移：<em>认为物品下标从0开始</em></p>
<ul>
<li><code>dp[i][j]</code>表示从前i-1个物品选，在重量不超过j的情况下的最大价值。（正向）</li>
<li><code>dp[i][j]</code>表示从第i个物品开始选，在重量不超过j的情况下的最大价值。（反向）</li>
</ul>
<p>状态转移方程分别如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化dp[0][j]=0</span></div><div class="line"><span class="keyword">if</span> j&lt;w[i]:</div><div class="line">	dp[i+<span class="number">1</span>][j]=dp[i][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    dp[i+<span class="number">1</span>][j]=max(dp[i][j],dp[i][j-w[i]]+v[i])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化dp[n][j]=0</span></div><div class="line"><span class="keyword">if</span> j&lt;w[i]:</div><div class="line">    dp[i][j]=dp[i+<span class="number">1</span>][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    dp[i][j]=max(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i])</div></pre></td></tr></table></figure>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>这里运用正向dp思路：</p>
<p><code>dp[i][j]</code>表示从前i-1个物品选，在重量不超过j的情况下的最大价值。</p>
<p>转移方程如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化dp[0][j]=0</span></div><div class="line">dp[i+<span class="number">1</span>][j]=max(dp[i][j],dp[i][j-k*w[i]]+k*v[i])  <span class="comment">#(k&gt;=0且k*w[i]&lt;=j)</span></div></pre></td></tr></table></figure>
<p>这是最容易想到的思路，但是实际上还可以优化，因为其中有重复计算：</p>
<p>比如在计算<code>dp[i+1][j]</code>的计算中（k&gt;=1），与在<code>d[i+1][j-w[i]]</code>的计算中选择k-1的情况相同。</p>
<p>即有以下变形：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> dp[i+<span class="number">1</span>][j]</div><div class="line">=max(dp[i][j-k*w[i]]+j*v[i])(k&gt;=<span class="number">0</span>)</div><div class="line">=max(dp[i][j],max(dp[i][j-k*w[i]]+k*v[i]))(k&gt;=<span class="number">1</span>)</div><div class="line">=max(dp[i][j],max(dp[i][j-w[i]-k*w[i]]+k*v[i]+v[i]))(k&gt;=<span class="number">0</span>)</div><div class="line">=max(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i])</div></pre></td></tr></table></figure>
<p>所以时间复杂度降为平方级。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> DP;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> prime  on 2017/5/1.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnapSack</span></span></div><div class="line">&#123;<span class="comment">//各种背包</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve0_1</span><span class="params">(<span class="keyword">int</span>[] v,<span class="keyword">int</span>[] w,<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;<span class="comment">//正向dp解0-1背包</span></div><div class="line">        <span class="keyword">int</span> n=v.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][c+<span class="number">1</span>];<span class="comment">//从前i个物品中选出总重量不超过j的物品时总价值的最大值</span></div><div class="line">        Arrays.fill(dp[<span class="number">0</span>],<span class="number">0</span>);<span class="comment">//dp[0][j]置0</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (j&lt;w[i])</div><div class="line">                    dp[i+<span class="number">1</span>][j]=dp[i][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i+<span class="number">1</span>][j]=Math.max(dp[i][j],dp[i][j-w[i]]+v[i]);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n][c];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve0_1_reverse</span><span class="params">(<span class="keyword">int</span>[] v,<span class="keyword">int</span>[] w,<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;<span class="comment">//反向dp解0-1背包</span></div><div class="line">        <span class="keyword">int</span> n=v.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][c+<span class="number">1</span>];<span class="comment">//从第i个物品开始选，在不超过j的条件下的最大价值（i从0开始）</span></div><div class="line">        Arrays.fill(dp[n],<span class="number">0</span>);<span class="comment">//dp[n][j]置0</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (j&lt;w[i])</div><div class="line">                    dp[i][j]=dp[i+<span class="number">1</span>][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j]=Math.max(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][c];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>][<span class="number">101</span>];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] w=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] v=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">65</span>,<span class="number">40</span>,<span class="number">60</span>&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> n=<span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve0_1_rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span><span class="comment">//从第i个物品开始选，在不超过j的条件下的最大价值（i从0开始）</span></span></div><div class="line">    &#123;<span class="comment">//反向dp的递归版本</span></div><div class="line">        <span class="keyword">int</span> res;</div><div class="line">        <span class="keyword">if</span> (dp[i][j]&gt;<span class="number">0</span>)<span class="comment">//备忘录，没有这个就是BS</span></div><div class="line">            <span class="keyword">return</span> dp[i][j];</div><div class="line">        <span class="keyword">if</span> (i==n)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j&lt;w[i])</div><div class="line">            res=solve0_1_rec(i+<span class="number">1</span>,j);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            res=Math.max(solve0_1_rec(i+<span class="number">1</span>,j),solve0_1_rec(i+<span class="number">1</span>,j-w[i])+v[i]);</div><div class="line">        <span class="keyword">return</span> dp[i][j]=res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>[] v,<span class="keyword">int</span>[] w,<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;<span class="comment">//完全背包问题,正向dp思考,优化后</span></div><div class="line">        <span class="keyword">int</span> n=v.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][c+<span class="number">1</span>];</div><div class="line">        Arrays.fill(dp[<span class="number">0</span>],<span class="number">0</span>);<span class="comment">//dp[0][j]置0</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (j&lt;w[i])</div><div class="line">                    dp[i+<span class="number">1</span>][j]=dp[i][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i+<span class="number">1</span>][j]=Math.max(dp[i][j],dp[i+<span class="number">1</span>][j-w[i]]+v[i]);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n][c];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve_bad</span><span class="params">(<span class="keyword">int</span>[] v,<span class="keyword">int</span>[] w,<span class="keyword">int</span> c)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> n=v.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][c+<span class="number">1</span>];</div><div class="line">        Arrays.fill(dp[<span class="number">0</span>],<span class="number">0</span>);<span class="comment">//dp[0][j]置0</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k*w[i]&lt;=j;k++)</div><div class="line">                &#123;</div><div class="line">                    dp[i+<span class="number">1</span>][j]=Math.max(dp[i+<span class="number">1</span>][j],dp[i][j-k*w[i]]+k*v[i]);</div><div class="line">                &#125;</div><div class="line">        <span class="keyword">return</span> dp[n][c];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] w=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] v=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">65</span>,<span class="number">40</span>,<span class="number">60</span>&#125;;</div><div class="line">        System.out.println(solve0_1(v,w,<span class="number">100</span>));</div><div class="line">        System.out.println(solve0_1_reverse(v,w,<span class="number">100</span>));</div><div class="line">        System.out.println(solve0_1_rec(<span class="number">0</span>,<span class="number">100</span>));</div><div class="line">        System.out.println(solve(v,w,<span class="number">100</span>));</div><div class="line">        System.out.println(solve_bad(v,w,<span class="number">100</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="换钱问题"><a href="#换钱问题" class="headerlink" title="换钱问题"></a>换钱问题</h1><p><code>dp[i][j]</code>表示可以随便使用0..i的纸币的情况下，组成j元所需要的最少纸币数。</p>
<p>初始化都是相同的，即第一列<code>dp[i][0]</code>都是0；而第一行<code>dp[0][j]</code>，如果可以被第一个货币整除就填入结果即货币数（对于第二种纸币只有一张的情况下只有等于第一个纸币才填1），否则指定一个非常大的数（最好不要用整数最大值，可能会溢出）</p>
<h2 id="无限纸币"><a href="#无限纸币" class="headerlink" title="无限纸币"></a>无限纸币</h2><p>这种情况下和完全背包问题很相似：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> arr[i]&gt;j: <span class="comment">#当前货币太大了</span></div><div class="line">    dp[i][j]=dp[i<span class="number">-1</span>][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j-arr[i]]+<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>这里的也是像上面完全背包问题一样，化简后的结果。原始递推公式是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> arr[i]&gt;j: <span class="comment">#当前货币太大了</span></div><div class="line">    dp[i][j]=dp[i<span class="number">-1</span>][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	dp[i][j]=min(dp[i][j*k*arr[i]]+k)(k&gt;=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>这里对它用上面一样的方法化简即可。</p>
<h2 id="单一纸币"><a href="#单一纸币" class="headerlink" title="单一纸币"></a>单一纸币</h2><p>这种就相对容易些:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> arr[i]&gt;j: <span class="comment">#当前货币太大了</span></div><div class="line">    dp[i][j]=dp[i<span class="number">-1</span>][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-arr[i]]+<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> DP;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 换钱问题的DP求解</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">money</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minCoin1</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">//每种纸币无限制的换钱问题</span></div><div class="line">        <span class="keyword">int</span> n=arr.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n][aim+<span class="number">1</span>];<span class="comment">//dp[i][j]表示在可以任意使用0..i的货币的情况下，组成j所需要的最小张数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//第一列显然是0</span></div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=aim;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (j%arr[<span class="number">0</span>]==<span class="number">0</span>)</div><div class="line">                dp[<span class="number">0</span>][j]=j/arr[<span class="number">0</span>];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                dp[<span class="number">0</span>][j]=<span class="number">20000</span>;<span class="comment">//不用整数最大值是为了防止溢出。</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*以上是初始化部分*/</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=aim;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (j&lt;arr[i])<span class="comment">//第i个钱太大了</span></div><div class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-arr[i]]+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][aim]!=<span class="number">20000</span>?dp[n-<span class="number">1</span>][aim]:-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minCoin2</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">//每种纸币只能用一次</span></div><div class="line">        <span class="keyword">int</span> n=arr.length;</div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n][aim+<span class="number">1</span>];<span class="comment">//dp[i][j]表示任意使用0..i的纸币，组成j元的最小张数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=aim;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (j==arr[<span class="number">0</span>])</div><div class="line">                dp[<span class="number">0</span>][j]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                dp[<span class="number">0</span>][j]=<span class="number">20000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*初始化完成*/</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=aim;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (arr[i]&gt;j)</div><div class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j]=Math.min(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-arr[i]]+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][aim]!=<span class="number">20000</span>?dp[n-<span class="number">1</span>][aim]:-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">50</span>&#125;;</div><div class="line">        System.out.println(minCoin1(a,<span class="number">15</span>));</div><div class="line">        System.out.println(minCoin2(a,<span class="number">15</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="换钱的方法数问题（每种货币无限）"><a href="#换钱的方法数问题（每种货币无限）" class="headerlink" title="换钱的方法数问题（每种货币无限）"></a>换钱的方法数问题（每种货币无限）</h1><p>三种方法：<strong>暴力搜索、记忆化搜索、DP</strong></p>
<h2 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h2><p>暴力搜索基于以下事实：</p>
<p>假设货币数组arr[0..n-1]，目标aim，则过程如下：</p>
<ul>
<li>不用arr[0]，用剩下的arr[1..n-1]组成aim</li>
<li>用一张arr[0]，用剩下的arr[1..n-1]组成aim-arr[0]</li>
<li>用两张arr[0]，用剩下的arr[1..n-1]组成aim-2*arr[0]</li>
<li>……</li>
</ul>
<p>所以，就可以写出一个递归的暴力搜索方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coin1</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">//暴力搜索</span></div><div class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>||aim&lt;<span class="number">0</span>||arr.length==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> BS1(arr,<span class="number">0</span>,aim);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BS1</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">/*BS1表示如果用arr[index..]组成aim元的方法数*/</span></div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (index==arr.length)</div><div class="line">            res=aim==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i*arr[index]&lt;=aim;i++)</div><div class="line">                res+=BS1(arr,index+<span class="number">1</span>,aim-i*arr[index]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>暴力搜索最大的弊端在于有很多重复计算，比如用2张5元和一张10元而言，后序的递归都是一样的情形。为此想保留每次计算的结果，有了下面的优化：</p>
<h2 id="记忆化的暴力搜索"><a href="#记忆化的暴力搜索" class="headerlink" title="记忆化的暴力搜索"></a>记忆化的暴力搜索</h2><p>把上述BS1的参数和返回值对应起来，并保存到二维数组中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coin2</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">/*记忆后的暴力搜索*/</span></div><div class="line">        <span class="keyword">if</span> (arr==<span class="keyword">null</span>||arr.length==<span class="number">0</span>||aim&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] memo=<span class="keyword">new</span> <span class="keyword">int</span>[arr.length+<span class="number">1</span>][aim+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] e:memo)</div><div class="line">            Arrays.fill(e,-<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> BS2(arr,<span class="number">0</span>,aim,memo);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BS2</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index,<span class="keyword">int</span> aim,<span class="keyword">int</span>[][] memo)</span></span></div><div class="line">    &#123;<span class="comment">/*基本参数都和上面一样，memo[i][j]表示index为i，aim为j时的计算结果*/</span></div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (index==arr.length)</div><div class="line">            res=aim==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (memo[index][aim]!=-<span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> memo[index][aim];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i*arr[index]&lt;=aim;i++)</div><div class="line">                res+=BS2(arr,index+<span class="number">1</span>,aim-i*arr[index],memo);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> memo[index][aim]=res;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>初始化memo为-1表示还没被计算，当后序程序递归时，查表即可。</p>
<h2 id="非最优的动态规划"><a href="#非最优的动态规划" class="headerlink" title="非最优的动态规划"></a>非最优的动态规划</h2><p>dp和记忆化搜索本质上是一样的，都是空间换时间，以某种方式 进行记录。不同的地方在于dp规定计算顺序，后面的依赖前面的结果；而记忆化搜索只是单纯记录中间结果，对顺序没有规定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coin3</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">//dp法</span></div><div class="line">        <span class="keyword">int</span> n=arr.length;</div><div class="line">        <span class="comment">/*dp[i][j]表示使用0..i的货币组成j元的方法数*/</span></div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n][aim+<span class="number">1</span>];</div><div class="line">        <span class="comment">/*第一列显然都是1*/</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=aim;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (j%arr[<span class="number">0</span>]==<span class="number">0</span>)</div><div class="line">                dp[<span class="number">0</span>][j]=<span class="number">1</span>;<span class="comment">//能被找开就说明是一种方法</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=aim;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k*arr[i]&lt;=j;k++)</div><div class="line">                    count+=dp[i-<span class="number">1</span>][j-k*arr[i]];</div><div class="line">                dp[i][j]=count;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][aim];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="最优DP"><a href="#最优DP" class="headerlink" title="最优DP"></a>最优DP</h2><p>上面的dp之中还有很多重复计算，利用推导可以化简如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> dp[i][j]</div><div class="line">=dp[i<span class="number">-1</span>][j-arr[i]*k] (k&gt;=<span class="number">0</span>)</div><div class="line">=dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][j-arr[i]-arr[i]*k](k&gt;=<span class="number">0</span>)</div><div class="line">=dp[i<span class="number">-1</span>][j]+dp[i][j-arr[i]]</div></pre></td></tr></table></figure>
<p>由此有以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coin4</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> aim)</span></span></div><div class="line">    &#123;<span class="comment">//最优dp</span></div><div class="line">        <span class="keyword">int</span> n=arr.length;</div><div class="line">        <span class="comment">/*dp[i][j]表示使用0..i的货币组成j元的方法数*/</span></div><div class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n][aim+<span class="number">1</span>];</div><div class="line">        <span class="comment">/*第一列显然都是1,组成0元只有一种方法*/</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="comment">/*第一行如果可以被找开就是1*/</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=aim;j++)</div><div class="line">            <span class="keyword">if</span> (j%arr[<span class="number">0</span>]==<span class="number">0</span>)</div><div class="line">                dp[<span class="number">0</span>][j]=<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=aim;j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (j&lt;arr[i])</div><div class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j]+dp[i][j-arr[i]];</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][aim];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="计数问题的DP"><a href="#计数问题的DP" class="headerlink" title="计数问题的DP"></a>计数问题的DP</h1><blockquote>
<p>n个无区别的物品，划分成m组，求出划分总数。n&gt;=m</p>
</blockquote>
<p>记<code>dp[i][j]</code>表示<strong>把j的i划分总数</strong></p>
<p>所以边界<code>dp[0][0]=1</code>，结果是<code>dp[m][n]</code></p>
<p>递推公式如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> j&lt;i:</div><div class="line">   dp[i][j]=dp[i<span class="number">-1</span>][j]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">   dp[i][j]=dp[i][j-i]+dp[i<span class="number">-1</span>][j]</div></pre></td></tr></table></figure>
<p><u>分析，假设n的m划分是a1,a2,a3…am。如果有ai==0，则对应了n的m-1划分；如果ai&gt;0，则{ai-1}对应了n-m的m划分。</u></p>
<p>一个代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> m,n;</div><div class="line">        <span class="keyword">while</span> (in.hasNext())</div><div class="line">        &#123;</div><div class="line">            m=in.nextInt();</div><div class="line">            n=in.nextInt();</div><div class="line">            <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</div><div class="line">            dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (j&lt;i)</div><div class="line">                        dp[i][j]=dp[i-<span class="number">1</span>][j];</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        dp[i][j]=dp[i][j-i]+dp[i-<span class="number">1</span>][j];</div><div class="line">                &#125;</div><div class="line">            System.out.println(dp[n][m]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DP]]></title>
      <url>https://www.prime666.com/2017/04/06/DP/</url>
      <content type="html"><![CDATA[<p>经典动态规划问题。</p>
<a id="more"></a>
<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>函数都是三个参数，w数组表示重量，v数组表示价值，c表示包的容量。</p>
<p>另外，用装饰器@memo来进行<strong>备忘</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span><span class="params">(func)</span>:</span></div><div class="line">    cache=&#123;&#125;</div><div class="line"><span class="meta">    @wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> cache:</div><div class="line">            cache[args]=func(*args)</div><div class="line">        <span class="keyword">return</span> cache[args]</div><div class="line">    <span class="keyword">return</span> wrap</div></pre></td></tr></table></figure>
<p><strong>DP思路就两种，自底向上——迭代与自上而下——递归（带备忘是为了防止重复计算）</strong></p>
<h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><p>0-1背包问题是指每个物品只有一个的情况下何时取得最大价值。</p>
<p>思路如下：</p>
<p>设前k个对象的最大价值<code>m(k,r)</code>，其中r为背包剩余的容量。如果k或r有一个为0，就有<code>m(k,r)==0</code>，作为边界条件。</p>
<p>其它情况下，考虑是否纳入最后一个对象<code>i=k-1</code></p>
<ul>
<li>如果<code>w[i]&gt;r</code>，那么显然不能加入它了。则有<code>m(k,r)=m(k-1,r)</code></li>
<li>反之，需要在加入与不加入取最大者。即<code>m(k,r)=max(m(k-1,r),m(k-1,r-w[i])+v[i])</code></li>
</ul>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#0-1背包问题</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack</span><span class="params">(w,v,c)</span>:</span></div><div class="line">    n=len(w)</div><div class="line">    m=[[<span class="number">0</span>]*(c+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">1</span>,c+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> w[k<span class="number">-1</span>]&gt;r:</div><div class="line">                m[k][r]  = m[k<span class="number">-1</span>][r]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                m[k][r]=max(m[k<span class="number">-1</span>][r],m[k<span class="number">-1</span>][r-w[k<span class="number">-1</span>]]+v[k<span class="number">-1</span>])</div><div class="line">    <span class="keyword">return</span> m[n][c]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec_knapsack</span><span class="params">(w,v,c)</span>:</span></div><div class="line"><span class="meta">    @memo</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(k,r)</span>:</span></div><div class="line">        <span class="comment">#设前k个对象的最大价值,r是剩余背包容量</span></div><div class="line">        <span class="keyword">if</span> k==<span class="number">0</span> <span class="keyword">or</span> r==<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        drop=m(k<span class="number">-1</span>,r) <span class="comment">#当丢掉最后一个对象时的价值</span></div><div class="line">        <span class="keyword">if</span> w[k<span class="number">-1</span>]&gt;r:</div><div class="line">            <span class="keyword">return</span> drop <span class="comment">#必须丢掉它</span></div><div class="line">        <span class="keyword">return</span> max(drop,v[k<span class="number">-1</span>]+m(k<span class="number">-1</span>,r-w[k<span class="number">-1</span>]))</div><div class="line">    <span class="keyword">return</span> m(len(w),c)</div><div class="line"><span class="comment">#注意这里函数中都用k-1,用k然后最后一行改成m(len(w)-1,c)可以吗？不行！！！</span></div><div class="line"><span class="comment">#正是由于有了k-1递归才会进行下去，不然栈溢出了。</span></div></pre></td></tr></table></figure>
<h2 id="无限制的背包问题"><a href="#无限制的背包问题" class="headerlink" title="无限制的背包问题"></a>无限制的背包问题</h2><p>设背包剩余容量为r时所能达到的最大价值是m(r)，那么r中的每一个值都代表了一个子问题。</p>
<p>分解过程围绕背包容量中最后一个单元是否用来进行。</p>
<ul>
<li>如果最后一个单元没用就有<code>m(r)=m(r-1)</code></li>
<li>如果用了，就会选择合适的对象，如果选择了i，那么<code>m(r)=m(r-w[i])+v[i]</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#完全背包问题</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec_unbounded_knapsack</span><span class="params">(w,v,c)</span>:</span></div><div class="line"><span class="meta">    @memo</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(r)</span>:</span></div><div class="line">        <span class="comment">#当前背包剩余容量为r时最大价值</span></div><div class="line">        <span class="keyword">if</span> r==<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        val=m(r<span class="number">-1</span>)</div><div class="line">        <span class="keyword">for</span> i,e <span class="keyword">in</span> enumerate(w): <span class="comment">#放进去哪一个是需要考虑的</span></div><div class="line">            <span class="keyword">if</span> e&gt;r:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            val=max(val,v[i]+m(r-w[i]))<span class="comment">#选择放还是不放它</span></div><div class="line">        <span class="keyword">return</span> val</div><div class="line">    <span class="keyword">return</span> m(c)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">unbounded_knapsack</span><span class="params">(w,v,c)</span>:</span></div><div class="line">    m=[<span class="number">0</span>]*(c+<span class="number">1</span>) <span class="comment">#m[r]表示当前背包剩余容量为r时最大价值</span></div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">1</span>,c+<span class="number">1</span>):</div><div class="line">        val=m[r<span class="number">-1</span>]</div><div class="line">        <span class="keyword">for</span> i,e <span class="keyword">in</span> enumerate(w):</div><div class="line">            <span class="keyword">if</span> e&gt;r:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            val=max(val , v[i]+m[r-w[i]])</div><div class="line">        m[r]=val</div><div class="line">    <span class="keyword">return</span> m[c]</div></pre></td></tr></table></figure>
<h2 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h2><p>用<code>C[i][j]</code>表示X[i]和Y[j]的LCS长度。</p>
<p>有以下递推公式：</p>
<ul>
<li><code>c[i][j]=0</code> 若i==j==0</li>
<li><code>c[i][j]=c[i-1][j-1]+1</code> 若i,j&gt;0且X[i]==Y[j]</li>
<li><code>c[i][j]=max(c[i][j-1],c[i-1][j])</code> 若i,j&gt;0且X[i]!=Y[j]</li>
</ul>
<p>代码中还用了<code>b[1..m,1..n]数组</code>,帮助构造最优解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LCS</span><span class="params">(X,Y)</span>:</span></div><div class="line">    m=len(X)<span class="number">-1</span></div><div class="line">    n=len(Y)<span class="number">-1</span></div><div class="line">    b=[[<span class="string">'#'</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(m+<span class="number">1</span>)]</div><div class="line">    c=[[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(m+<span class="number">1</span>)]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> X[i]==Y[j]:</div><div class="line">                c[i][j]=c[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span></div><div class="line">                b[i][j]=<span class="string">'wa'</span></div><div class="line">            <span class="keyword">elif</span> c[i<span class="number">-1</span>][j]&gt;=c[i][j<span class="number">-1</span>]:</div><div class="line">                c[i][j]=c[i<span class="number">-1</span>][j]</div><div class="line">                b[i][j]=<span class="string">'w'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                c[i][j]=c[i][j<span class="number">-1</span>]</div><div class="line">                b[i][j]=<span class="string">'a'</span></div><div class="line">    <span class="keyword">return</span> (c[m][n],b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_LCS</span><span class="params">(b,X,i,j)</span>:</span></div><div class="line">    <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> j==<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">if</span> b[i][j]==<span class="string">'wa'</span>:</div><div class="line">        print_LCS(b,X,i<span class="number">-1</span>,j<span class="number">-1</span>)</div><div class="line">        print(X[i],end=<span class="string">' '</span>)</div><div class="line">    <span class="keyword">elif</span> b[i][j]==<span class="string">'w'</span>:</div><div class="line">        print_LCS(b,X,i<span class="number">-1</span>,j)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print_LCS(b,X,i,j<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h2 id="LCS-string"><a href="#LCS-string" class="headerlink" title="LCS(string)"></a>LCS(string)</h2><p>和上面的思路几乎一样。</p>
<p>不过递推公式变了:</p>
<ul>
<li><code>c[i][j]=c[i-1][j-1]+1</code>  如果i,j&gt;0且X[i]==Y[j]</li>
<li><code>c[i][j]=0</code>  如果i,j&gt;0且X[i]!=Y[j]</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LCS_string</span><span class="params">(X,Y)</span>:</span></div><div class="line">    m=len(X)<span class="number">-1</span></div><div class="line">    n=len(Y)<span class="number">-1</span></div><div class="line">    b = [[<span class="string">'#'</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(m + <span class="number">1</span>)]</div><div class="line">    c = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(m + <span class="number">1</span>)]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> X[i]==Y[j]:</div><div class="line">                c[i][j]=c[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span></div><div class="line">                b[i][j]=<span class="string">'wa'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                c[i][j]=<span class="number">0</span></div><div class="line">    res=<span class="number">0</span></div><div class="line">    px=py=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> res&lt;c[x][y]:</div><div class="line">                res=c[x][y]</div><div class="line">                px=x</div><div class="line">                py=y</div><div class="line">    <span class="keyword">return</span> (res,b,px,py)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_LCS_string</span><span class="params">(b,X,i,j)</span>:</span></div><div class="line">    <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">or</span> j==<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">if</span> b[i][j]==<span class="string">'wa'</span>:</div><div class="line">        print_LCS_string(b,X,i<span class="number">-1</span>,j<span class="number">-1</span>)</div><div class="line">        print(X[i],end=<span class="string">' '</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span></div></pre></td></tr></table></figure>
<h2 id="最大和问题"><a href="#最大和问题" class="headerlink" title="最大和问题"></a>最大和问题</h2><p>假定输入为数组a，b[i]表示数组a中下标为i之前（包括）所有元素的最大和。</p>
<p>则有以下关系：</p>
<ul>
<li><code>b[j]=max(b[])</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[位运算]]></title>
      <url>https://www.prime666.com/2017/03/25/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>位运算的技巧总结。</p>
<a id="more"></a>
<h2 id="位操作基本概念"><a href="#位操作基本概念" class="headerlink" title="位操作基本概念"></a>位操作基本概念</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/afc0328beae9f539dd8886ee972ba47f.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>基本概念如上图。</p>
<p><strong>这里重点说明一下，不论左移还是右移，都是右操作数表示移动的位数。操作的都是补码！！！</strong></p>
<p>计算机中对数字的表示有三种方式：原码，反码，补码：</p>
<ul>
<li>原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1。比如十进制3如果用8个二进制位来表示就是 00000011， -3就是 10000011。</li>
<li>反码表示方法：正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</li>
<li>补码表示方法：正数的补码是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。 (即在反码的基础上+1)。或者在原码的基础上，从最低位到最高位找起，找到第一个1不变，以后各位1变0、0变1，符号位变不变取决于原码是表示负数本身还是负数绝对值（补码的符号位是1表示是负数，符号位是0表示是正数）。</li>
<li>移码表示方法：就是补码的符号位取反。目的是把有符号数变成无符号数好比较。</li>
</ul>
<h2 id="位操作的奇淫技巧-⊙﹏⊙"><a href="#位操作的奇淫技巧-⊙﹏⊙" class="headerlink" title="位操作的奇淫技巧(⊙﹏⊙)"></a>位操作的奇淫技巧(⊙﹏⊙)</h2><h3 id="断奇偶"><a href="#断奇偶" class="headerlink" title="断奇偶"></a>断奇偶</h3><p>判断奇数还是偶数就看最后一位是0还是1就好了，所以有以下技巧：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 2.7</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">    <span class="keyword">if</span> i&amp;<span class="number">1</span>:</div><div class="line">        <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<p>这会打印所有奇数，显然偶数也可以这样找出来。</p>
<h3 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a^=b</div><div class="line">b^=a</div><div class="line">a^=b</div><div class="line"><span class="comment">/*分析如下：</span></div><div class="line">a^=b意为a=a^b</div><div class="line">b^=a意为b=b^a=b^(a^b)=a  异或满足交换律和结合律</div><div class="line">a^=b意为a=a^b=(a^b)^b=a^b^a=b 注意这里第一个b不同于第二个b，第二个b由第二步知已经变成a了</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这里交换了a，b的值不用第三个变量（python里不用这个也可以原地交换O(∩_∩)O哈！）</p>
<h3 id="变换符号"><a href="#变换符号" class="headerlink" title="变换符号"></a>变换符号</h3><p>实际上就是求补运算，对一个正数求补就变成了负数，对一个负数求补就变成了正数（牢记计算机内部都是补码表示）。</p>
<p>求补过程：包括符号位在内，将操作数各位取反再在最低位+1。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2.7</span></div><div class="line">a=<span class="number">-5</span></div><div class="line"><span class="keyword">print</span> ~a+<span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="求绝对值"><a href="#求绝对值" class="headerlink" title="求绝对值"></a>求绝对值</h3><p>同理利用上述说到的求补运算。</p>
<p>先看下面的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2.7</span></div><div class="line">a=<span class="number">-5</span></div><div class="line"><span class="keyword">print</span> a&gt;&gt;<span class="number">31</span></div><div class="line"><span class="comment">#结果是-1</span></div></pre></td></tr></table></figure>
<p>所以这里Python似乎是算术右移。</p>
<p>这里可以更加简洁一些：</p>
<p><strong>对于任何数，与0异或都会保持不变，与-1即0xFFFFFFFF异或就相当于取反（各位取反的意思）。因此，a与i异或后再减i（因为i为0或-1，所以减i即是要么加0要么加1）也可以得到绝对值。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#2.7</span></div><div class="line">a=<span class="number">-5</span></div><div class="line">i=a&gt;&gt;<span class="number">31</span></div><div class="line"><span class="keyword">print</span> (i^a)-i</div></pre></td></tr></table></figure>
<p>这里就两个情况：i=0，则 0^a=a,结果是a本身的值；i=-1，则-1^a等于a的各位取反，-i相当于加1，则这个过程完成了求补。</p>
<h3 id="二进制高低位交换"><a href="#二进制高低位交换" class="headerlink" title="二进制高低位交换"></a>二进制高低位交换</h3><blockquote>
<p>给出一个16位的无符号整数。称这个二进制数的前8位为“高位”，后8位为“低位”。现在写一程序将它的高低位交换。例如，数34520用二进制表示为：</p>
<p>10000110 11011000</p>
<p>将它的高低位进行交换，我们得到了一个新的二进制数：</p>
<p>​      11011000 10000110</p>
<p>它即是十进制的55430。</p>
<p>这个问题用位操作解决起来非常方便，设x=34520=10000110 11011000(二进制) 由于x为无符号数，右移时会执行逻辑右移即高位补0，因此x右移8位将得到0000000010000110。而x左移8位将得到11011000  00000000。可以发现只要将x&gt;&gt;8与x&lt;&lt;8这两个数相或就可以得到11011000  10000110     </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">3344520</span>;</div><div class="line">        System.out.println(Integer.toBinaryString(a));</div><div class="line">        a=(a&gt;&gt;<span class="number">16</span>)|(a&lt;&lt;<span class="number">16</span>);</div><div class="line">        System.out.println(Integer.toBinaryString(a));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">输出结果如下：（可能前面的0会不输出，自己补全即可）</div><div class="line">0000  0000 0011 0011   0000 1000 1000 1000</div><div class="line">0000  1000 1000 1000   0000 0000 0011 0011</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>注意，上面引用的讲解是16位无符号数，java中int是32位 ，所以移动了16位。</p>
<h3 id="二进制逆序"><a href="#二进制逆序" class="headerlink" title="二进制逆序"></a>二进制逆序</h3><blockquote>
<p>可以通过如下步骤完成 16进制的逆序：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">第一步：每2位为一组，组内高低位交换</div><div class="line"></div><div class="line">      10 00 01 10  11 01 10 00</div><div class="line"></div><div class="line">  -- &gt;01 00 10 01 11 10 01 00</div><div class="line"></div><div class="line">第二步：每4位为一组，组内高低位交换</div><div class="line"></div><div class="line">      0100 1001 1110 0100</div><div class="line"></div><div class="line">  --&gt;0001 0110 1011 0001</div><div class="line"></div><div class="line">第三步：每8位为一组，组内高低位交换</div><div class="line"></div><div class="line">      00010110 10110001</div><div class="line"></div><div class="line">  --&gt;01100001 00011011</div><div class="line"></div><div class="line">第四步：每16位为一组，组内高低位交换</div><div class="line"></div><div class="line">      01100001 00011011</div><div class="line"></div><div class="line">  --&gt;00011011 01100001</div><div class="line"></div><div class="line">对第一步，可以依次取出每2位作一组，再组内高低位交换，这样有点麻烦，下面介绍一种非常有技巧的方法。先分别取10000110 11011000的奇数位和偶数位，空位以下划线表示。</div><div class="line"></div><div class="line">      原 数    10000110 11011000</div><div class="line"></div><div class="line">      奇数位   1_0_0_1_ 1_0_1_0_</div><div class="line"></div><div class="line">      偶数位   _0_0_1_0 _1_1_0_0</div><div class="line"></div><div class="line">将下划线用0填充，可得</div><div class="line"></div><div class="line">      原 数    10000110 11011000</div><div class="line"></div><div class="line">      奇数位   10000010 10001000</div><div class="line"></div><div class="line">      偶数位   00000100 01010000</div><div class="line"></div><div class="line">再将奇数位右移一位，偶数位左移一位，此时将这两个数据相或即可以达到奇偶位上数据交换的效果了。</div><div class="line">（很好理解，错开相加嘛）</div><div class="line"></div><div class="line">      原 数     10000110 11011000</div><div class="line"></div><div class="line">      奇数位右移 01000001 01000100  </div><div class="line"></div><div class="line">      偶数位左移 00001000 10100000</div><div class="line"></div><div class="line">      相或得到   01001001 11100100</div><div class="line"></div><div class="line">可以看出，结果完全达到了奇偶位的数据交换，再来考虑代码的实现——</div><div class="line"></div><div class="line">      取x的奇数位并将偶数位用0填充用代码实现就是x &amp; 0xAAAA</div><div class="line"></div><div class="line">      取x的偶数位并将奇数位用0填充用代码实现就是x &amp; 0x5555</div><div class="line"></div><div class="line">因此，第一步就用代码实现就是：</div><div class="line"></div><div class="line">       x = ((x &amp; 0xAAAA) &gt;&gt; 1) | ((x &amp; 0x5555) &lt;&lt; 1);</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>上述讲解中，用了16位的，这里还是改成32位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">        a = ((a &amp; <span class="number">0xAAAA</span>) &gt;&gt; <span class="number">1</span>) | ((a &amp; <span class="number">0x5555</span>) &lt;&lt; <span class="number">1</span>);</div><div class="line">        a = ((a &amp; <span class="number">0xCCCC</span>) &gt;&gt; <span class="number">2</span>) | ((a &amp; <span class="number">0x3333</span>) &lt;&lt; <span class="number">2</span>);</div><div class="line">        a = ((a &amp; <span class="number">0xF0F0</span>) &gt;&gt; <span class="number">4</span>) | ((a &amp; <span class="number">0x0F0F</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">        a = ((a &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>) | ((a &amp; <span class="number">0x00FF</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line"><span class="comment">/*16位*/</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a = ((a &amp; <span class="number">0xCCCCCCCC</span>) &gt;&gt; <span class="number">2</span>) | ((a &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</div><div class="line">a = ((a &amp; <span class="number">0xF0F0F0F0</span>) &gt;&gt; <span class="number">4</span>) | ((a &amp; <span class="number">0x0F0F0F0F</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">a = ((a &amp; <span class="number">0xFF00FF00</span>) &gt;&gt; <span class="number">8</span>) | ((a &amp; <span class="number">0x00FF00FF</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line">a=  ((a&amp;<span class="number">0xFFFF0000</span>)&gt;&gt;<span class="number">16</span>)|((a&amp;<span class="number">0x0000FFFF</span>)&lt;&lt;<span class="number">16</span>);</div><div class="line"><span class="comment">/*32位*/</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">上述结果如下：</div><div class="line">1000 0110 1101 1000</div><div class="line">0001 1011 0110 0001</div><div class="line"></div><div class="line">0000 0000 0000 0000	1000 0110 1101 1000</div><div class="line">0001 1011 0110 0001 0000 0000 0000 0000</div><div class="line">还是0自己补齐吧。</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>很遗憾，这里发现了一个坑</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintfBinary</span><span class="params">(T a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="keyword">sizeof</span>(a) * <span class="number">8</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ((a &gt;&gt; i) &amp; <span class="number">1</span>)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">16</span>)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">3344520</span>;</div><div class="line">    PrintfBinary(a);</div><div class="line">    a=((a&amp;<span class="number">0xAAAAAAAA</span>)&gt;&gt;<span class="number">1</span>)|((a&amp;<span class="number">0x55555555</span>)&lt;&lt;<span class="number">1</span>);</div><div class="line">    a = ((a &amp; <span class="number">0xCCCCCCCC</span>) &gt;&gt; <span class="number">2</span>) | ((a &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</div><div class="line">    a = ((a &amp; <span class="number">0xF0F0F0F0</span>) &gt;&gt; <span class="number">4</span>) | ((a &amp; <span class="number">0x0F0F0F0F</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">    a = ((a &amp; <span class="number">0xFF00FF00</span>) &gt;&gt; <span class="number">8</span>) | ((a &amp; <span class="number">0x00FF00FF</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line">    a=  ((a&amp;<span class="number">0xFFFF0000</span>)&gt;&gt;<span class="number">16</span>)|((a&amp;<span class="number">0x0000FFFF</span>)&lt;&lt;<span class="number">16</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当这里用3344520时，c++运行正确而java错误了。。</p>
<p>java:</p>
<p>0000 0000 0011 0011 0000 1000 1000 1000<br>1111 1111 1111 1111 1100 1100 0000 0000</p>
<p>c++:</p>
<p>0000 0000 0011 0011 0000 1000 1000 1000<br>0001 0001 0001 0000 1100 1100 0000 0000</p>
<p>这个坑待填。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
<h3 id="统计二进制中1的个数"><a href="#统计二进制中1的个数" class="headerlink" title="统计二进制中1的个数"></a>统计二进制中1的个数</h3><p>最快的方法，虽然看着就蛋疼。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintfBinary</span><span class="params">(T a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="keyword">sizeof</span>(a) * <span class="number">8</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ((a &gt;&gt; i) &amp; <span class="number">1</span>)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">16</span>)</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">55</span>;</div><div class="line">    PrintfBinary(a);</div><div class="line">    a=((a&amp;<span class="number">0xAAAAAAAA</span>)&gt;&gt;<span class="number">1</span>)+(a&amp;<span class="number">0x55555555</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">    a = ((a &amp; <span class="number">0xCCCCCCCC</span>) &gt;&gt; <span class="number">2</span>) + (a &amp; <span class="number">0x33333333</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">    a = ((a &amp; <span class="number">0xF0F0F0F0</span>) &gt;&gt; <span class="number">4</span>) + (a &amp; <span class="number">0x0F0F0F0F</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">    a = ((a &amp; <span class="number">0xFF00FF00</span>) &gt;&gt; <span class="number">8</span>) + (a &amp; <span class="number">0x00FF00FF</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">    a=  ((a&amp;<span class="number">0xFFFF0000</span>)&gt;&gt;<span class="number">16</span>)+(a&amp;<span class="number">0x0000FFFF</span>);</div><div class="line">    PrintfBinary(a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和二进制逆序相似。</p>
<p>第一步：每2位为一组，组内高低位相加</p>
<p>​      10 00 01 10  11 01 10 00</p>
<p>  –&gt;01 00 01 01  10 01 01 00</p>
<p>第二步：每4位为一组，组内高低位相加(这里<em>高低位是一组内，前两个加后两个</em>)</p>
<p>​      0100 0101 1001 0100</p>
<p>  –&gt;0001 0010 0011 0001</p>
<p>第三步：每8位为一组，组内高低位相加</p>
<p>​      00010010 00110001</p>
<p>  –&gt;00000011 00000100</p>
<p>第四步：每16位为一组，组内高低位相加</p>
<p>​      00000011 00000100</p>
<p>  –&gt;00000000 00000111</p>
<p>这样最后得到的00000000 00000111即7即34520二进制中1的个数。类似上文中对二进制逆序的做法不难实现第一步的代码：</p>
<p>​       x = ((x &amp; 0xAAAA) &gt;&gt; 1) + (x &amp; 0x5555);</p>
<p>我的解法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> n&lt;<span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">32</span>-bin(-n<span class="number">-1</span>).count(<span class="string">'1'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> bin(n).count(<span class="string">'1'</span>)</div></pre></td></tr></table></figure>
<p>我这里用了python的库，bin函数转二进制，但是转换的结果是原码的形式，符号仍然保留。正数时候很好处理，关键在于负数。负数求补是正数，求补的过程是先求反码（各位取反）再加1。我这里逆序操作，先把正数-1，这时候再取反就是原来负数的补码表示，一共32位，so~~~</p>
<p>别人的解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </div><div class="line">          <span class="keyword">int</span> count = <span class="number">0</span>; </div><div class="line"></div><div class="line">          <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123; </div><div class="line"></div><div class="line">              count++; </div><div class="line"></div><div class="line">              n = n &amp; (n - <span class="number">1</span>);</div><div class="line"></div><div class="line">           &#125; </div><div class="line">          <span class="keyword">return</span> count; </div><div class="line">      &#125; </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p>
<p>​     举个例子一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p>
<h3 id="找出只出现一次的数字"><a href="#找出只出现一次的数字" class="headerlink" title="找出只出现一次的数字"></a>找出只出现一次的数字</h3><p>利用异或运算的两个特性：</p>
<ol>
<li>自己与自己异或结果为0</li>
<li>异或满足交换律。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">15</span>;</div><div class="line">    <span class="keyword">int</span> a[MAXN] = &#123;<span class="number">1</span>, <span class="number">347</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">889</span>, <span class="number">712</span>, <span class="number">889</span>, <span class="number">347</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">65</span>, <span class="number">13</span>, <span class="number">712</span>&#125;;</div><div class="line">    <span class="keyword">int</span> lostNum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++)</div><div class="line">        lostNum ^= a[i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"缺失的数字为:  %d\n"</span>, lostNum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>快速找到只出现一次的数字。</p>
<p>如果找到两个出现一次的数字呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">L=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(L)</span>:</span></div><div class="line">    tmp=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</div><div class="line">        tmp^=x</div><div class="line">    index=<span class="number">0</span></div><div class="line">    a=b=<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">        <span class="keyword">if</span> ((tmp&gt;&gt;i)&amp;<span class="number">1</span>)==<span class="number">1</span>:</div><div class="line">            index=i</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</div><div class="line">        <span class="keyword">if</span> ((x&gt;&gt;index)&amp;<span class="number">1</span>)==<span class="number">1</span>:</div><div class="line">            a^=x</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            b^=x</div><div class="line">    <span class="keyword">return</span> (a,b)</div><div class="line"></div><div class="line"><span class="keyword">print</span> search(L)</div></pre></td></tr></table></figure>
<p>设题目中这两个只出现1次的数字分别为A和B，如果能将A，B分开到二个数组中，那显然符合“异或”解法的关键点了。因此这个题目的关键点就是将A，B分开到二个数组中。<strong>由于A，B肯定是不相等的，因此在二进制上必定有一位是不同的。根据这一位是0还是1可以将A，B分开到A组和B组。</strong>而这个数组中其它数字要么就属于A组，要么就属于B组。再对A组和B组分别执行“异或”解法就可以得到A，B了。而要判断A，B在哪一位上不相同，只要根据A异或B的结果就可以知道了，这个结果在二进制上为1的位都说明A，B在这一位上是不相同的。</p>
<p>所以，程序中先把所有元素异或，结果中为1的位就是A、B中不相同的位，从最低位开始找到一个，用它分组，A，B必在两个组中。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反射]]></title>
      <url>https://www.prime666.com/2017/03/23/%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>谈谈java的反射机制，深入底层了解一波。</p>
<a id="more"></a>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>用java命令运行程序时，会启动jvm进程，无论程序多么复杂，始终在jvm的进程之中。</p>
<p>当程序主动使用某个类时，如果该类还未在内存中，会发生<strong>加载、连接和初始化</strong>三个阶段。</p>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>加载是将类的class文件读入内存，并为之创建一个<code>java.lang.Class</code>对象。加载由类加载器负责，可以通过继承<code>ClassLoader</code>来创建自己的类加载器。</p>
<p>一旦一个类被载入JVM中，那么同一个类就不会被再次载入了。JVM用<strong>包名、类名和类加载器作为标识</strong>。（Java里只有前两者唯一去标识）</p>
<p>类加载器有3种：</p>
<ul>
<li>Bootstrap ClassLoader</li>
<li>Extension ClassLoader</li>
<li>System ClassLoader</li>
</ul>
<p>第一个是根加载器，负责加载java核心类。可以用<code>-Xbootclasspath</code>或<code>-D</code>来指定<code>sun.boot.class.path</code>系统属性指定加载附加的类。它不是<code>java.lang.ClassLoader</code>的子类，由JVM自身实现。</p>
<p>第二个负责加载JRE的拓展目录（/jre/lib/ext或由<code>java.ext.dirs</code>系统属性指定的目录）中JAR包的类。</p>
<p>第三个负责加载来自<code>-classpath</code>,<code>java.class.path系统属性</code>或<code>CLASSPATH环境变量指定的jar包和类路径</code></p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>连接负责把类的二进制数据整合到JRE中。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在这个阶段，JVM负责对类进行初始化，主要是对类变量进行初始化。</p>
<p>主要有三个步骤：</p>
<ol>
<li>假如这个类没被加载和连接，先加载并连接。</li>
<li>假如父类没有初始化，父类初始化，以此类推。</li>
<li>假如类中有初始化语句（声明类 变量时指定初始值或静态初始化块），依次执行它们。</li>
</ol>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>程序需要在运行时得知类和对象的真实信息，可以有两种方法：</p>
<ol>
<li>instanceof运算符</li>
<li>反射</li>
</ol>
<h3 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h3><p>获得Class对象有三种方法：</p>
<ol>
<li><p><code>Class.forName(String name)</code></p>
<p>name必须是添加完整包名的字符串。</p>
</li>
<li><p>调用某个类的<code>class</code>属性</p>
</li>
<li><p>调用对象的<code>getClass()</code>方法，它是<code>java.lang.Object</code>中的方法。故而所有对象都可以调用。</p>
</li>
</ol>
<p>常用方法如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/1.JPG" alt="1" title="">
                </div>
                <div class="image-caption">1</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/3.JPG" alt="2" title="">
                </div>
                <div class="image-caption">2</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/4.JPG" alt="3" title="">
                </div>
                <div class="image-caption">3</div>
            </figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.*;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">// 定义可重复注解</span></div><div class="line"><span class="meta">@Repeatable</span>(Annos.class)</div><div class="line"><span class="meta">@interface</span> Anno &#123;&#125;</div><div class="line"><span class="meta">@Retention</span>(value=RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> Annos &#123;</div><div class="line">    Anno[] value();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 使用4个注解修饰该类</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(value=<span class="string">"unchecked"</span>)</div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="comment">// 使用重复注解修饰该类</span></div><div class="line"><span class="meta">@Anno</span></div><div class="line"><span class="meta">@Anno</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 为该类定义一个私有的构造器</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ClassTest</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 定义一个有参数的构造器</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ClassTest</span><span class="params">(String name)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"执行有参数的构造器"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 定义一个无参数的info方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"执行无参数的info方法"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 定义一个有参数的info方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String str)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"执行有参数的info方法"</span></div><div class="line">			+ <span class="string">"，其str参数值："</span> + str);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 定义一个测试用的内部类</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span></div><div class="line">	&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 下面代码可以获取ClassTest对应的Class</span></div><div class="line">		Class&lt;ClassTest&gt; clazz = ClassTest.class;</div><div class="line">		<span class="comment">// 获取该Class对象所对应类的全部构造器</span></div><div class="line">		Constructor[] ctors = clazz.getDeclaredConstructors();</div><div class="line">		System.out.println(<span class="string">"ClassTest的全部构造器如下："</span>);</div><div class="line">		<span class="keyword">for</span> (Constructor c : ctors)</div><div class="line">		&#123;</div><div class="line">			System.out.println(c);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 获取该Class对象所对应类的全部public构造器</span></div><div class="line">		Constructor[] publicCtors = clazz.getConstructors();</div><div class="line">		System.out.println(<span class="string">"ClassTest的全部public构造器如下："</span>);</div><div class="line">		<span class="keyword">for</span> (Constructor c : publicCtors)</div><div class="line">		&#123;</div><div class="line">			System.out.println(c);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 获取该Class对象所对应类的全部public方法</span></div><div class="line">		Method[] mtds = clazz.getMethods();</div><div class="line">		System.out.println(<span class="string">"ClassTest的全部public方法如下："</span>);</div><div class="line">		<span class="keyword">for</span> (Method md : mtds)</div><div class="line">		&#123;</div><div class="line">			System.out.println(md);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 获取该Class对象所对应类的指定方法</span></div><div class="line">		System.out.println(<span class="string">"ClassTest里带一个字符串参数的info()方法为："</span></div><div class="line">			+ clazz.getMethod(<span class="string">"info"</span> , String.class));<span class="comment">//注意这里，第二个参数。</span></div><div class="line">		<span class="comment">// 获取该Class对象所对应类的上的全部注解</span></div><div class="line">		Annotation[] anns = clazz.getAnnotations();</div><div class="line">		System.out.println(<span class="string">"ClassTest的全部Annotation如下："</span>);</div><div class="line">		<span class="keyword">for</span> (Annotation an : anns)</div><div class="line">		&#123;</div><div class="line">			System.out.println(an);</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"该Class元素上的@SuppressWarnings注解为："</span></div><div class="line">			+ Arrays.toString(clazz.getAnnotationsByType(SuppressWarnings.class)));</div><div class="line">		System.out.println(<span class="string">"该Class元素上的@Anno注解为："</span></div><div class="line">			+ Arrays.toString(clazz.getAnnotationsByType(Anno.class)));</div><div class="line">		<span class="comment">// 获取该Class对象所对应类的全部内部类</span></div><div class="line">		Class&lt;?&gt;[] inners = clazz.getDeclaredClasses();</div><div class="line">		System.out.println(<span class="string">"ClassTest的全部内部类如下："</span>);</div><div class="line">		<span class="keyword">for</span> (Class c : inners)</div><div class="line">		&#123;</div><div class="line">			System.out.println(c);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 使用Class.forName方法加载ClassTest的Inner内部类</span></div><div class="line">		Class inClazz = Class.forName(<span class="string">"ClassTest$Inner"</span>);</div><div class="line">		<span class="comment">// 通过getDeclaringClass()访问该类所在的外部类</span></div><div class="line">		System.out.println(<span class="string">"inClazz对应类的外部类为："</span> +</div><div class="line">			inClazz.getDeclaringClass());</div><div class="line">		System.out.println(<span class="string">"ClassTest的包为："</span> + clazz.getPackage());</div><div class="line">		System.out.println(<span class="string">"ClassTest的父类为："</span> + clazz.getSuperclass());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由Class对象可以得到该类的方法(Method对象)，构造器（Constructor对象）和成员变量（Field对象）。它们都位于java.lang.reflect包下。</p>
<h3 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h3><p>一般程序需要动态创建类的对象时才考虑反射，比较性能局限。（原来java也可以动态创建o(╯□╰)o）</p>
<h4 id="通过Class对象的newInstance（）方法创建实例"><a href="#通过Class对象的newInstance（）方法创建实例" class="headerlink" title="通过Class对象的newInstance（）方法创建实例"></a>通过Class对象的newInstance（）方法创建实例</h4><p>利用默认构造器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolFactory</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 定义一个对象池,前面是对象名，后面是实际对象</span></div><div class="line">	<span class="keyword">private</span> Map&lt;String ,Object&gt; objectPool = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">	<span class="comment">// 定义一个创建对象的方法，</span></div><div class="line">	<span class="comment">// 该方法只要传入一个字符串类名，程序可以根据该类名生成Java对象</span></div><div class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span></span></div><div class="line">		<span class="keyword">throws</span> InstantiationException</div><div class="line">		, IllegalAccessException , ClassNotFoundException</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 根据字符串来获取对应的Class对象</span></div><div class="line">		Class&lt;?&gt; clazz = Class.forName(clazzName);</div><div class="line">		<span class="comment">// 使用clazz对应类的默认构造器创建实例</span></div><div class="line">		<span class="keyword">return</span> clazz.newInstance();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 该方法根据指定文件来初始化对象池，</span></div><div class="line">	<span class="comment">// 它会根据配置文件来创建对象</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">(String fileName)</span></span></div><div class="line">		<span class="keyword">throws</span> InstantiationException</div><div class="line">		, IllegalAccessException ,ClassNotFoundException</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span>(</div><div class="line">			FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName))</div><div class="line">		&#123;</div><div class="line">			Properties props = <span class="keyword">new</span> Properties();</div><div class="line">			props.load(fis);</div><div class="line">			<span class="keyword">for</span> (String name : props.stringPropertyNames())</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// 每取出一对key-value对，就根据value创建一个对象</span></div><div class="line">				<span class="comment">// 调用createObject()创建对象，并将对象添加到对象池中</span></div><div class="line">				objectPool.put(name ,</div><div class="line">					createObject(props.getProperty(name)));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"读取"</span> + fileName + <span class="string">"异常"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String name)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 从objectPool中取出指定name对应的对象。</span></div><div class="line">		<span class="keyword">return</span> objectPool.get(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception</div><div class="line">	&#123;</div><div class="line">		ObjectPoolFactory pf = <span class="keyword">new</span> ObjectPoolFactory();</div><div class="line">		pf.initPool(<span class="string">"obj.txt"</span>);</div><div class="line">		System.out.println(pf.getObject(<span class="string">"a"</span>));      <span class="comment">// ①</span></div><div class="line">		System.out.println(pf.getObject(<span class="string">"b"</span>));      <span class="comment">// ②</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*obj.txt文件中：</span></div><div class="line">a=java.util.Date</div><div class="line">b=javax.swing.JFrame</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="通过Constructor的newInstance-方法"><a href="#通过Constructor的newInstance-方法" class="headerlink" title="通过Constructor的newInstance()方法"></a>通过Constructor的newInstance()方法</h4><p>这样可以选择构造器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateJFrame</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 获取JFrame对应的Class对象</span></div><div class="line">		Class&lt;?&gt; jframeClazz = Class.forName(<span class="string">"javax.swing.JFrame"</span>);</div><div class="line">		<span class="comment">// 获取JFrame中带一个字符串参数的构造器</span></div><div class="line">		Constructor ctor = jframeClazz</div><div class="line">			.getConstructor(String.class);</div><div class="line">		<span class="comment">// 调用Constructor的newInstance方法创建对象</span></div><div class="line">		Object obj = ctor.newInstance(<span class="string">"测试窗口"</span>);</div><div class="line">		<span class="comment">// 输出JFrame对象</span></div><div class="line">		System.out.println(obj);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多线程and多进程]]></title>
      <url>https://www.prime666.com/2017/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8Band%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>python并行计算。</p>
<a id="more"></a>
<h1 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h1><blockquote>
<p>The <code>concurrent.futures</code> module provides a high-level interface for asynchronously executing callables.</p>
<p>The asynchronous execution can be performed with threads, using <code>ThreadPoolExecutor</code>, or separate processes, using <code>ProcessPoolExecutor</code>. Both implement the same interface, which is defined by the abstract <code>Executor</code> class.</p>
</blockquote>
<h2 id="Executor-Objects"><a href="#Executor-Objects" class="headerlink" title="Executor Objects"></a>Executor Objects</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">concurrent</span>.<span class="title">futures</span>.<span class="title">Executor</span></span></div></pre></td></tr></table></figure>
<p>提供了异步调用的一个抽象类，子类有<code>ThreadPoolExecutor</code>和<code>ProcessPoolExecutor</code>。</p>
<p>方法：</p>
<ol>
<li><p><code>submit(fn, *args, **kwargs)</code></p>
<p>Schedules the callable, fn, to be executed as fn(<em>args *</em>kwargs) and returns a Future object representing the execution of the callable.</p>
</li>
<li><p><code>`map(func, *iterables*, *timeout=None, chunksize=1)</code></p>
<p>等于<code>map(func,*iterables)</code>除了func可能被同时调用。</p>
<p>func：为需要异步执行的函数iterables：可以是一个能迭代的对象，例如列表等。每一次func执行，会从iterables中取参数。</p>
<p>每一个异步操作，能用timeout参数来设置超时时间，timeout的值可以是int或float型，如果操作timeout的话，会<code>raises concurrent.futures.TimeoutError</code>。如果timeout参数不指定的话，则不设置超时时间。</p>
<p>map函数异步执行完成之后，结果也是list，数据需要从list中取出。</p>
</li>
<li><p><code>shutdown(wait=True)</code></p>
<p>建议用with语句而不是这个设置。不管wait值如何，程序只有在执行完所有才会退出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> e:</div><div class="line">    e.submit(shutil.copy, <span class="string">'src1.txt'</span>, <span class="string">'dest1.txt'</span>)</div><div class="line">    e.submit(shutil.copy, <span class="string">'src2.txt'</span>, <span class="string">'dest2.txt'</span>)</div><div class="line">    e.submit(shutil.copy, <span class="string">'src3.txt'</span>, <span class="string">'dest3.txt'</span>)</div><div class="line">    e.submit(shutil.copy, <span class="string">'src4.txt'</span>, <span class="string">'dest4.txt'</span>)</div></pre></td></tr></table></figure>
<h2 id="ProcessPoolExecutor和ThreadPoolExecutor"><a href="#ProcessPoolExecutor和ThreadPoolExecutor" class="headerlink" title="ProcessPoolExecutor和ThreadPoolExecutor"></a>ProcessPoolExecutor和ThreadPoolExecutor</h2><p>都是Executor的实例类，可以调用上述方法。区别在于一个维护线程池一个是进程池。</p>
<p>对于进程，需要放在主模块中，不然会报错（无限递归）。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>https://www.prime666.com/2017/03/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>结合算法导论第三版和算法第四版笔记</p>
<a id="more"></a>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(array)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(array)):</div><div class="line">        key=array[i]</div><div class="line">        j=i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> array[j]&gt;key:</div><div class="line">            array[j+<span class="number">1</span>]=array[j]</div><div class="line">            j-=<span class="number">1</span></div><div class="line">        array[j+<span class="number">1</span>]=key</div></pre></td></tr></table></figure>
<p>插入排序只要记得就想扑克牌一样就好了，没什么大的问题。这里用了比较经典的思路，就是“移动”，而不是相邻间两两交换。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__merge</span><span class="params">(arr,low,mid,high)</span>:</span></div><div class="line">    buff=arr[:]</div><div class="line">    i=low</div><div class="line">    j=mid+<span class="number">1</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(low,high+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> i&gt;mid:</div><div class="line">            arr[k]=buff[j]</div><div class="line">            j+=<span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> j&gt;high:</div><div class="line">            arr[k]=buff[i]</div><div class="line">            i+=<span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> buff[i]&lt;buff[j]:</div><div class="line">            arr[k]=buff[i]</div><div class="line">            i+=<span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> buff[i]&gt;=buff[j]:</div><div class="line">            arr[k]=buff[j]</div><div class="line">            j+=<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'神一般的错误'</span>)</div><div class="line">            sys.exit(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array,low,high)</span>:</span></div><div class="line">    <span class="keyword">if</span> low&lt;high:</div><div class="line">        mid=(low+high)//<span class="number">2</span></div><div class="line">        merge_sort(array,low,mid)</div><div class="line">        merge_sort(array,mid+<span class="number">1</span>,high)</div><div class="line">        __merge(array,low,mid,high)</div></pre></td></tr></table></figure>
<p>作为分治算法的一种应用，主要大头在于合并而不在于分（区别于另一个分治算法快排）。合并时需要额外数组空间，可惜不是原地排序。</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__partition</span><span class="params">(array,start,end)</span>:</span></div><div class="line">    x=array[end]<span class="comment">#末尾元素做主元</span></div><div class="line">    i=start<span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(start,end):</div><div class="line">        <span class="keyword">if</span> array[j]&lt;x:</div><div class="line">            i+=<span class="number">1</span></div><div class="line">            array[i],array[j]=array[j],array[i]</div><div class="line">    array[i+<span class="number">1</span>],array[end]=array[end],array[i+<span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> i+<span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_partition</span><span class="params">(a,low,high)</span>:</span></div><div class="line">    <span class="comment">#供quick_sort调用</span></div><div class="line">    i=low+<span class="number">1</span></div><div class="line">    j=high</div><div class="line">    v=a[low]</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">while</span> a[i]&lt;v:</div><div class="line">            i+=<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i&gt;high:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">while</span> a[j]&gt;v:</div><div class="line">            j-=<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> j&lt;low:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> i&gt;=j:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        a[i],a[j]=a[j],a[i]</div><div class="line">    a[low],a[j]=a[j],a[low]</div><div class="line">    <span class="keyword">return</span> j</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(array,start,end)</span>:</span></div><div class="line">    <span class="keyword">if</span> start&lt;end:</div><div class="line">        mid=__partition(array,start,end)</div><div class="line">        print(array)</div><div class="line">        quick_sort(array,start,mid<span class="number">-1</span>)</div><div class="line">        quick_sort(array,mid+<span class="number">1</span>,end)</div></pre></td></tr></table></figure>
<p>应用最多的了，注意这里用了两种分法，一个是两边到中间，一个是从左到右（算法导论的新颖啊）。</p>
<h2 id="堆排序-amp-amp-优先级队列"><a href="#堆排序-amp-amp-优先级队列" class="headerlink" title="堆排序&amp;&amp;优先级队列"></a>堆排序&amp;&amp;优先级队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Priority_Queue</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">        length从1到最后一个元素，0空出来没用</div><div class="line">    '''</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.pq = [<span class="number">0</span>] * <span class="number">101</span></div><div class="line">        self.length = <span class="number">0</span>  <span class="comment"># 优先队列</span></div><div class="line">        self.real_len = <span class="number">0</span>  <span class="comment"># 堆排序</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></div><div class="line">        <span class="keyword">if</span> isinstance(a, list):  <span class="comment"># isinstance和java中instanceof一样，用type就对子类无效了</span></div><div class="line">            self.pq = a[:]</div><div class="line">            self.real_len = self.length = len(a)</div><div class="line">            self.pq[self.length:] = [<span class="number">0</span>]</div><div class="line">            self.pq[<span class="number">1</span>:] = self.pq[:]  <span class="comment"># 空出第一个元素</span></div><div class="line">            <span class="comment"># for index,value in enumerate(self.pq):</span></div><div class="line">            <span class="comment">#     self.__swim(index)</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,self.length+<span class="number">1</span>):</div><div class="line">                self.__swim(i)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.length</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isempty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.length == <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, v)</span>:</span></div><div class="line">        self.length += <span class="number">1</span></div><div class="line">        self.real_len += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self.length &gt; <span class="number">100</span>:</div><div class="line">            self.pq.extend([<span class="number">0</span>] * <span class="number">100</span>)</div><div class="line">        self.pq[self.length] = v</div><div class="line">        self.__swim(self.length)  <span class="comment"># 每当加入一个元素，都应该从它开始上浮到它该待的地方</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__swim</span><span class="params">(self,k)</span>:</span></div><div class="line">        <span class="comment">##大顶堆，大的上浮</span></div><div class="line">        <span class="keyword">while</span> k&gt;<span class="number">1</span> <span class="keyword">and</span> self.pq[k//<span class="number">2</span>]&lt;self.pq[k]:</div><div class="line">            self.pq[k],self.pq[k//<span class="number">2</span>]=self.pq[k//<span class="number">2</span>],self.pq[k]</div><div class="line">            k=k//<span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sink</span><span class="params">(self,k)</span>:</span></div><div class="line">        <span class="comment">#j是儿子，k是爹</span></div><div class="line">        j=<span class="number">2</span>*k</div><div class="line">        <span class="keyword">while</span> j&lt;=self.length :</div><div class="line">            <span class="comment">#让j指向较大的儿子</span></div><div class="line">            <span class="keyword">if</span> j&lt; self.length <span class="keyword">and</span> self.pq[j]&lt;self.pq[j+<span class="number">1</span>]:</div><div class="line">            <span class="comment"># j&lt;self.length一定要有，防止2*k是最后一个元素了</span></div><div class="line">                j+=<span class="number">1</span></div><div class="line">            <span class="comment">#如果爹不比儿子们小，那就下沉结束了</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.pq[k]&lt;self.pq[j]:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            self.pq[k],self.pq[j]=self.pq[j],self.pq[k]</div><div class="line">            k=j</div><div class="line">            j=<span class="number">2</span>*k</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delmax</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#最大的放最后面了</span></div><div class="line">        self.pq[<span class="number">1</span>],self.pq[self.length]=self.pq[self.length],self.pq[<span class="number">1</span>]</div><div class="line">        self.length -= <span class="number">1</span></div><div class="line">        self.__sink(<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> self.pq[self.length+<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.pq[<span class="number">1</span>:self.real_len+<span class="number">1</span>])</div><div class="line">        print(<span class="string">'length=='</span>,self.length)</div><div class="line">        print(<span class="string">'real_length='</span>,self.real_len)</div><div class="line">        print(<span class="string">'-'</span>*<span class="number">100</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.length,<span class="number">1</span>,<span class="number">-1</span>):</div><div class="line">            self.delmax()</div></pre></td></tr></table></figure>
<p>上浮和下沉中的k都是对应下标，插入时由于从末尾插入需要k为length，需要上浮。而删除最大元素后，下标1需要下沉。</p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span><span class="params">(array)</span>:</span></div><div class="line">    buff=array[:]</div><div class="line">    c=[<span class="number">0</span>]*(max(array)+<span class="number">1</span>)</div><div class="line">    <span class="comment">#c数组对应下标记录等于该下标的元素个数</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> array:</div><div class="line">        c[x]=c[x]+<span class="number">1</span></div><div class="line">    <span class="comment">#现在，c数组对应下标记录小于等于该下标的元素个数</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(c)):</div><div class="line">        c[i]=c[i<span class="number">-1</span>]+c[i]</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> array:</div><div class="line">        buff[c[x]<span class="number">-1</span>]=x</div><div class="line">        c[x]=c[x]<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> buff</div></pre></td></tr></table></figure>
<p>新奇的思路，需要用数组记录每个元素的“位置”。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异常]]></title>
      <url>https://www.prime666.com/2017/03/13/%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>java异常机制的笔记~:hand:</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>异常机制主要依赖于try、catch、finally、throw和throws五个关键字。try后紧跟可能引发异常的代码块，catch用于捕捉异常，对应一个异常类型和一个代码块。catch块后可以跟finally块，用于回收在try块里打开的物理资源（如打开的文件等，java垃圾回收机制只能回收堆内存中的资源），异常机制会保证finally块总被执行（即使catch中有return语句，也会保证finally先执行，但是如果用了System.exit()关闭jvm则finally失去执行的机会）。throws关键字主要用在方法签名中，用于声明该方法可能抛出的异常。而throw用于主动抛出一个实际的异常（后跟一个异常对象）。</p>
<p><strong>只有try块是必需的，catch和finally是可选的，但是二者必须有一个。try-&gt;catch-&gt;finally的相对顺序不能变。注意捕获异常时子类在前父类在后。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> a = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">			<span class="keyword">int</span> b = Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">int</span> c = a / b;</div><div class="line">			System.out.println(<span class="string">"您输入的两个数相除的结果是："</span> + c );</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IndexOutOfBoundsException ie)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"数组越界：运行程序时输入的参数个数不够"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NumberFormatException ne)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"数字格式异常：程序只能接受整数参数"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ArithmeticException ae)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"算术异常"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"未知异常"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>catch可以一次捕获多个异常，中间用<code>|</code>分隔即可，捕获多个时异常变量有隐式<code>final</code>修饰。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiExceptionTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> a = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">			<span class="keyword">int</span> b = Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">			<span class="keyword">int</span> c = a / b;</div><div class="line">			System.out.println(<span class="string">"您输入的两个数相除的结果是："</span> + c );</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IndexOutOfBoundsException|NumberFormatException</div><div class="line">			|ArithmeticException ie)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"程序发生了数组越界、数字格式异常、算术异常之一"</span>);</div><div class="line">			<span class="comment">// 捕捉多异常时，异常变量默认有final修饰，</span></div><div class="line">			<span class="comment">// 所以下面代码有错：</span></div><div class="line">			ie = <span class="keyword">new</span> ArithmeticException(<span class="string">"test"</span>);  <span class="comment">// ①</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(<span class="string">"未知异常"</span>);</div><div class="line">			<span class="comment">// 捕捉一个类型的异常时，异常变量没有final修饰</span></div><div class="line">			<span class="comment">// 所以下面代码完全正确。</span></div><div class="line">			e = <span class="keyword">new</span> RuntimeException(<span class="string">"test"</span>);    <span class="comment">// ②</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的异常对象都包含以下几个常用的方法用来了解异常信息：</p>
<ul>
<li><code>getMessage()</code>:返回该异常的描述字符串。</li>
<li><code>printStackTrace():</code>将异常的跟踪栈信息打印到标准错误输出。</li>
<li><code>printStackTrace(PrintSteam)</code>：将异常的跟踪栈信息打印到指定输出。</li>
<li><code>getStackTrace():</code>返回跟踪栈信息。</li>
</ul>
<p>java7改进了try语句，允许try后紧跟一对圆括号，其中可以声明、初始化一个或多个资源（物理资源）。这些资源实现类必须实现<code>AutoCloseable或Closeable()</code>接口（java7开始几乎都实现了）。这时候finally语句可以没有了，catch也可以没有。</p>
<h2 id="深入机制"><a href="#深入机制" class="headerlink" title="深入机制"></a>深入机制</h2><p>java的非正常情况有两种：</p>
<ul>
<li>Error</li>
<li>Exception</li>
</ul>
<p>Error是不能被解决掉的，不能被捕捉。而异常可以被捕捉，分为Checked异常和Runtime异常。</p>
<p>对于checked异常，属于不解决编译就过不去那种。所以似乎只有java有这个，其它语言都只保留runtime异常。</p>
<ol>
<li><p>checked异常</p>
<p>该异常是显式抛出的，比如方法签名后用throws或者用throw语句。</p>
</li>
<li><p>runtime异常</p>
<p>这种异常是系统运行时自动产生异常对象，不需要手动抛出。</p>
</li>
</ol>
<p>异常继承图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/java%E5%BC%82%E5%B8%B8%E7%BB%A7%E6%89%BF.jpeg" alt="异常继承图" title="">
                </div>
                <div class="image-caption">异常继承图</div>
            </figure>
<p>粉红色的是受检查的异常(checked exceptions),其必须被 <code>try{   }catch</code>语句块所捕获,或者在方法签名里通过throws子句声明.受检查的异常必须在编译时被捕捉处理,命名为 <code>Checked Exception</code> 是因为Java编译器要进行检查,Java虚拟机也要进行检查,以确保这个规则得到遵守.</p>
<p>绿色的异常是运行时异常(runtime exceptions),需要程序员自己分析代码决定是否捕获和处理,比如 空指针,被0除…<br>而声明为Error的，则属于严重错误,需要根据业务信息进行特殊处理,Error不需要捕捉。</p>
<p><strong>特别说明，所以的都是可以捕获的，但是一般error情况代表严重错误，所以不需要捕获，但是不代表不可以。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">t2</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span>(count++==<span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Throwable();</div><div class="line">                System.out.println(<span class="string">"No exception"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Throwable e)</div><div class="line">            &#123;</div><div class="line">                System.out.println(<span class="string">"Exception thrown"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(<span class="string">"In finally thrown"</span>);</div><div class="line">                <span class="keyword">if</span> (count==<span class="number">2</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子说明两点：</p>
<ul>
<li>异常体系任何类都可以被捕获。</li>
<li>finally语句块总会被执行，除非用<code>System.exit()</code>这种关闭JVM。（java7提供了括号的try语句，可以不再使用finally）</li>
</ul>
<p><strong>注意，throws抛出异常时(属于checked异常)，上一层必须处理它或者继续抛出，以此类推，不能放置不管。</strong></p>
<p>看下面代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest2</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 因为test()方法声明抛出IOException异常，</span></div><div class="line">		<span class="comment">// 所以调用该方法的代码要么处于try...catch块中，</span></div><div class="line">		<span class="comment">// 要么处于另一个带throws声明抛出的方法中。</span></div><div class="line">		test();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> IOException</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 因为FileInputStream的构造器声明抛出IOException异常，</span></div><div class="line">		<span class="comment">// 所以调用FileInputStream的代码要么处于try...catch块中，</span></div><div class="line">		<span class="comment">// 要么处于另一个带throws声明抛出的方法中。</span></div><div class="line">      </div><div class="line">      <span class="comment">//顺便一提，IOException和RuntimeException都继承自Exception，二者同级。</span></div><div class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要异常没有被完全捕获（包括没有被捕获或异常被处理后重新抛出了新异常），异常从发生异常的方法逐渐向外传播，直到main方法，如果main方法解决不了就给jvm，jvm直接中断程序。</p>
<p>throw抛出异常实例如下，注意两种异常的区别，<strong>runtime异常可以不管</strong>的！！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 调用声明抛出Checked异常的方法，要么显式捕获该异常</span></div><div class="line">			<span class="comment">// 要么在main方法中再次声明抛出</span></div><div class="line">			throwChecked(-<span class="number">3</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception e)</div><div class="line">		&#123;</div><div class="line">			System.out.println(e.getMessage());</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 调用声明抛出Runtime异常的方法既可以显式捕获该异常，</span></div><div class="line">		<span class="comment">// 也可不理会该异常</span></div><div class="line">		throwRuntime(<span class="number">3</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">throwChecked</span><span class="params">(<span class="keyword">int</span> a)</span><span class="keyword">throws</span> Exception</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (a &gt; <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 自行抛出Exception异常</span></div><div class="line">			<span class="comment">// 该代码必须处于try块里，或处于带throws声明的方法中</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"a的值大于0，不符合要求"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">throwRuntime</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (a &gt; <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 自行抛出RuntimeException异常，既可以显式捕获该异常</span></div><div class="line">			<span class="comment">// 也可完全不理会该异常，把该异常交给该方法调用者处理</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"a的值大于0，不符合要求"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[泛型]]></title>
      <url>https://www.prime666.com/2017/03/12/%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>java的泛型编程的笔记</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>java5开始引入了参数化类型，使用起来和c++的模板有一些相似之处。java7开始，可以不必在构造器中的尖括号中带类型信息，编译器可以推断出来，即可以这样用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure>
<p>这里用了<code>List</code>接口声明了一个变量，也可以用<code>ArrayList</code>声明变量，效果是一样的，后面的是前面的实现类。接口经常这么用。</p>
<h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="定义泛型类"><a href="#定义泛型类" class="headerlink" title="定义泛型类"></a>定义泛型类</h3><p>java可以为任何<strong>接口、类</strong>增加泛型声明。为类增加泛型声明时，其构造器名称还是类名，不需要加泛型声明，而调用时可以传入类型参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 使用T类型形参定义实例变量</span></div><div class="line">	<span class="keyword">private</span> T info;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="comment">// 下面方法中使用T类型形参来定义构造器</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(T info)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.info = info;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.info = info;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.info;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 由于传给T形参的是String，所以构造器参数只能是String</span></div><div class="line">		Apple&lt;String&gt; a1 = <span class="keyword">new</span> Apple&lt;&gt;(<span class="string">"苹果"</span>);</div><div class="line">		System.out.println(a1.getInfo());</div><div class="line">		<span class="comment">// 由于传给T形参的是Double，所以构造器参数只能是Double或double</span></div><div class="line">		Apple&lt;Double&gt; a2 = <span class="keyword">new</span> Apple&lt;&gt;(<span class="number">5.67</span>);</div><div class="line">		System.out.println(a2.getInfo());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里，用了概述中说的省略语法。</p>
<h3 id="泛型类的继承"><a href="#泛型类的继承" class="headerlink" title="泛型类的继承"></a>泛型类的继承</h3><p>创建泛型类或接口后，可以为该接口创建实现类、或从该父类派生子类。注意，不能用一个非泛型类去继承一个泛型类或实现一个泛型接口。要么给继承的泛型类传入实际类型，要么子类也是泛型类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Apple</span>&lt;<span class="title">T</span>&gt;</span>;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A1</span> <span class="keyword">extends</span> <span class="title">Apple</span>&lt;<span class="title">String</span>&gt;</span>;</div></pre></td></tr></table></figure>
<p>上面两种都可以。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A2</span> <span class="keyword">extends</span> <span class="title">Apple</span></span>;</div></pre></td></tr></table></figure>
<p>其实，这一种也可以。严格的泛型代码中，泛型类总应该带着类型参数。<strong>如果没有带类型参数，默认是声明该类型参数时指定的第一个上限类型。</strong>即这样做的后果是，编译器把T当做Object处理。</p>
<h3 id="泛型类并不存在"><a href="#泛型类并不存在" class="headerlink" title="泛型类并不存在"></a>泛型类并不存在</h3><p>不管为泛型类的类型形参传入哪一种实际类型，依然是同一个类，在内存中也只有一块内存空间。<strong>所以，静态方法、静态初始化块或静态变量的声明和初始化中不允许用类型参数。</strong></p>
<p>因为并不会真正生成类，所以<code>instanceof</code>运算符后面也不能用泛型类。</p>
<h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><p>首先说明一下一个定义：</p>
<blockquote>
<p>如果A是B的子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<a>并不是G<b>的子类型！但是对于数组来说，A[]仍然是B[]的子类型。</b></a></p>
</blockquote>
<p>类型通配符是一个<code>?</code>，表示可以匹配任何类型。</p>
<p><strong>注意，java集合中，类型必须是一致或相容的（加入的是声明类型的子类型），否则不能被放入集合中。</strong>因此，<em>类型通配符的主要作用在于匹配任意类型，但是不知道匹配到的具体类型是啥。</em></p>
<p>类型通配符可以指定上下限。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 实现画图方法，以打印字符串来模拟画图方法实现</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"在画布上画一个圆"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 实现画图方法，以打印字符串来模拟画图方法实现</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas c)</span></span></div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"把一个矩形画在画布上"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Canvas</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//	// 同时在画布上绘制多个形状</span></div><div class="line"><span class="comment">//	public void drawAll(List&lt;Shape&gt; shapes)</span></div><div class="line"><span class="comment">//	&#123;</span></div><div class="line"><span class="comment">//		for (Shape s : shapes)</span></div><div class="line"><span class="comment">//		&#123;</span></div><div class="line"><span class="comment">//			s.draw(this);</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line"><span class="comment">//	public void drawAll(List&lt;?&gt; shapes)</span></div><div class="line"><span class="comment">//	&#123;</span></div><div class="line"><span class="comment">//		for (Object obj : shapes)</span></div><div class="line"><span class="comment">//		&#123;</span></div><div class="line"><span class="comment">//			Shape s = (Shape)obj;</span></div><div class="line"><span class="comment">//			s.draw(this);</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"><span class="comment">//	&#125;</span></div><div class="line">	<span class="comment">// 同时在画布上绘制多个形状，使用被限制的泛型通配符</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawAll</span><span class="params">(List&lt;? extends Shape&gt; shapes)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (Shape s : shapes)</div><div class="line">		&#123;</div><div class="line">			s.draw(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		List&lt;Circle&gt; circleList = <span class="keyword">new</span> ArrayList&lt;Circle&gt;();</div><div class="line">		Canvas c = <span class="keyword">new</span> Canvas();</div><div class="line">     	 Circle d=<span class="keyword">new</span> Circle();</div><div class="line">		circleList.add(d);</div><div class="line">		c.drawAll(circleList);<span class="comment">//这里Circle是Shape的子类型，所以可以通过。</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">输出：</div><div class="line">在画布上画一个圆</div></pre></td></tr></table></figure>
<p>这里，？表示任意类型，但是必须是Shape的子类型或自身。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUtils</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 下面dest集合元素类型必须与src集合元素类型相同，或是其父类</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">copy</span><span class="params">(Collection&lt;? <span class="keyword">super</span> T&gt; dest, Collection&lt;T&gt; src)</span></span></div><div class="line">	&#123;</div><div class="line">		T last = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (T ele  : src)</div><div class="line">		&#123;</div><div class="line">			last = ele;</div><div class="line">			dest.add(ele);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> last;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		List&lt;Number&gt; ln = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		li.add(<span class="number">5</span>);</div><div class="line">		<span class="comment">// 此处可准确的知道最后一个被复制的元素是Integer类型</span></div><div class="line">		<span class="comment">// 与src集合元素的类型相同</span></div><div class="line">		Integer last = copy(ln , li);    <span class="comment">// ①</span></div><div class="line">		System.out.println(ln);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">输出[<span class="number">5</span>]</div></pre></td></tr></table></figure>
<p>这里，super表示了下限。另外，此处还用了泛型方法。</p>
<hr>
<p>不仅可以为类型通配符指定上下限，类型参数也可以。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;//这里指定类型参数必须是<span class="title">Number</span>或其子类</span></div><div class="line">&#123;</div><div class="line">	T col;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		Apple&lt;Integer&gt; ai = <span class="keyword">new</span> Apple&lt;&gt;();</div><div class="line">		Apple&lt;Double&gt; ad = <span class="keyword">new</span> Apple&lt;&gt;();</div><div class="line">		<span class="comment">// 下面代码将引起编译异常，下面代码试图把String类型传给T形参</span></div><div class="line">		<span class="comment">// 但String不是Number的子类型，所以引发编译错误</span></div><div class="line">		Apple&lt;String&gt; as = <span class="keyword">new</span> Apple&lt;&gt;();		<span class="comment">// ①</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更极端的情况下，可以至多一个父类上限，多个接口上限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span> &amp; <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>通配符相当于一把万能钥匙，但是匹配到啥类型自己也不知道。泛型方法有点像类型参数一般，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">修饰符&lt;T,S&gt; 返回值类型 方法名（形参列表）</div></pre></td></tr></table></figure>
<p>和普通方法比只是多了类型参数声明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">// 声明一个泛型方法，该泛型方法中带一个T类型形参，</span></div><div class="line">	<span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fromArrayToCollection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (T o : a)</div><div class="line">		&#123;</div><div class="line">			c.add(o);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		Object[] oa = <span class="keyword">new</span> Object[<span class="number">100</span>];</div><div class="line">		Collection&lt;Object&gt; co = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="comment">// 下面代码中T代表Object类型</span></div><div class="line">		fromArrayToCollection(oa, co);</div><div class="line">		String[] sa = <span class="keyword">new</span> String[<span class="number">100</span>];</div><div class="line">		Collection&lt;String&gt; cs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="comment">// 下面代码中T代表String类型</span></div><div class="line">		fromArrayToCollection(sa, cs);</div><div class="line">		<span class="comment">// 下面代码中T代表Object类型</span></div><div class="line">		fromArrayToCollection(sa, co);</div><div class="line">		Integer[] ia = <span class="keyword">new</span> Integer[<span class="number">100</span>];</div><div class="line">		Float[] fa = <span class="keyword">new</span> Float[<span class="number">100</span>];</div><div class="line">		Number[] na = <span class="keyword">new</span> Number[<span class="number">100</span>];</div><div class="line">		Collection&lt;Number&gt; cn = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="comment">// 下面代码中T代表Number类型</span></div><div class="line">		fromArrayToCollection(ia, cn);</div><div class="line">		<span class="comment">// 下面代码中T代表Number类型</span></div><div class="line">		fromArrayToCollection(fa, cn);</div><div class="line">		<span class="comment">// 下面代码中T代表Number类型</span></div><div class="line">		fromArrayToCollection(na, cn);</div><div class="line">		<span class="comment">// 下面代码中T代表Object类型</span></div><div class="line">		fromArrayToCollection(na, co);</div><div class="line">		<span class="comment">// 下面代码中T代表String类型，但na是一个Number数组，</span></div><div class="line">		<span class="comment">// 因为Number既不是String类型，</span></div><div class="line">		<span class="comment">// 也不是它的子类，所以出现编译错误</span></div><div class="line"><span class="comment">//		fromArrayToCollection(na, cs);</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>方法中的泛型参数不必显式指定，可以由编译器推断出。</strong></p>
<p>泛型方法和通配符主要区别在于：</p>
<p><strong>如果一个形参类型或返回值的类型依赖于另一个形参的类型，那么就应该用泛型方法。因为通配符不知道自己匹配了啥。</strong></p>
<p>一般可以通用混用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">&#123;</div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	&lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(COllection&lt;T&gt; c)</span></span>;</div><div class="line">  	&lt;T extends E&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;T&gt; c)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="泛型构造器和自动推导"><a href="#泛型构造器和自动推导" class="headerlink" title="泛型构造器和自动推导"></a>泛型构造器和自动推导</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> &lt;T&gt; Foo(T t)</div><div class="line">	&#123;</div><div class="line">		System.out.println(t);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericConstructor</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 泛型构造器中的T参数为String。</span></div><div class="line">		<span class="keyword">new</span> Foo(<span class="string">"疯狂Java讲义"</span>);</div><div class="line">		<span class="comment">// 泛型构造器中的T参数为Integer。</span></div><div class="line">		<span class="keyword">new</span> Foo(<span class="number">200</span>);</div><div class="line">		<span class="comment">// 显式指定泛型构造器中的T参数为String，</span></div><div class="line">		<span class="comment">// 传给Foo构造器的实参也是String对象，完全正确。</span></div><div class="line">		<span class="keyword">new</span> &lt;String&gt; Foo(<span class="string">"疯狂Android讲义"</span>);</div><div class="line">		<span class="comment">// 显式指定泛型构造器中的T参数为String，</span></div><div class="line">		<span class="comment">// 但传给Foo构造器的实参是Double对象，下面代码出错</span></div><div class="line">		<span class="comment">//new &lt;String&gt; Foo(12.3);</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，可以定义泛型构造器，使用时不仅可以显示指定还可以让编译器推断。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> &lt;T&gt; MyClass(T t)</div><div class="line">	&#123;</div><div class="line">		System.out.println(<span class="string">"t参数的值为："</span> + t);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDiamondTest</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// MyClass类声明中的E形参是String类型。</span></div><div class="line">		<span class="comment">// 泛型构造器中声明的T形参是Integer类型</span></div><div class="line">		MyClass&lt;String&gt; mc1 = <span class="keyword">new</span> MyClass&lt;&gt;(<span class="number">5</span>);</div><div class="line">		<span class="comment">// 显式指定泛型构造器中声明的T形参是Integer类型，</span></div><div class="line">		MyClass&lt;String&gt; mc2 = <span class="keyword">new</span> &lt;Integer&gt; MyClass&lt;String&gt;(<span class="number">5</span>);</div><div class="line">		<span class="comment">// MyClass类声明中的E形参是String类型。</span></div><div class="line">		<span class="comment">// 如果显式指定泛型构造器中声明的T形参是Integer类型</span></div><div class="line">		<span class="comment">// 此时就不能使用"菱形"语法，下面代码是错的。</span></div><div class="line"><span class="comment">//		MyClass&lt;String&gt; mc3 = new &lt;Integer&gt; MyClass&lt;&gt;(5);</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>如上，当显式指定了泛型构造器实际类型后，不能再用前面的简写法。</strong></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[经典题目]]></title>
      <url>https://www.prime666.com/2017/03/07/%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>各种笔记，太菜了唉/(ㄒoㄒ)/~~</p>
<a id="more"></a>
<h2 id="Longest-Substring-Without-Repeating-Characters"><a href="#Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Longest Substring Without Repeating Characters"></a>Longest Substring Without Repeating Characters</h2><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/?tab=Description" target="_blank" rel="noopener">求最长不重复子串（不是子序列）</a></p>
<blockquote>
<p>Given a string, find the length of the longest substring without repeating characters.<br>Examples:<br>Given “abcabcbb”, the answer is “abc”, which the length is 3.<br>Given “bbbbb”, the answer is “b”, with the length of 1.<br>Given “pwwkew”, the answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type s: str</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        start=<span class="number">0</span></div><div class="line">        end=<span class="number">0</span></div><div class="line">        L=[]</div><div class="line">        last_len=<span class="number">0</span></div><div class="line">        myset=set()</div><div class="line">        <span class="keyword">while</span> start&lt;len(s) <span class="keyword">and</span> end&lt;len(s):</div><div class="line">            <span class="keyword">if</span> s[end] <span class="keyword">not</span> <span class="keyword">in</span> myset:</div><div class="line">                myset.add(s[end])</div><div class="line">                end += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                last_len=len(myset) <span class="keyword">if</span> last_len&lt;len(myset) <span class="keyword">else</span> last_len</div><div class="line">                myset.remove(s[start])</div><div class="line">                start+=<span class="number">1</span></div><div class="line">        <span class="comment"># 很关键！！！</span></div><div class="line">        last_len = len(myset) <span class="keyword">if</span> last_len &lt; len(myset) <span class="keyword">else</span> last_len</div><div class="line">        <span class="keyword">return</span> last_len</div></pre></td></tr></table></figure>
<p>考虑第一次用数组超时了，第二次用的set。基本就是两个指针，start和end，如果end指向一个已经存在的元素，表示set里满足不重复子串，更新长度记录后就start指针后移同时依次弹出set中的元素直到把end指向的元素弹出来。</p>
<p>最后需要考虑一下遍历完成set内还有元素的情况。</p>
<p>别人的解法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="comment"># @return an integer</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></div><div class="line">        start = maxLength = <span class="number">0</span></div><div class="line">        usedChar = &#123;&#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> usedChar <span class="keyword">and</span> start &lt;= usedChar[s[i]]:</div><div class="line">                start = usedChar[s[i]] + <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                maxLength = max(maxLength, i - start + <span class="number">1</span>)</div><div class="line"></div><div class="line">            usedChar[s[i]] = i</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxLength</div></pre></td></tr></table></figure>
<p>用了字典，start和i分别指向子串的开头和结尾。字典建立字符到索引的映射，这样可以做到不用一个一个递增start而是调到重复的字符后面，速度快了近一倍。</p>
<p>这种方式次次更新最大长度，而我只是考虑到发现重复才更新。</p>
<h2 id="找出两个有序数组中第k大的元素"><a href="#找出两个有序数组中第k大的元素" class="headerlink" title="找出两个有序数组中第k大的元素"></a>找出两个有序数组中第k大的元素</h2><p>这个题一般想法就是，直接合并后选择。线性时间复杂度。</p>
<p>如果要<code>logm+logn</code>呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_kth_largest</span><span class="params">(A,B,k)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(A)==<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> B[k<span class="number">-1</span>]</div><div class="line">    <span class="keyword">if</span> len(B)==<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> A[k<span class="number">-1</span>]</div><div class="line">    <span class="comment">#递归边界不必多说</span></div><div class="line">    i=len(A)//<span class="number">2</span></div><div class="line">    j=len(B)//<span class="number">2</span></div><div class="line">    <span class="comment">#求各自中间元素下标</span></div><div class="line">    <span class="keyword">if</span> B[j]&lt;A[i]:</div><div class="line">        A,B=B,A</div><div class="line">        i,j=j,i</div><div class="line">    <span class="comment">#为了统一保持B[j]&gt;=A[i]</span></div><div class="line">    t=i+j+<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> k&lt;=t:</div><div class="line">        <span class="keyword">return</span> find_kth_largest(A[:i],B,k)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> find_kth_largest(A,B[j+<span class="number">1</span>:],k-j<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<p>先上源码如是。</p>
<p>主要思路就是每次截断其中一个数组，利用二分查找的思路。</p>
<p>假设有以下数组：</p>
<font color="red"><br><br>a0 a1 a2 a3 a4 a5… <strong>|</strong> ai…an-1 an<br><br>b0 b1 b2 b3 b4 b5…bj <strong>|</strong> …bn-1 bn<br><br></font>

<p>这里统一让<code>bj&gt;ai</code></p>
<p><code>t=i+j+1</code>表示<code>|</code>左面元素的个数。</p>
<p>如果k&lt;=t，则k在左面，就可以把右上给删除掉</p>
<p>如果k&gt;t，则k在右面，就可以把左下删除掉</p>
<h2 id="字符串全排列"><a href="#字符串全排列" class="headerlink" title="字符串全排列"></a>字符串全排列</h2><blockquote>
<p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># -*- by prime -*-</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomListNode</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.label = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line">        self.random = <span class="keyword">None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="comment"># 返回 RandomListNode</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clone</span><span class="params">(self, pHead)</span>:</span></div><div class="line">        <span class="comment"># write code here</span></div><div class="line">        <span class="keyword">if</span> pHead==<span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        self.CloneNodes(pHead)</div><div class="line">        self.Clonerandoms(pHead)</div><div class="line">        <span class="keyword">return</span> self.ListSplit(pHead)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CloneNodes</span><span class="params">(self,pHead)</span>:</span></div><div class="line">        pNode=pHead</div><div class="line">        <span class="keyword">while</span> pNode:</div><div class="line">            pCloneNode=RandomListNode(pNode.label)</div><div class="line">            pCloneNode.next=pNode.next</div><div class="line">            pCloneNode.random=<span class="keyword">None</span></div><div class="line"></div><div class="line">            pNode.next=pCloneNode</div><div class="line">            pNode=pCloneNode.next</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Clonerandoms</span><span class="params">(self,pHead)</span>:</span></div><div class="line">        pNode=pHead</div><div class="line">        <span class="keyword">while</span> pNode:</div><div class="line">            pCloneNode=pNode.next</div><div class="line">            <span class="keyword">if</span> pNode.random:</div><div class="line">                pCloneNode.random=pNode.random.next</div><div class="line">            pNode=pNode.next.next</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ListSplit</span><span class="params">(self,pHead)</span>:</span></div><div class="line">        pNode=pHead</div><div class="line"></div><div class="line">        pCloneHead=pHead.next</div><div class="line">        pCloneNode=pCloneHead</div><div class="line"></div><div class="line">        <span class="comment">#pNode的指向比pCloneNode快一个</span></div><div class="line">        pNode.next=pCloneNode.next</div><div class="line">        pNode=pNode.next</div><div class="line"></div><div class="line">        <span class="keyword">while</span> pNode:</div><div class="line">            <span class="comment">#总是先变next的指向再递推</span></div><div class="line">            pCloneNode.next=pNode.next</div><div class="line">            pCloneNode=pCloneNode.next</div><div class="line"></div><div class="line">            pNode.next=pCloneNode.next</div><div class="line">            pNode=pNode.next</div><div class="line">        <span class="keyword">return</span> pCloneHead</div></pre></td></tr></table></figure>
<p>牛客网代码如上，严格按照三部走策略：如下图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://on7mhq4kh.bkt.clouddn.com/961875_1469289666488_886555C4C4726220976FEF4D3A32FFCD.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="单链表插入排序"><a href="#单链表插入排序" class="headerlink" title="单链表插入排序"></a>单链表插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insert</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        Node next;</div><div class="line">        Node(<span class="keyword">int</span> x)</div><div class="line">        &#123;</div><div class="line">            value=x;</div><div class="line">            next=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"val="</span>+value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">Insertsort</span><span class="params">(Node root)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">/*head是添加的头结点，一共四个指针：</span></div><div class="line">        root指针用于遍历链表进行排序，pre指向root的前一个节点</div><div class="line">        * p和q指针用于链表的重接操作，每次p指针遍历root前的元素，找到第一个大于root的结点，q是p前面的元素。*/</div><div class="line">        Node head=<span class="keyword">new</span> Node(Integer.MIN_VALUE);</div><div class="line">        head.next=root;</div><div class="line">        Node pre=head;</div><div class="line">        <span class="keyword">while</span> (root!=<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            Node p=head.next;</div><div class="line">            Node q=head;</div><div class="line">            <span class="keyword">while</span> (p!=root)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (root.value&lt;p.value)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                p=p.next;</div><div class="line">                q=q.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (p!=root)</div><div class="line">            &#123;<span class="comment">//root需要插入</span></div><div class="line">                pre.next=root.next;</div><div class="line">                root.next=p;</div><div class="line">                q.next=root;</div><div class="line">                root=pre.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                root=root.next;</div><div class="line">                pre=pre.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title">Insertsort2</span><span class="params">(Node root)</span></span></div><div class="line">    &#123;<span class="comment">/*同样head是新建立的头结点，这里比上面的更简单，用了3个指针。</span></div><div class="line">    思想是建一个新的链表，然后每次拆一个旧链表的元素插入新链表q和p指针之间。</div><div class="line">    */</div><div class="line">        Node head=<span class="keyword">new</span> Node(Integer.MIN_VALUE);</div><div class="line">        <span class="keyword">while</span> (root!=<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            Node p,q;</div><div class="line">            <span class="keyword">for</span> (p=head.next,q=head;p!=<span class="keyword">null</span>&amp;&amp;p.value&lt;=root.value;p=p.next,q=q.next);</div><div class="line">            <span class="keyword">if</span> (p==<span class="keyword">null</span>)</div><div class="line">            &#123;</div><div class="line">                q.next=root;</div><div class="line">                root=root.next;</div><div class="line">                q.next.next=<span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                q.next=root;</div><div class="line">                q=root.next;</div><div class="line">                root.next=p;</div><div class="line">                root=q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        Node p=<span class="keyword">new</span> Node(<span class="number">5</span>);</div><div class="line">        p.next=<span class="keyword">new</span> Node(<span class="number">2</span>);</div><div class="line">        p.next.next=<span class="keyword">new</span> Node(<span class="number">7</span>);</div><div class="line"></div><div class="line">        Node q=Insertsort2(p);</div><div class="line">        <span class="keyword">while</span> (q!=<span class="keyword">null</span>)</div><div class="line">        &#123;</div><div class="line">            System.out.print(q.value+<span class="string">" "</span>);</div><div class="line">            q=q.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象(下)]]></title>
      <url>https://www.prime666.com/2017/03/02/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%8B)/</url>
      <content type="html"><![CDATA[<p>疯狂java讲义第三版读书笔记。<br>oop下。</p>
<a id="more"></a>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>java有8种基本数据类型，虽然java做到了所有引用类型的变量都继承了object类，都可当做object类型使用，但是这几个基本类型就歇菜了。（还是python好啊O(∩_∩)O哈哈哈~）。<br>java提供了包装类来改善这个情况，为基本数据类型定义了相应的引用类型：</p>
<ul>
<li>byte:Byte</li>
<li>short:Short</li>
<li>int:Integer</li>
<li>long:Long</li>
<li>char:Character</li>
<li>float:Float</li>
<li>double:Double</li>
<li>boolean:Boolean</li>
</ul>
<p>jdk1.5开始提供了自动装箱（auto boxing）和自动拆箱（auto unboxing）：</p>
<ul>
<li>自动装箱：可以把基本类型直接赋值给对应的包装类变量或object</li>
<li>自动拆箱：可以把包装类对象直接赋值给对应的基本类型变量</li>
</ul>
<p>包装类还可实现基本类型和String之间的转化：</p>
<ol>
<li>利用包装类的<code>parse类型名（String s）</code>的静态方法（除了Character）</li>
<li>利用包装类的<code>类型名（String s）</code>构造器</li>
</ol>
<p>当然，String类也可以转成基本类型，用<code>valueOf()</code>方法，该方法被重载多次。（把基本类型和String连接会自动转化）</p>
<p>比较两个包装类的实例用<code>compare()</code>静态方法。</p>
<h2 id="对象处理的技巧"><a href="#对象处理的技巧" class="headerlink" title="对象处理的技巧"></a>对象处理的技巧</h2><p><code>toString()</code>方法是object类提供的，作用和Python的<code>__str__()</code>一样。如果需要可以重新实现它，默认实现不友好。</p>
<p>java判断相等有两个方式：</p>
<ol>
<li><code>==</code>运算符，针对基本类型有效，对于引用变量判断的是是否指向同一个对象。</li>
<li><code>equals（）</code>方法，针对引用变量。（默认object类的实现和<code>==</code>一样，需要就重写）</li>
</ol>
<h2 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h2><p><strong>final修饰的变量不可更改，只允许赋值一次，针对引用变量而言是保证一直引用同一个对象，对象可以原地修改</strong></p>
<ol>
<li>成员变量：如果是类变量，可以在静态初始化块或声明变量时给定初始值；如果是实例变量，可以在非静态初始化块、声明该实例变量或构造器中指定初始值。</li>
<li>局部变量：可以在定义时指定也可以不指定再后面赋值一次。</li>
</ol>
<p>成员变量（除了final修饰的）会默认初始化，局部变量不会。</p>
<p><strong>final修饰的方法不能被重写，可以重载。</strong></p>
<p>注意，如果final修饰了private方法，实际上该方法对子类不可见，子类根本无法重写，可以定义一个一模一样的方法，只是新的方法而已。</p>
<p><strong>final修饰的类不能有子类</strong></p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>关于抽象的规则如下：</p>
<ol>
<li>抽象类和抽象方法必须用<code>abstract</code>修饰，抽象方法不能有方法体（空的也算有方法体）。</li>
<li>抽象类不能被实例化，即使抽象类不包含抽象方法。</li>
<li>含有抽象方法或者重写不完全的都只能被定义成抽象类。</li>
</ol>
<p>abstract不能修饰变量。</p>
<blockquote>
<p>抽象类体现的是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会大致保留抽象类的行为方式。</p>
</blockquote>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>对抽象类抽象到底，就是接口。接口是一种规范，只规定这批类里必须提供某些方法。</p>
<p>接口只能继承接口，不能继承类。</p>
<p>接口里可以包含<strong>静态常量、抽象实例方法、类方法、默认方法、内部类，没有构造器和初始化块，类方法和默认方法必须有方法体。</strong></p>
<p>接口内所有成员都是<code>public</code>，可以省略。上述说明包含的成员都可以省略修饰符（默认方法default和类方法static还是要的）。</p>
<p>接口可以看做一个特殊的类，一个源文件最多一个public接口，如果有了一个public接口，文件名必须与接口同名。接口支持多继承。</p>
<p>接口不能用于创建实例，但是接口可以用于声明引用类型变量，然后让这个引用类型变量引用到其实现类。示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; books = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>顾名思义定义在另一个类中的类就是<strong>内部类</strong>，也叫嵌套类，包含内部类的类叫<strong>外部类</strong>也称作宿主类。</p>
<p>内部类比外部类可以多使用：private、protected和static修饰符。（本身实质作为外部类的一个成员变量或类变量）</p>
<h3 id="非静态内部类（作为成员变量）"><a href="#非静态内部类（作为成员变量）" class="headerlink" title="非静态内部类（作为成员变量）"></a>非静态内部类（作为成员变量）</h3><blockquote>
<p>其实，修饰符和作用域息息相关。外部类只有默认和public，上一级是包，因为它要么只能在同一个包中被访问，要么可以被任意访问。而内部类上一级是外部类，就有了四个作用域：同一个类，同一个包，父子类或同一个包和任意位置。因而对应多了几个修饰符。</p>
</blockquote>
<p><strong>成员内部类（不论静态非静态）的class文件总是这种形式：<code>OuterClass$InnerClass.class</code>。</strong></p>
<p>当外部类成员变量、内部类成员变量和内部类局部变量同名时，可用this、外部类名.this来区分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class DiscernVariable</div><div class="line">&#123;</div><div class="line">	private String prop = &quot;外部类的实例变量&quot;;</div><div class="line">	private class InClass</div><div class="line">	&#123;</div><div class="line">		private String prop = &quot;内部类的实例变量&quot;;</div><div class="line">		public void info()</div><div class="line">		&#123;</div><div class="line">			String prop = &quot;局部变量&quot;;</div><div class="line">			// 通过 外部类类名.this.varName 访问外部类实例变量</div><div class="line">			System.out.println(&quot;外部类的实例变量值：&quot;</div><div class="line">				+ DiscernVariable.this.prop);</div><div class="line">			// 通过 this.varName 访问内部类实例的变量</div><div class="line">			System.out.println(&quot;内部类的实例变量值：&quot; + this.prop);</div><div class="line">			// 直接访问局部变量</div><div class="line">			System.out.println(&quot;局部变量的值：&quot; + prop);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	public void test()</div><div class="line">	&#123;</div><div class="line">		InClass in = new InClass();</div><div class="line">		in.info();</div><div class="line">		System.out.println(&quot;私有变量的值：&quot; + in.prop);</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		new DiscernVariable().test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非静态内部类的成员可以访问外部类的private成员，但是反过来，如果一个外部类需要访问非静态内部类的成员，必须显式创建内部类的对象，通过它访问内部类私有成员（没错，的确可以访问啊，应该是把内部类的成员看做和外部类成员变量平等的成员变量。世界观崩塌了好久~~）。</p>
<p><strong>根据静态成员不能访问非静态成员的规则，显然，外部类的一切静态的东东不能使用非静态内部类定义变量、创建实例等，总之不允许在外部类的静态成员中直接使用非静态内部类。</strong></p>
<p><strong><em>java也不允许在非静态内部类里定义任何静态的东东！！！</em></strong></p>
<h3 id="静态内部类（作为类变量）"><a href="#静态内部类（作为类变量）" class="headerlink" title="静态内部类（作为类变量）"></a>静态内部类（作为类变量）</h3><p><strong>始终记得<code>static</code>的作用就是把类的成员变成类相关而不是实例相关。</strong></p>
<p>静态内部类可以包含静态成员也可以有非静态成员（即使是非静态成员也不能访问外部类的实例成员）。</p>
<p>静态内部类是外部类的一个静态成员，因此外部类的所有方法 、初始化块中都可以使用静态内部类来定义变量、创建对象等。</p>
<p>外部类依然不能直接访问内部类的成员，要么用类名作为调用者，要么通过静态内部类的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class AccessStaticInnerClass</div><div class="line">&#123;</div><div class="line">	static class StaticInnerClass</div><div class="line">	&#123;</div><div class="line">		private static int prop1 = 5;</div><div class="line">		private int prop2 = 9;</div><div class="line">	&#125;</div><div class="line">	public void accessInnerProp()</div><div class="line">	&#123;</div><div class="line">		// System.out.println(prop1);</div><div class="line">		// 上面代码出现错误，应改为如下形式：</div><div class="line">		// 通过类名访问静态内部类的类成员</div><div class="line">		System.out.println(StaticInnerClass.prop1);</div><div class="line">		// System.out.println(prop2);</div><div class="line">		// 上面代码出现错误，应改为如下形式：</div><div class="line">		// 通过实例访问静态内部类的实例成员</div><div class="line">		System.out.println(new StaticInnerClass().prop2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，java还允许在接口里定义内部类，接口里的默认都用public static修饰。（也只能是这样）</p>
<p>###　内部类的使用</p>
<h4 id="在外部类内使用"><a href="#在外部类内使用" class="headerlink" title="在外部类内使用"></a>在外部类内使用</h4><p>这种情况就和普通类一样，注意不要在外部类的静态成员中使用非静态内部类就好了。</p>
<h4 id="在外部类之外使用非静态内部类"><a href="#在外部类之外使用非静态内部类" class="headerlink" title="在外部类之外使用非静态内部类"></a>在外部类之外使用非静态内部类</h4><ul>
<li>不能用private修饰，这只对外部类可见。</li>
<li>默认访问权限，只能被与外部类处于同一包中的其它类访问。</li>
<li>protected，上一条加外部类的子类。</li>
<li>public，任何地方</li>
</ul>
<p>使用内部类时，要用<code>OuterClass.InnerClass</code>作为内部类的类名（必要时还得加包名，层层嵌套）。<strong>非静态内部类的对象必须寄存在外部类的对象里，因此创建非静态内部类对象之前，必须先创建其外部类对象。</strong>，<code>OuterInstance.new InnerConstructor()</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class Out</div><div class="line">&#123;</div><div class="line">	// 定义一个内部类，不使用访问控制符，</div><div class="line">	// 即只有同一个包中其他类可访问该内部类</div><div class="line">	class In</div><div class="line">	&#123;</div><div class="line">		public In(String msg)</div><div class="line">		&#123;</div><div class="line">			System.out.println(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">public class CreateInnerInstance</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		Out.In in = new Out().new In(&quot;测试信息&quot;);</div><div class="line">		/*</div><div class="line">		上面代码可改为如下三行代码：</div><div class="line">		使用OutterClass.InnerClass的形式定义内部类变量</div><div class="line">		Out.In in;</div><div class="line">		创建外部类实例，非静态内部类实例将寄存在该实例中</div><div class="line">		Out out = new Out();</div><div class="line">		通过外部类实例和new来调用内部类构造器创建非静态内部类实例</div><div class="line">		in = out.new In(&quot;测试信息&quot;);</div><div class="line">		*/</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建子类时，子类构造器总会通过<code>super</code>调用父类的构造器。看下述示例，非静态内部类In类的构造器必须使用外部类对象来调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SubClass extends Out.In</div><div class="line">&#123;</div><div class="line">	//显示定义SubClass的构造器</div><div class="line">	public SubClass(Out out)</div><div class="line">	&#123;</div><div class="line">		//通过传入的Out对象显式调用In的构造器</div><div class="line">		out.super(&quot;hello&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在外部类之外使用静态内部类"><a href="#在外部类之外使用静态内部类" class="headerlink" title="在外部类之外使用静态内部类"></a>在外部类之外使用静态内部类</h4><p>因为静态内部类是外部类类相关的，所以创建静态内部类对象时无需创建外部类对象，只要提供外部类名字即可：<code>new OuterClass.InnerConstruct()</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class StaticOut</div><div class="line">&#123;</div><div class="line">	// 定义一个静态内部类，不使用访问控制符，</div><div class="line">	// 即同一个包中其他类可访问该内部类</div><div class="line">	static class StaticIn</div><div class="line">	&#123;</div><div class="line">		public StaticIn()</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;静态内部类的构造器&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">public class CreateStaticInnerInstance</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		StaticOut.StaticIn in = new StaticOut.StaticIn();</div><div class="line">		/*</div><div class="line">		上面代码可改为如下两行代码：</div><div class="line">		使用OutterClass.InnerClass的形式定义内部类变量</div><div class="line">		StaticOut.StaticIn in;</div><div class="line">		通过new来调用内部类构造器创建静态内部类实例</div><div class="line">		in = new StaticOut.StaticIn();</div><div class="line">		*/</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>**不管是静态内部类还是非静态内部类，创建变量方式都是一样的，不同的是创建对象时，静态内部类只需要使用外部类即可调用构造器，而非静态内部类必须使用外部类对象来调用构造器。</p>
<p>定义子类和前面的类似，构造器直接用外部类名即可。</p>
<p>静态类还是简单，优先选择它！！！</p>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>太鸡肋了？</p>
<h3 id="匿名内部类（ヾ-｡｀Д´｡-，好多）"><a href="#匿名内部类（ヾ-｡｀Д´｡-，好多）" class="headerlink" title="匿名内部类（ヾ(｡｀Д´｡)，好多）"></a>匿名内部类（ヾ(｡｀Д´｡)，好多）</h3><p>创建匿名内部类时会立即创建一个该类的实例（故而匿名内部内不能是抽象类），这个类定义立即消失，匿名内部类不能重复使用。</p>
<p>匿名内部类形式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">new 实现接口（）|父类构造器（）</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>匿名内部类必须继承一个父类，或实现一个接口，但是只能二选一且只能继承（或实现）一个。</p>
<p>匿名内部类不能定义构造器（可以有初始化块）。通过实现接口创建时，不能传入任何参数，通过继承父类创建时可以拥有和父类一样的构造器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">interface Product</div><div class="line">&#123;</div><div class="line">	public double getPrice();</div><div class="line">	public String getName();</div><div class="line">&#125;</div><div class="line">public class AnonymousTest</div><div class="line">&#123;</div><div class="line">	public void test(Product p)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;购买了一个&quot; + p.getName()</div><div class="line">			+ &quot;，花掉了&quot; + p.getPrice());</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		AnonymousTest ta = new AnonymousTest();</div><div class="line">		// 调用test()方法时，需要传入一个Product参数，</div><div class="line">		// 此处传入其匿名实现类的实例</div><div class="line">		ta.test(new Product()</div><div class="line">		&#123;</div><div class="line">			public double getPrice()</div><div class="line">			&#123;</div><div class="line">				return 567.8;</div><div class="line">			&#125;</div><div class="line">			public String getName()</div><div class="line">			&#123;</div><div class="line">				return &quot;AGP显卡&quot;;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">abstract class Device</div><div class="line">&#123;</div><div class="line">	private String name;</div><div class="line">	public abstract double getPrice();</div><div class="line">	public Device()&#123;&#125;</div><div class="line">	public Device(String name)</div><div class="line">	&#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	// 此处省略了name的setter和getter方法</div><div class="line">	public void setName(String name)</div><div class="line">	&#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	public String getName()</div><div class="line">	&#123;</div><div class="line">		return this.name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">public class AnonymousInner</div><div class="line">&#123;</div><div class="line">	public void test(Device d)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;购买了一个&quot; + d.getName()</div><div class="line">			+ &quot;，花掉了&quot; + d.getPrice());</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		AnonymousInner ai = new AnonymousInner();</div><div class="line">		// 调用有参数的构造器创建Device匿名实现类的对象</div><div class="line">		ai.test(new Device(&quot;电子示波器&quot;)</div><div class="line">		&#123;</div><div class="line">			public double getPrice()</div><div class="line">			&#123;</div><div class="line">				return 67.8;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		// 调用无参数的构造器创建Device匿名实现类的对象</div><div class="line">		Device d = new Device()</div><div class="line">		&#123;</div><div class="line">			// 初始化块</div><div class="line">			&#123;</div><div class="line">				System.out.println(&quot;匿名内部类的初始化块...&quot;);</div><div class="line">			&#125;</div><div class="line">			// 实现抽象方法</div><div class="line">			public double getPrice()</div><div class="line">			&#123;</div><div class="line">				return 56.2;</div><div class="line">			&#125;</div><div class="line">			// 重写父类的实例方法</div><div class="line">			public String getName()</div><div class="line">			&#123;</div><div class="line">				return &quot;键盘&quot;;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		ai.test(d);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>被匿名内部类访问的局部变量默认加了final修饰！！！（从1.8开始，以前必须强制声明成final）</p>
<h2 id="Lambda表达式（简洁的语法创建函数式接口的实例！啥语言都有o-╯□╰-o）"><a href="#Lambda表达式（简洁的语法创建函数式接口的实例！啥语言都有o-╯□╰-o）" class="headerlink" title="Lambda表达式（简洁的语法创建函数式接口的实例！啥语言都有o(╯□╰)o）"></a>Lambda表达式（简洁的语法创建函数式接口的实例！啥语言都有o(╯□╰)o）</h2><p>java的lambda表达式和c++的还是很像的，基本形式就是<code>(形参列表)-&gt;{}</code>，，形参类型可省略，只有一条语句时可以省略return，不然怎么叫表达式了呢？</p>
<p>没啥好说，直接套示例代码了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">interface Eatable</div><div class="line">&#123;</div><div class="line">	void taste();</div><div class="line">&#125;</div><div class="line">interface Flyable</div><div class="line">&#123;</div><div class="line">	void fly(String weather);</div><div class="line">&#125;</div><div class="line">interface Addable</div><div class="line">&#123;</div><div class="line">	int add(int a , int b);</div><div class="line">&#125;</div><div class="line">public class LambdaQs</div><div class="line">&#123;</div><div class="line">	// 调用该方法需要Eatable对象</div><div class="line">	public void eat(Eatable e)</div><div class="line">	&#123;</div><div class="line">		System.out.println(e);</div><div class="line">		e.taste();</div><div class="line">	&#125;</div><div class="line">	// 调用该方法需要Flyable对象</div><div class="line">	public void drive(Flyable f)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;我正在驾驶：&quot; + f);</div><div class="line">		f.fly(&quot;【碧空如洗的晴日】&quot;);</div><div class="line">	&#125;</div><div class="line">	// 调用该方法需要Addable对象</div><div class="line">	public void test(Addable add)</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;5与3的和为：&quot; + add.add(5, 3));</div><div class="line">	&#125;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		LambdaQs lq = new LambdaQs();</div><div class="line">		// Lambda表达式的代码块只有一条语句，可以省略花括号。</div><div class="line">		lq.eat(()-&gt; System.out.println(&quot;苹果的味道不错！&quot;));</div><div class="line">		// Lambda表达式的形参列表只有一个形参，省略圆括号</div><div class="line">		lq.drive(weather -&gt;</div><div class="line">		&#123;</div><div class="line">			System.out.println(&quot;今天天气是：&quot; + weather);</div><div class="line">			System.out.println(&quot;直升机飞行平稳&quot;);</div><div class="line">		&#125;);</div><div class="line">		// Lambda表达式的代码块只有一条语句，省略花括号</div><div class="line">		// 代码块中只有一条语句，即使该表达式需要返回值，也可以省略return关键字。</div><div class="line">		lq.test((a , b)-&gt;a + b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lambda作为匿名方法，由上述代码可以看出来，可以作为任何类型的对象，到底需要什么类型需要看运行环境。</p>
<p>lambda的类型叫做<code>target type</code>，其目标类型必须是函数式接口（functional interface），函数式接口代表<strong>只包含一个抽象方法</strong>的接口，可以有多个默认方法、类方法。</p>
<p>lambda做的就是为函数式接口创建对象，接口只有一个抽象方法，所以lambda正好也只能实现一个方法。</p>
<p>java8专门加了<code>@FunctionalInterface</code>注解。</p>
<p>常用方式：</p>
<ul>
<li>赋值给函数式接口类型的变量</li>
<li>作为函数式接口类型的参数传给某个方法</li>
<li>使用函数式接口对表达式进行强制类型转换</li>
</ul>
<p><strong>同样的lambda表达式的目标类型可以不同，只要转换时保证lambda的匿名方法与函数式接口中唯一的抽象方法有相同的形参列表</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象（上）]]></title>
      <url>https://www.prime666.com/2017/02/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>读疯狂java讲义第三版的读书笔记。<br>重拾oop，本篇包括基本oop：封装、多态、继承。<br><a id="more"></a></p>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>对于一个类，最常见的三种成员：构造器、成员变量和方法。各成员之间定义顺序没有任何影响。java语言通过new关键字来调用构造器，如果没有定义构造器系统会提供一个默认构造器。定义成员变量可以有一个默认值。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>附加static参数实质上是为了区分一个成员是属于一个实例还是一个类，一个实例可以调用static方法或者访问static成员，因为它们属于类。static方法却不能访问实例的成员，没有this指针啊。<strong>建议用类名访问static成员，用实例访问非static成员。</strong></p>
<h2 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h2><p>java一切都是引用，这和python很像。垃圾回收机制通过判断一个对象是否被引用来决定是否回收它，如果堆内存的对象没有任何变量引用它，该对象占用的内存会被释放。</p>
<p>java和c++一样提供了this关键字，几乎完全一样。既可以在构造器中引用构造器正在初始化的对象，又可以在方法中引用调用该方法的对象。java中运行对象的一个成员可以直接调用另一个成员而不必明确加上this前缀。有时候如果方法里有个局部变量和成员变量同名，但程序又要访问这个成员变量，那就得用this了。this作为返回值，就可以连续调用了。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>java作为一名静态语言，类完成定义后只要不重新编译类文件，该类和该类的对象所拥有的方法是固定的，永远无法改变。这一点倒不如python灵活了。</p>
<p>同一个类的方法调用另外一个方法时，如果被调用的是普通方法，this作为调用者；如果是static方法，则类作为调用者。方法永远只能依托类存在，完全面向对象就是这样吧。</p>
<p>方法的参数清一色<code>值传递</code>，这个和python一样。对于内置类型很容易分辨，但对于对象而言，值传递的是对象的引用，所以修改可能会对原对象造成影响。</p>
<p>方法的形参数量可变，用<code>...</code>即可，但是只能放在最后，实质上是一个数组类型的形参。方法可以重载，和c++区别方法一样，通过参数列表，不要重载参数可变的方法（没必要且难理解）。</p>
<h2 id="封装和隐藏"><a href="#封装和隐藏" class="headerlink" title="封装和隐藏"></a>封装和隐藏</h2><ul>
<li>private</li>
<li>default（不加任何修饰符）</li>
<li>protected</li>
<li>public</li>
</ul>
<p>java提供了4个访问控制级别，private表示这个成语只能在当前类的内部访问；default表示可以被同一个包下的其它类访问；protected表示可以被子类和同一个包中的类访问；public就是全局范围都可以了。</p>
<p>这四种用于控制一个类的成员是否可以被其它类访问，不是对于局部变量的。</p>
<p>对于类，有public和default两种修饰符，前者表示可以被所有类使用，后者表示只能被用一个包中其它类使用。</p>
<blockquote>
<p>如果一个java源文件里的所有类都没有使用public修饰，那这个源文件的文件名可以是一切合法的文件名；<br>但如果一个java源文件中定义了一个public修饰的类，则这个源文件的文件名必须与public修饰的类名相同。</p>
</blockquote>
<p>对于访问控制符的使用，有几条基本规则：</p>
<ul>
<li>类中绝大多数成员应该用private修饰，只有一些static修饰的、类似全局变量的成员变量才考虑public。辅助方法也应该用private。</li>
<li>如果某个类主要用作其它类的父类，该类的大部分方法可能仅仅希望被其子类重写，而不想被外界直接使用，应该用protected修饰。</li>
<li>希望暴露出来自由调用的方法应该使用public修饰，比如构造器。</li>
</ul>
<h2 id="package、import和import-static"><a href="#package、import和import-static" class="headerlink" title="package、import和import static"></a>package、import和import static</h2><p>如果想定义包，必须在java第一个非注释行，java通过将一组功能相关的类放在同一个package下从而组成逻辑上的类库单元。java规定：位于包中的类在文件系统中也必须有与包名层次相同的目录结构（反之不在源文件加package语句只靠目录是不行的）。package语句一个源文件只能有一条，如若没有则处于默认包下。</p>
<p>import可以向某个java文件中导入指定包层次下某个类或全部类（*），作用类似python，可以不同写包前缀了。但是注意冲突的话只能用包名指定了。</p>
<blockquote>
<p>java默认为所有源文件导入java.lang包下的所有类。</p>
</blockquote>
<p>同理，import static位置和import语句一样，放在package之后类定义之前。用于导入指定类的<code>单个静态成员变量或方法</code>或<code>全部静态成员变量或方法</code>。说的通俗一点：<em>import让你可以省略包名，import static让你省略包名类名。</em></p>
<h2 id="构造器和初始化块"><a href="#构造器和初始化块" class="headerlink" title="构造器和初始化块"></a>构造器和初始化块</h2><p>创建一个对象时，系统为这个对象进行默认初始化。构造器是在对象创建后调用的，且和普通方法一样可以被重载。如果在一个构造器中直接使用另一个构造器的代码，可以直接用<code>this(参数列表)</code>的形式，但这条语句只能在构造器中使用且必须作为第一条语句。</p>
<p>一个类里可以有多个初始化块，初始化块分为两种:</p>
<ul>
<li>普通初始化块</li>
<li>静态初始化块（static修饰）</li>
</ul>
<p>初始化块是用花括号括起来的代码段，在构造器之前被调用。<strong>注意，初始化块执行顺序和类中变量的直接初始化顺序取决于<code>源代码中排列顺序</code>。</strong>普通初始化块负责对对象进行初始化，而类初始化块则负责对类进行初始化。静态初始化块是类相关的，系统将在类初始化阶段执行静态初始化块，而不是在创建对象时才执行，因此静态初始化块总是比普通初始化块先执行。</p>
<p>不论是构造器还是初始化块，创建类或者对象时都会从源头依次调用它们。对于对象而言，每个类先初始化块后构造器（从object开始）。对于类而言，每个类都执行静态初始化块（也是从object开始）。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>java的继承通过<code>extends</code>关键字，且只有<code>单继承</code>。继承意为子类拓展了父类，拥有了父类的全部成员变量和方法。但是构造器并不能继承，也就是说需要自己定义子类的构造器，可以通过<code>super</code>关键字调用父类的方法或者变量，和<code>this</code>一样，使用<code>super</code>调用父类构造器也必须在第一行，所以这两者不会同时出现。</p>
<p>子类包含与父类同名的方法时构成<code>override</code>。覆盖方法和被覆盖方法要么都是类方法要么都是实例方法，不能一个是类方法一个是实例方法。覆盖之后也不是完全无法访问了，还有<code>super</code>嘛！如果发生子类变量和父类变量同名时，也可以通过这样来访问被隐藏的变量。<strong><code>super</code>用于限定该对象调用它从父类继承得到的实例变量或方法，和this一样针对的是实例，如果是类本身用类名好了。</strong>如果父类方法具有private访问权限，则该方法对其子类是隐藏的，子类不仅无法访问该方法，也不能<code>override</code>它，即使定义了一个同名方法，也只是在子类中定义了一个新方法而已。</p>
<blockquote>
<p>重载是<code>overload</code>,重写是<code>override</code>。</p>
</blockquote>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>引用变量有两个类型：</p>
<ul>
<li>编译时类型</li>
<li>运行时类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baseclass p=new subclass()</div><div class="line">这里p编译时类型为baseclass,运行时类型为subclass。</div></pre></td></tr></table></figure>
<p>因为子类可以理解为特殊的父类，可以把子类对象赋给一个父类的引用变量，无需任何强制变换。（upcasting）</p>
<p>如果编译时类型和运行时类型不一致就会发生<code>多态</code>。只有方法有多态性，实例变量没有。注意，<em>引用变量在编译阶段只能调用编译时类型所具有的方法，如果发生多态，运行时可能执行运行时类型所具有的方法。</em></p>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul>
<li>基本类型的强制类型转换只能在数值类型间进行，包括整型、字符型和浮点型。数值类型和布尔类型不可以！！！</li>
<li>引用变量的类型转换只能在具有继承关系的两个类型之间进行，否则编译出错。如果试图把一个父类实例转换成子类的类型，那么父类实例的编译时类型为父类类型，运行时类型必须是子类类型才可，否则引发<code>ClassCastException</code>异常。</li>
</ul>
<p><code>instanceof</code>运算符的前一个操作数通常是引用变量，后一个操作数通常是一个类（或接口）。主要用于判断前面的对象是否是后面的类、或者其子类、实现类的实例，返回boolean值。</p>
<p>注意，instanceof运算符前面操作数的编译时类型要么与后面的类相同，要么与后面的类具有父子继承关系，否则编译出错。</p>
<p><strong>其实这个运算符主要配合强制类型转换使用，如果是true表示可以转换，否则就容易出事。</strong></p>
<h2 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h2><p>继承容易破坏封装，组合对此更好。组合就是一个类的对象中成员是另一个类的对象。</p>
<p><strong>组合对应has-a关系，继承对应is-a关系</strong></p>
<p>示例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">class Base</div><div class="line">&#123;</div><div class="line">    public int n=6;</div><div class="line">    public void base()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;base class!!!&quot;);</div><div class="line">    &#125;</div><div class="line">    public void test()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;in base class&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Sub extends Base</div><div class="line">&#123;</div><div class="line">    public int n=1;</div><div class="line">    public void sub()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;sub class!!!&quot;);</div><div class="line">    &#125;</div><div class="line">    public void test()</div><div class="line">    &#123;</div><div class="line">        System.out.println(&quot;in sub class&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class study</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args)</div><div class="line">    &#123;</div><div class="line">        Base p=new Sub();</div><div class="line">        p.base();</div><div class="line">        p.test();</div><div class="line">        Base q=new Base();</div><div class="line"></div><div class="line">        System.out.println(q instanceof Sub);</div><div class="line">        System.out.println(p instanceof Sub);</div><div class="line"></div><div class="line">        Sub r=(Sub)p;</div><div class="line">        r.base();</div><div class="line">        r.test();</div><div class="line">        r.sub();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的结果是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">base class!!!</div><div class="line">in sub class</div><div class="line">false</div><div class="line">true</div><div class="line">base class!!!</div><div class="line">in sub class</div><div class="line">sub class!!!</div></pre></td></tr></table></figure>
<p>可见，instanceof运算符判断左操作数时，针对的是运行时类型！！！</p>
<p>这里发现直接把Base类型的q强制转换成Sub类型会出错，而p不会！完全根据instanceof判断呐。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git记录]]></title>
      <url>https://www.prime666.com/2017/02/22/git%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>总结了基本git全部的用法，再也不怕以后忘了……</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>第一次使用git时，要做以下的事情：</p>
<h3 id="申请密钥（windows在用户名下的-ssh文件夹下），对当前电脑有效"><a href="#申请密钥（windows在用户名下的-ssh文件夹下），对当前电脑有效" class="headerlink" title="申请密钥（windows在用户名下的.ssh文件夹下），对当前电脑有效:"></a>申请密钥（windows在用户名下的.ssh文件夹下），对当前电脑有效:</h3><pre><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;
</code></pre><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去id_rsa.pub是公钥，可以放心地告诉任何人。至于为何这样，因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<h3 id="配置参数如下"><a href="#配置参数如下" class="headerlink" title="配置参数如下:"></a>配置参数如下:</h3><p>注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<pre><code>git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;email@example.com&quot;
</code></pre><p>之后就可以开始操作git了</p>
<h2 id="各种操作集合"><a href="#各种操作集合" class="headerlink" title="各种操作集合"></a>各种操作集合</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>git init</code>命令用于初始化代码仓库。当然也可以不自己创建，去<del>偷</del>学习别人的。</p>
<p>创建一个本地仓库的克隆版本：<br>git clone /path/to/repository</p>
<p>如果是远端服务器上的仓库，你的命令会是这个样子：<br>git clone username@host:/path/to/repository</p>
<h3 id="git基本结构"><a href="#git基本结构" class="headerlink" title="git基本结构"></a>git基本结构</h3><p>本地仓库有三棵树，第一棵是文件夹，也就是windows下的目录，也是工作目录（工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库，也就是后两者）；第二棵是缓冲区（stage或index），临时保存你的改动；最后一个是HEAD，指向最后一次commit，master分支。</p>
<p>第一步当然是用<code>git add &lt;filename&gt;</code>或<code>git add *</code> 命令来添加到缓冲区。<br>第二步是<code>git commit -m &quot;</code>，这时你的改动已经提交到了 HEAD，<strong>一次性把暂存区的所有修改提交</strong>，<code>-m</code>后面输入的是本次提交的说明（字符串），可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录（用git log命令，记录commit到HEAD内的，不是缓冲区中的。如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数）。</p>
<h3 id="时光旅行"><a href="#时光旅行" class="headerlink" title="时光旅行"></a>时光旅行</h3><p>运用<code>git status</code>命令可以随时查看当前仓库的状态，比如有啥文件修改了没提交等等。如果想很明确知道文件哪里修改了，那就用<code>git diff 文件名</code>吧，它会告诉你呦。</p>
<p>这时，我想回退了。我就可以用<code>git reset</code>命令。在git中用HEAD表示当前版本，上一个版本就是HEAD^,上上个版本就是HEAD^^……。往上100个版本就可以写成<code>HEAD~100</code>。想到那一个版本就用<code>git reset --hard HEAD或commit一栏的id号</code>，<strong>HEAD就是个指针。</strong>git提供了<code>git reflog</code>命令来让你查看历史记录（关于版本跳转的），第一列就是commit id。</p>
<blockquote>
<p>需要注意，git保存的是修改而不是文件，如果修改了源文件而不add直接commit，修改不会被提交，用<code>git diff HEAD -- 文件名</code>就可以看区别。所以，修改了源文件一定经过add再commit！</p>
</blockquote>
<p><code>git checkout -- 文件名</code>可以让你的源文件回退修改，如果自修改以来没有提交到暂存区，那么撤销就是回到版本库的状态；如果已经提交到暂存区才修改的，那么只会回退到暂存区的版本。</p>
<p><code>git reset HEAD 文件名</code>可以让你把暂存区的修改清空，HEAD表示当前版本。然后可以用上面的命令再恢复源文件。</p>
<p><code>git rm 文件名</code>用于删除一个文件。和在工作目录删除文件是两码事。</p>
<h3 id="远程仓库————github登场"><a href="#远程仓库————github登场" class="headerlink" title="远程仓库————github登场"></a>远程仓库————github登场</h3><p>在github建立仓库后，用<code>git remote add origin ssh或http</code>即可关联远程仓库，这里远程库的名字就是origin。</p>
<p><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>命令用于推送到远程仓库。如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<pre><code>git push origin :master
# 等同于
git push origin --delete master删除origin主机的master分支
</code></pre><p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<pre><code>git push origin
</code></pre><p>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<pre><code>git push -u origin master
</code></pre><p>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p><em>不过我第一次却失败了，用下面的force才行或者用<code>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>命令同步后再push，这时工作目录和远程一样一样的。</em></p>
<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>
<pre><code>git push --force origin 
</code></pre><h3 id="分支管理的艺术"><a href="#分支管理的艺术" class="headerlink" title="分支管理的艺术"></a>分支管理的艺术</h3><p><em>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。</em>HEAD严格来说并不是指向commit提交而是指向当前分支。<br><code>git branch 分支名</code>创建一个分支，<code>git branch</code>会列出所有分支，加*号的是当前分支。<code>git branch -b 分支名</code>相当于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch a</div><div class="line">git checkout a</div></pre></td></tr></table></figure></p>
<p>即创建并切换分支。</p>
<p><code>git merge 分支名</code>用于合并分支到当前分支,之后可以用<code>git branch -d 分支名</code>删除被合并的分支。</p>
<blockquote>
<p>Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p>
</blockquote>
<p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式（直接更新到最新的分支），但这种模式下，删除分支后，会丢掉分支信息。如果加上<code>--no-ff</code>参数，会在合并时进行commit，这样会从历史中<code>git log --graph</code>可以查看历史合并分支，由于进行了一次commit，最后加上<code>-m</code>参数。<br>有时候合并会冲突，如果要合并的两个分支中同一个文件同一个地方不同的话，需要手动修改好在add、commit即可。</p>
<p>参考：</p>
<p>[git远程操作详解]    (<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a>)</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[枚举类和metaclass]]></title>
      <url>https://www.prime666.com/2017/02/22/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8Cmetaclass/</url>
      <content type="html"><![CDATA[<p><a href="http://prime666.com/2017/02/22/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8Cmetaclass/#枚举类" target="_blank" rel="noopener">戳我看枚举类</a></p>
<p><a href="http://prime666.com/2017/02/22/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%92%8Cmetaclass/#元类" target="_blank" rel="noopener">戳我看metaclass</a></p>
<a id="more"></a>
<p><a name="枚举类"></a></p>
<h2>枚举类:</h2>

<p>看如下代码：</p>
<pre><code>from enum import Enum
Month = Enum(&apos;Month&apos;, (&apos;Jan&apos;, &apos;Feb&apos;, &apos;Mar&apos;, &apos;Apr&apos;, &apos;May&apos;, &apos;Jun&apos;, &apos;Jul&apos;, &apos;Aug&apos;, &apos;Sep&apos;, &apos;Oct&apos;, &apos;Nov&apos;, &apos;Dec&apos;))
</code></pre><p>这段代码定义一个Month类型的枚举类，可以用Month.Jan来引用一个常量。</p>
<pre><code>for name, member in Month.__members__.items():
print(name, &apos;=&gt;&apos;, member, &apos;,&apos;, member.value)
</code></pre><p>value属性则是自动赋给成员的int常量，默认从1开始计数。<br>用上述代码打印结果如下：</p>
<p><pre><br>Jan =&gt; Month.Jan , 1<br>Feb =&gt; Month.Feb , 2<br>Mar =&gt; Month.Mar , 3<br>Apr =&gt; Month.Apr , 4<br>May =&gt; Month.May , 5<br>Jun =&gt; Month.Jun , 6<br>Jul =&gt; Month.Jul , 7<br>Aug =&gt; Month.Aug , 8<br>Sep =&gt; Month.Sep , 9<br>Oct =&gt; Month.Oct , 10<br>Nov =&gt; Month.Nov , 11<br>Dec =&gt; Month.Dec , 12<br></pre><br>其中Month.<strong>members</strong>返回字典，对于字典的keys（）、values（）、items（）方法，文档中写到：</p>
<blockquote>
<p>The objects returned by dict.keys(), dict.values() and dict.items() are view objects. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes.<br>Dictionary views can be iterated over(迭代) to yield their respective data, and support membership tests.</p>
</blockquote>
<p>如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：</p>
<pre><code>from enum import Enum, unique
@unique
class Weekday(Enum):
    Sun = 0 # Sun的value被设定为0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6
@unique装饰器可以帮助我们检查保证没有重复值。
</code></pre><p>可以用多种方法访问枚举类型，以下结果相同：</p>
<pre><code>print(Weekday.Sun)
print(Weekday[&apos;Sun&apos;])
print(Weekday(0))
</code></pre><p>都是<code>Weekday.Sun</code></p>
<hr>
<p><a name="元类"></a></p>
<h2>元类</h2>


<blockquote>
<p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p>
</blockquote>
<p>type()函数既可以返回一个对象的类型，又可以创建出新的类型。</p>
<p>示例：</p>
<pre><code>def fn(self, name=&apos;world&apos;): # 先定义函数
    print(&apos;Hello, %s.&apos; % name)
Hello=type(&apos;Hello&apos;,(object,),dict(hello=fn))
</code></pre><p>要创建一个class对象，type()函数依次传入3个参数：</p>
<ul>
<li>class的名称；</li>
<li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li>
<li>class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上（关键资字参数）。</li>
</ul>
<p>通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。</p>
<hr>
<blockquote>
<p>metaclass，直译为元类，简单的解释就是：当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。<br>连接起来就是：<strong>先定义metaclass，就可以创建类，最后创建实例。</strong></p>
</blockquote>
<p><em>metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。</em><br>示例代码如下，这个metaclass可以给我们自定义的MyList增加一个add方法：</p>
<pre><code># metaclass是创建类，所以必须从`type`类型派生：
class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        attrs[&apos;add&apos;] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)
</code></pre><p>在定义类的时候还要指示使用ListMetaclass来定制类，传入关键字参数metaclass，它指示Python解释器在创建MyList时，要通过ListMetaclass.<strong>new</strong>()来创建：</p>
<pre><code># 指示使用ListMetaclass来定制类
class MyList(list, metaclass=ListMetaclass):
    pass

L = MyList()
L.add(1)
print(L)
</code></pre><p><strong>new</strong>()方法接收到的参数依次是：</p>
<blockquote>
<ul>
<li>当前准备创建的类对象；</li>
<li>类的名字；</li>
<li>类继承的父类集合；</li>
<li>类的方法集合。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识html]]></title>
      <url>https://www.prime666.com/2017/02/21/html%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><a href="http://prime666.com/2017/02/21/html%E7%AC%94%E8%AE%B0/#模板" target="_blank" rel="noopener">戳我速度看模板</a></p>
<p><a href="http://www.w3school.com.cn/html/html_quick.asp" target="_blank" rel="noopener">戳我完整学习</a><br><a id="more"></a></p>
<h2>初识html杂记</h2>

<pre><code>&lt;html&gt; 与 &lt;/html&gt; 之间的文本描述网页
&lt;body&gt; 与 &lt;/body&gt; 之间的文本是可见的页面内容
&lt;h1&gt; 与 &lt;/h1&gt; 之间的文本被显示为标题，1~6.
&lt;p&gt; 与 &lt;/p&gt; 之间的文本被显示为段落
</code></pre><p>HTML 链接是通过 <code>&lt;a&gt;</code> 标签进行定义的。比如：<br><code>&lt;a href=&quot;http://www.w3school.com.cn&quot;&gt;This is a link&lt;/a&gt;</code><br>也可以用一种称为anchor（锚）的手法：</p>
<pre><code>&lt;a name=&quot;anchor&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;http:\\www.prime666.com#anchor&quot; target=&quot;_blank&quot;&gt;跳转至我的博客&lt;/a&gt;
</code></pre><p>也可以把图片作为链接，只要嵌套标签即可：</p>
<pre><code>&lt;a href=&quot;http:\\www.prime666.com&quot;&gt;
    &lt;img src=&quot;/images/1.jpg&quot; width=&quot;360&quot; height=&quot;200&quot; border=&quot;1&quot;/&gt;
&lt;/a&gt;
</code></pre><ul>
<li>HTML 元素以开始标签起始</li>
<li>HTML 元素以结束标签终止</li>
<li>元素的内容是开始标签与结束标签之间的内容</li>
<li>某些 HTML 元素具有空内容（empty content）</li>
<li>空元素在开始标签中进行关闭（以开始标签的结束而结束）例如\<br></li>
<li>大多数 HTML 元素可拥有属性。</li>
<li>HTML 标签对大小写不敏感：<code>&lt;P&gt;</code> 等同于<code>&lt;p&gt;</code>。许多网站都使用大写的 HTML 标签。</li>
<li>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。<br>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号。</li>
<li><p>style标签位于head标签中，用于定义标题段落样式。示例：</p>
<pre><code>&lt;head&gt;
&lt;style type=&quot;text/css&quot;&gt;
h1 {color:red}
p {color:blue}
&lt;/style&gt;
&lt;/head&gt;
</code></pre><p>  其中type 属性是必需的，定义 style 元素的内容。唯一可能的值是 “text/css”。</p>
</li>
<li><p><code>&lt;title&gt;</code> 标签定义文档的标题。title元素在所有HTML/XHTML文档中都是必需的。</p>
</li>
<li><code>&lt;base&gt;</code> 标签为页面上的所有链接规定默认地址或默认目标（target）</li>
<li><p><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。\<meta> 标签始终位于 head 元素中。元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>
<pre><code>&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5;url=http://www.w3school.com.cn&quot; /&gt;
5s后跳转到另一个网页。
</code></pre></li>
<li><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如 JavaScript。</li>
<li><code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。</li>
</ul>
<hr>
<p>分割线O(∩_∩)O</p>
<hr>
<p><a name="模板"></a></p>
<h2>下面是常用的模板：</h2>

<p>Physical Styles：</p>
<pre><code>&lt;b&gt;This text is bold&lt;/b&gt;
&lt;i&gt;This text is italic&lt;/i&gt;
</code></pre><p>Logical Styles：</p>
<pre><code>&lt;em&gt;This text is emphasized&lt;/em&gt;
&lt;strong&gt;This text is strong&lt;/strong&gt;
&lt;code&gt;This is some computer code&lt;/code&gt;
</code></pre><p>Links, Anchors, and Image Elements：</p>
<pre><code>&lt;a href=&quot;http://www.example.com/&quot;&gt;This is a Link&lt;/a
&lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot;
alt=&quot;Alternate Text&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;Send e-mail&lt;/a&gt;
&lt;a name=&quot;tips&quot;&gt;Useful Tips Section&lt;/a&gt;
&lt;a href=&quot;#tips&quot;&gt;Jump to the Useful Tips Section&lt;/a&gt;
</code></pre><p>Unordered list：</p>
<pre><code>&lt;ul&gt;       &lt;!-- type属性可取值disc、square、circle对应不同标号 --&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Next item&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>Ordered list：</p>
<pre><code>&lt;ol&gt;         &lt;!-- ol标签内可加type属性,可取值 A a i I对应不同标号--&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Next item&lt;/li&gt;
&lt;/ol&gt;

&lt;ol&gt;    定义有序列表。
&lt;ul&gt;    定义无序列表。
&lt;li&gt;    定义列表项。
&lt;dl&gt;    定义自定义列表。
&lt;dt&gt;    定义自定义列表的项目。
&lt;dd&gt;    定义自定义列表项目的描述。
列表当然可以嵌套！
</code></pre><p>Definition list：</p>
<pre><code>&lt;dl&gt;
&lt;dt&gt;First term&lt;/dt&gt;
&lt;dd&gt;Definition&lt;/dd&gt;
&lt;dt&gt;Next term&lt;/dt&gt;
&lt;dd&gt;Definition&lt;/dd&gt;
&lt;/dl&gt;
</code></pre><p>Tables：<br><a href="http://www.w3school.com.cn/html/html_tables.asp" target="_blank" rel="noopener">了解详情戳我</a></p>
<pre><code>&lt;table&gt;    定义表格
&lt;caption&gt;    定义表格标题。
&lt;th&gt;    定义表格的表头。
&lt;tr&gt;    定义表格的行。
&lt;td&gt;    定义表格单元。
&lt;thead&gt;    定义表格的页眉。
&lt;tbody&gt;    定义表格的主体。
&lt;tfoot&gt;    定义表格的页脚。
&lt;col&gt;    定义用于表格列的属性。
&lt;colgroup&gt;    定义表格列的组。

&lt;table border=&quot;1&quot;&gt;
&lt;tr&gt;
  &lt;th&gt;someheader&lt;/th&gt;
  &lt;th&gt;someheader&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;sometext&lt;/td&gt;
  &lt;td&gt;sometext&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</code></pre><p>Frames：通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。<br><a href="http://www.w3school.com.cn/html/html_frames.asp" target="_blank" rel="noopener">了解详情</a></p>
<pre><code>框架结构标签（&lt;frameset&gt;）
框架结构标签（&lt;frameset&gt;）定义如何将窗口分割为框架
每个 frameset 定义了一系列行或列
rows/columns 的值规定了每行或每列占据屏幕的面积
noresize=&quot;noresize&quot;可以禁止拖放

&lt;frameset cols=&quot;25%,75%&quot;&gt;
  &lt;frame src=&quot;page1.htm&quot;&gt;
  &lt;frame src=&quot;page2.htm&quot;&gt;
&lt;/frameset&gt;
</code></pre><p>iframe 用于在网页内显示网页————内联框架</p>
<pre><code>&lt;iframe src=&quot;url&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/iframe&gt;
height 和 width 属性用于规定 iframe 的高度和宽度。
属性值的默认单位是像素，但也可以用百分比来设定（比如 &quot;80%&quot;）。
frameborder 属性规定是否显示 iframe 周围的边框。设置属性值为 &quot;0&quot; 就可以移除边框。
</code></pre><p>其它：</p>
<pre><code>&lt;!-- This is a comment --&gt; 注释
&lt;blockquote&gt; 引用
Text quoted from some source.
&lt;/blockquote&gt;
&lt;address&gt; 作者联系方式
Address 1&lt;br&gt;
Address 2&lt;br&gt;
City&lt;br&gt;
&lt;/address&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[偏函数]]></title>
      <url>https://www.prime666.com/2017/02/18/%E5%81%8F%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><em>Python的functools模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。说白点很像c++的函数适配器</em><br><a id="more"></a><br>当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>
<p>例如：</p>
<pre><code>import functools
int2=functools.partial(int,base=2)

print(int2(&apos;101011&apos;))
print(int2(&apos;54&apos;,base=10))
</code></pre><p>注意partial填充的值是可以被覆盖的，如上面最后条语句。</p>
<p>最后，创建偏函数时，实际上可以接收函数对象、<em>args和**kw这3个参数。<br>例如，当传入<code>max2 = functools.partial(max, 10)</code>,实际上会把10作为</em>args的一部分自动加到左边，亦即当调用<code>max2(5,6,7)</code>时会变成<code>args=(10,5,6,7),max2(*args)</code></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
